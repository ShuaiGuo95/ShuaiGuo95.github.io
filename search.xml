<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从百度百科爬取上市公司介绍</title>
      <link href="/2021/09/16/cong-bai-du-bai-ke-pa-qu-shang-shi-gong-si-jie-shao/"/>
      <url>/2021/09/16/cong-bai-du-bai-ke-pa-qu-shang-shi-gong-si-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="从百度百科爬取上市公司介绍"><a href="#从百度百科爬取上市公司介绍" class="headerlink" title="从百度百科爬取上市公司介绍"></a>从百度百科爬取上市公司介绍</h1><p>接下来我们实现一个稍微复杂些的爬虫，从百度百科爬取上市公司介绍内容。</p><h2 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h2><p>本着避难就易的原则，我们首先来谷歌以下”爬取百度百科“，看看能不能找到有用的代码：</p><p><img src="google.png" alt="谷歌搜索“爬取百度百科”"></p><p>然后点开第一个链接看一看。这篇文章告诉我们只需要在“<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB">https://baike.baidu.com/item/</a>”后面加上一个名词，就可以得到百度百科下该名词的词条，然后进行爬取，我们可以看一眼百度百科测试一下，确实是这样的。</p><p>这篇文章提供了这样一段代码来进行指定查询词语的爬取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 请求地址</span>    url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com/item/'</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment"># 请求头部</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>     <span class="token punctuation">}</span>    <span class="token comment"># 利用请求地址和请求头部构造请求对象</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span>    <span class="token comment"># 发送请求，获得响应</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token comment"># 读取响应，获得文本</span>    text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 构造 _Element 对象</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment"># 使用 xpath 匹配数据，得到匹配字符串列表</span>    sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary")]//text()'</span><span class="token punctuation">)</span>     <span class="token comment"># 过滤数据，去掉空白</span>    sen_list_after_filter <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> sen_list<span class="token punctuation">]</span>    <span class="token comment"># 将字符串列表连成字符串并返回</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sen_list_after_filter<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'查询词语：'</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> query<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询结果：%s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码里面定义了main函数，其主要作用是在有多个Python文件时保证从这里开始执行，当然这里并用不到。</p><p>我们运行一下这段代码，发现它可以爬取到百度百科的前面几段话，可能不太很符合我们的需求，但是还属于可以抢救一下。我们先读一下代码试试。</p><h2 id="原码重写与解读"><a href="#原码重写与解读" class="headerlink" title="原码重写与解读"></a>原码重写与解读</h2><p>首先重写一下代码，便于调试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreecontent <span class="token operator">=</span> <span class="token string">'仙女'</span><span class="token comment"># 请求地址</span>url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com/item/'</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 请求头部</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span> <span class="token punctuation">}</span><span class="token comment"># 利用请求地址和请求头部构造请求对象</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token comment"># 发送请求，获得响应</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token comment"># 读取响应，获得文本</span>text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 构造 _Element 对象</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 使用 xpath 匹配数据，得到匹配字符串列表</span>sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary")]//text()'</span><span class="token punctuation">)</span> <span class="token comment"># 过滤数据，去掉空白</span>sen_list_after_filter <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> sen_list<span class="token punctuation">]</span><span class="token comment"># 将字符串列表连成字符串并返回</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sen_list_after_filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑一下，是可以跑通的。这段代码定义了函数query()用于获得爬取结果，核心是发送请求，获得响应的这句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 发送请求，获得响应</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后通过调试和百度、查阅文档、查看网页源码等，我们有以下认识：</p><ol><li>req需要根据请求地址和请求头部来构造。请求地址很好理解，请求头部主要是用来模拟浏览器访问的，有固定写法。这里我们可以看一下文档便知；</li><li>urllib.parse.quote()方法是用于对汉字做特定处理，使其能出现在url链接中；</li><li>得到的text是包含了网页HTML代码在内的很长很长的一段字符串；</li><li>html.xpath()方法实现了内容筛选功能，sen_list是筛选后得到的一个充满文本的list；</li><li>对sen_list做了去空白和拼接然后输出结果。</li></ol><p>其中html.xpath()的筛选功能是采用了一种叫做XPath的语言，我们不用管，这不太重要，即使在网页上我们也能找到爬取其他文字内容的关键字：para</p><p>然后我们把代码里面的筛选规则照猫画虎，替换一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary") or contains(@class,"para")]//text()'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>怎么样，是不是得到了我们想要的全文爬取的功能啦<span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>我们重新复原一下代码，因为一个完整的query()函数是便于我们后面调用的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 请求地址</span>    url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com/item/'</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment"># 请求头部</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>     <span class="token punctuation">}</span>    <span class="token comment"># 利用请求地址和请求头部构造请求对象</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span>    <span class="token comment"># 发送请求，获得响应</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token comment"># 读取响应，获得文本</span>    text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 构造 _Element 对象</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment"># 使用 xpath 匹配数据，得到匹配字符串列表</span>    sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary") or contains(@class,"para")]//text()'</span><span class="token punctuation">)</span>    <span class="token comment"># 过滤数据，去掉空白</span>    sen_list_after_filter <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> sen_list<span class="token punctuation">]</span>    <span class="token comment"># 将字符串列表连成字符串并返回</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sen_list_after_filter<span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token string">'仙女'</span>result <span class="token operator">=</span> query<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询结果：%s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注意一下，如果小仙女认为我们只需要爬取第一段即可，那就不用改那一句啦。</p><h2 id="Python读取表格"><a href="#Python读取表格" class="headerlink" title="Python读取表格"></a>Python读取表格</h2><p>那么接下来我们怎么做呢？上一节我们已经获得了上市公司的基本信息，我们只需要按照公司名称作为关键字，去分别爬取就好了。这里首先涉及到一个问题：读取excel并获取一系列字符串类型的公司名。因为我们需要字符串类型的公司名去做拼接和检索。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从中商产业研究院爬取2021年A股上市企业基本信息表</title>
      <link href="/2021/09/15/cong-zhong-shang-chan-ye-yan-jiu-yuan-pa-qu-2021-nian-a-gu-shang-shi-qi-ye-ji-ben-xin-xi-biao/"/>
      <url>/2021/09/15/cong-zhong-shang-chan-ye-yan-jiu-yuan-pa-qu-2021-nian-a-gu-shang-shi-qi-ye-ji-ben-xin-xi-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="从中商产业研究院爬取2021年A股上市企业基本信息表"><a href="#从中商产业研究院爬取2021年A股上市企业基本信息表" class="headerlink" title="从中商产业研究院爬取2021年A股上市企业基本信息表"></a>从中商产业研究院爬取2021年A股上市企业基本信息表</h1><p>选这个网站来爬不是因为它有多好，而是因为爬它很简单，跟我们也有关系，就先爬着玩一下，当作一个入门吧。</p><h2 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h2><p>本着先易后难的精神，我在谷歌搜索了“python 获取上市公司信息”：</p><p><img src="google.png" alt="谷歌搜索“python 获取上市公司信息”"></p><p>找到了<a href="https://zhuanlan.zhihu.com/p/137965211">这篇博文</a>，这是一篇从中商产业研究院网站爬取2019年A股上市公司基本信息的博文，它告诉我们<a href="https://s.askci.com/stock/a/0-0?reportTime=2019-12-31&amp;pageNum=1#QueryCondition">在这里</a>可以看到2019年A股上市公司的基本信息，大致如下图：</p><p><img src="fig.jpg" alt="2019年A股上市公司基本信息页面"></p><p>并且提供了以下一段很短的代码来爬取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> timestart_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 获取程序开始运行时间</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span> <span class="token punctuation">)</span>               <span class="token comment"># 定义一个空的DataFrame用于存储数据</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># 爬取全部187页数据，设置为200页，确保都覆盖</span>        url <span class="token operator">=</span> <span class="token string">'http://s.askci.com/stock/a/?reportTime=2019-12-31&amp;pageNum={i}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">=</span>i<span class="token punctuation">)</span> <span class="token comment"># 日期可以改，可获取季度数据</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 第1个表格故填[0],经观察发现所需表格是网页中第4个表格，故为[3]。获得后纵向追加到df中</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>              <span class="token comment"># 每隔0.5秒访问一次，应对反爬措施</span>        endtime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在获取上市公司基本信息表第'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'页'</span><span class="token punctuation">,</span><span class="token string">'已运行%.2f秒'</span> <span class="token operator">%</span> endtime<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>     <span class="token comment"># 将原本的int数据类型转换为文本，补齐股票代码为6位，用的时候必须加上.str前缀</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'序号'</span><span class="token punctuation">,</span><span class="token string">'招股书'</span><span class="token punctuation">,</span><span class="token string">'公司财报'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 删除多余的列，axis=1（按列方向操作）、inplace=True（修改完数据，在原数据上保存）</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'2019年上市公司基本信息表.xlsx'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'*******目标爬取完成*******'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致采用了pandas模块来读取网页信息，按照每页网页的url规律来模拟跳转页面，然后删掉无效信息，保存为表格文件。</p><p>在这段代码中，我们还可以看到“try+except”的异常监测机制，方法链的使用，时间模块的使用，字符串前面加“r”表示无转义字符的字符串，等等。</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>然而这份代码已经陈旧了，我们想要最新的信息怎么办呢。打开中商产业研究院首页，点击产业数据→数据库→A股数据，我们果然找到了最新的信息。替换一下原代码中的url就好啦。同样的，把最大页数也要改一下。</p><p>在试着跑了一下之后我发现，sleep时间0.5秒还是太短了，跑不完200多页就被反爬了，于是我改到5秒。顺利爬取完毕，得到表格。</p><p>我们采用的代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> timestart_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 获取程序开始运行时间</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span> <span class="token punctuation">)</span>               <span class="token comment"># 定义一个空的DataFrame用于存储数据</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">226</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># 爬取全部187页数据，设置为200页，确保都覆盖</span>        url <span class="token operator">=</span> <span class="token string">'https://s.askci.com/stock/a/0-0?reportTime=2021-06-30&amp;pageNum={i}#QueryCondition'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">=</span>i<span class="token punctuation">)</span> <span class="token comment"># 日期可以改，可获取季度数据</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 第1个表格故填[0],经观察发现所需表格是网页中第4个表格，故为[3]。获得后纵向追加到df中</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>              <span class="token comment"># 每隔1秒访问一次，应对反爬措施</span>        endtime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在获取上市公司基本信息表第'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'页'</span><span class="token punctuation">,</span><span class="token string">'已运行%.2f秒'</span> <span class="token operator">%</span> endtime<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出错啦'</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>     <span class="token comment"># 将原本的int数据类型转换为文本，补齐股票代码为6位，用的时候必须加上.str前缀</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'序号'</span><span class="token punctuation">,</span><span class="token string">'招股书'</span><span class="token punctuation">,</span><span class="token string">'公司财报'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 删除多余的列，axis=1（按列方向操作）、inplace=True（修改完数据，在原数据上保存）</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'2021年上市公司基本信息表.xlsx'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'*******目标爬取完成*******'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么样，是不是很简单呀<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h2><p>经过一些初步研究，我发现比较稳定的、成体系的信息来源包括：</p><ul><li>百度百科对上市公司的介绍；</li><li>沪交所、深交所等官方数据库，或东方财富、网易财经等财经网站；</li><li>其他研究人员公布的数据集；</li><li>Tushare、Akshare等Python开源金融库。</li></ul><p>目前我感觉如果要从每个公司的官网去爬简介太困难了，因为极其不成体系，每个公司的简介页面都不尽相同，没有规律可言。</p><p>公司财报确实是一个很好的渠道，解析财报需要至少以下工作：</p><ul><li>足够大的硬盘，因为我们要下载很多很多的文件，处理很多很多的文件；</li><li>Python对PDF文件的处理办法，PDF转其他格式的办法，因为财报大部分都是PDF格式的。</li></ul><p>后面我们看情况把这些都爬一下或者爬一部分。做完这些，我们再：</p><ol><li>标定数据集；</li><li>与NLP相关研究进行对接。</li></ol><p>我们一点点的做起来就好啦，都不难的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辛丑教师节拟赠咪导</title>
      <link href="/2021/09/09/xin-chou-jiao-shi-jie-ni-zeng-mi-dao/"/>
      <url>/2021/09/09/xin-chou-jiao-shi-jie-ni-zeng-mi-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="辛丑教师节拟赠咪导"><a href="#辛丑教师节拟赠咪导" class="headerlink" title="辛丑教师节拟赠咪导"></a>辛丑教师节拟赠咪导</h1><p>治业精勤真吾师，学贯中西一大家。<br>安中楼前育桃李，紫峰厦下沃新花。<br>人生得幸闻教诲，恩师珍重我奋发！</p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python总结与练习</title>
      <link href="/2021/09/06/python-zong-jie-yu-lian-xi/"/>
      <url>/2021/09/06/python-zong-jie-yu-lian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python总结与练习"><a href="#Python总结与练习" class="headerlink" title="Python总结与练习"></a>Python总结与练习</h1><p>至此我们基本把Python中最重要的语法和概念介绍了一遍，包括变量的定义与基本运算，循环与条件语句，函数的定义和使用，面向对象编程等等。基于这些内容我们已经能写很多很多程序，实现很多很多功能了。</p><p>除此之外，Python中还有一些概念，如迭代器与生成器、错误与异常处理、命名空间、多线程等等，由于不是最常用的，所以没介绍，后面我们碰到了再学。</p><h2 id="简单练习"><a href="#简单练习" class="headerlink" title="简单练习"></a>简单练习</h2><p>我们先来做一些只涉及到基本语法的练习题，锻炼一下对基础知识和编程思维。</p><p>请小仙女写一段Python代码，分别实现以下功能：</p><ul><li>输入一个年份，该代码可以判断并输出该年是否为闰年；</li><li>输出一个10行的杨辉三角；</li><li>给定三条边长，判断是否可以构成三角形；</li><li>找到一个全为数字的list中的最大值、最小值、均值、中值；</li><li>给定一个日期的年月日值，输出这个时期是当年的第几天；</li></ul><h2 id="进阶练习"><a href="#进阶练习" class="headerlink" title="进阶练习"></a>进阶练习</h2><p>在我们平时写程序的过程中，大部分时候都是配置一些环境，安装一些包，导入包中的一些模块，查一下这个包的文档，看看某个类和接口怎么用，做一些简单的处理，写一些逻辑，然后就可以了。</p><p>更常见的情况是我们想要实现某个简单的功能，比如图片读取，或者文件读取，然后就去百度或者谷歌搜索“Python 图片读取”，“Python 文件读取”，看看别人都是怎么做的，然后得到一些启发，读懂并且跑通别人的代码，看看别人都用了什么包什么接口，然后有针对性地去安装和使用。</p><p>更前沿的内容比如最新的研究动态，科研成果，最新算法，可能就需要去谷歌学术搜索相关论文，然后找找作者公布的源代码去跑一下试试了。</p><p>对于一些工程性的问题，比如用Python搭建网站，写软件，爬虫，我们需要学的是对应框架，比如Django，Qt之类的，这些东西就不仅要求我们跑通别人的代码，还需要对别人的代码或者工程有比较深入的理解，会套用到我们自己的使用场景中，也要掌握一些其他相关的语言和技术，有分析和探索能力。</p><p>所以其实油油认为，最重要的是<strong>百度的能力，读代码的能力，学习的能力</strong>，再加上一点<strong>创造性思维</strong>。</p><p>从广义角度讲，我们需要明确地知道Python几乎可以做任何你能在电脑和手机上做的事，以及在电脑和手机上用到的东西；</p><p>从狭义角度讲，我们需要熟悉自己最关注的应用和功能，了解自己需要用的那几个包，保证可以用Python实现自己想要的功能，让Python为我所用。</p><p><img src="python.jpg" alt="Python可以做什么？"></p><p>为了简单锻炼这方面的能力，我们来做几个小练习吧。请小仙女分别从网上找Python代码实现以下功能：</p><ul><li>冒泡排序；</li><li>在一个excel表格中写一行数字，然后用Python读入这行数字，并且输出出来；</li><li>将Python读入的这行excel数字使用冒泡排序进行排序，然后输出结果；</li><li>读入一张图片，然后将这张图片转变为灰度图像，并且分辨率调整为原来的一半，再保存到本地。</li></ul><p>在找代码、实现这些功能时候，请小仙女注意思考以下的问题：</p><ul><li>找到的代码能跑通吗？能读懂吗？出bug了怎么办？</li><li>代码用到了哪些包，哪些函数？这些函数的文档或使用说明在哪里可以找到，有哪些参数，分别做什么用？</li></ul><h2 id="奥卡姆剃刀原则与编程哲学"><a href="#奥卡姆剃刀原则与编程哲学" class="headerlink" title="奥卡姆剃刀原则与编程哲学"></a>奥卡姆剃刀原则与编程哲学</h2><p>奥卡姆剃刀是一个哲学命题，最初由14世纪英格兰、圣方济各会修士奥卡姆的威廉（William of Occam，约1285年至1349年）提出。他说：</p><blockquote><p>切勿浪费较多东西去做，用较少的东西，同样可以做好的事情。</p><p><em>Numquam ponenda est pluralitas sine necessitate.（</em>避重趋轻）</p><p><em>Pluralitas non est ponenda sine necessitate.（</em>避繁逐简）</p><p><em>Frustra fit per plura quod potest fieri per pauciora.（</em>以简御繁）</p><p><em>Entia non sunt multiplicanda praeter necessitatem.（</em>避虚就实）</p></blockquote><p>其核心思想是“如无必要，勿增实体”，“简单的就是最好的”。这一思想在哲学、管理学、语言学等领域都有应用。</p><p><img src="ockham.png" alt="奥卡姆剃刀原则"></p><p>在编程方面，结合我的经验，我们的编程哲学主要是：</p><ul><li>众所周知天下文章一大抄，天下代码也是一大抄，关键在于去哪里抄，抄什么，怎么为我所用；</li><li>从最简单的地方开始写和学；</li><li>永远用最简单快捷的方式实现我们想要的功能；</li><li>一边写，一边学，先写后学，在写中学；</li><li>积跬步以至千里，在最简单的核心模型上添枝加叶，最终实现我们想要的功能；</li><li>写代码从来都不是最困难的事情，困难的事情是算法，代码是服务人的，不是难为人的；</li><li>不要重复造轮子，一个功能不要反复去写，即如果业界已经有工人的软件或者库，你又知道自己很难比人家写的更好，那就不要自己再写一遍了，除非你是在学习轮子。</li></ul><p>比如我们想写一台车出来，要想的不是一下写一台车，而是先写一个盒子，再往上面加四个轮子，然后我们就可以说实现了一台玩具车了。</p><p>在玩具车的基础上加上动力模块，它就可以自己跑起来，再加上刹车系统转向系统，就不失为一辆车了。然后我们再考虑设计，内饰，照明等等其他东西，逐渐完善。</p><p>又比如我们想写一个网站，要想的也不是一下写一个网站出来，而是先写一个网页并且在本地浏览，然后在服务器部署成功，然后在这个网页上链接其他页面，这样就不失为一个网站了。然后我们再考虑页面设计。</p><p>当然如果我们从一开始就发现已经存在别人发布的网站模板，框架，那就不要犹豫，直接用别人的，在别人的基础上做改动，节省自己的时间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单的Python入门教学就完成啦，以后有别的内容我们再做补充。</p><p>最后希望小仙女能在学中用，在用中学，多动手，学的开心，用的开心，快乐科研，快乐生活，没有bug，没有烦恼！</p><p><img src="doit.jpg" alt="You can do it!"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象</title>
      <link href="/2021/09/04/python-mian-xiang-dui-xiang/"/>
      <url>/2021/09/04/python-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a>Python面向对象</h1><p>我们前面介绍的数据结构和运算都是<strong>面向过程</strong>的，而Python本身设计之初就是面向对象的编程语言，本节我们学习Python中的面向对象编程。</p><h2 id="面向过程VS面向对象"><a href="#面向过程VS面向对象" class="headerlink" title="面向过程VS面向对象"></a>面向过程VS面向对象</h2><p>面向过程是以事件为中心的编程思想，按照完成这件事需要的所有步骤，强调按部就班，一个函数一个函数、一个语句一个语句的顺序执行。</p><p>以下五子棋为例，一个下五子棋的面向过程程序大约需要以下步骤：</p><ol><li>开始游戏；</li><li>黑子先行，绘制黑子落子后的画面；</li><li>判断输赢情况，如果黑子赢了就跳到最后一步；</li><li>白子再行，绘制白子落子后的画面；</li><li>判断输赢情况，如果白子赢了就跳到最后一步；</li><li>返回第二步；</li><li>输出最后结果。</li></ol><p>而面向对象的五子棋程序会首先设计三种互相独立的对象：</p><ol><li>棋手，包括黑子和白子，负责接收用户的输入，并告知棋盘系统棋子布局的变化；</li><li>棋盘系统，负责接收棋手传递的用户落子情况，然后绘制画面，在屏幕显示；</li><li>游戏规则，负责根据棋盘情况判定输赢。</li></ol><p>看起来没有太大区别，只是对面向过程的内容做了一些封装，然而如果我们要写的代码是运行一个公司呢？每个行为方的行为规则和和属性可能都复杂到面向过程难以描述，描述了别人也难以快速看懂、快速修改和扩展。</p><p>面向对象的编程极大提高了代码的可扩展性和复用性，降低了维护难度，在写一些大型的工程时具有很明显的优势，二者对比如下表。</p><table><thead><tr><th align="center">面向过程</th><th align="center">面向对象</th></tr></thead><tbody><tr><td align="center">高耦合</td><td align="center">低耦合</td></tr><tr><td align="center">高效率，低开销，低可读性</td><td align="center">低效率，高开销，高可读性</td></tr><tr><td align="center">难维护，难扩展</td><td align="center">易维护，易扩展</td></tr></tbody></table><h2 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h2><p>面向对象技术中主要有以下几个概念：</p><ul><li><strong>类（Class）：</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法；</li><li><strong>对象（Object）：</strong>是类的实例；</li><li><strong>方法：</strong>类中定义的函数；</li><li><strong>实例变量：</strong>实例变量指的是在任意类方法内部，以“self.变量名”的方式定义的变量，其特点是只作用于调用方法的对象。另外，实例变量只能通过对象名访问，无法通过类名访问；</li><li><strong>类变量：</strong>类变量指的是在类中，但在各个类方法外定义的变量，所有类的实例化对象都同时共享类变量，可以通过类名或者对象名进行访问；</li><li><strong>保护：</strong>包括保护变量和保护方法。以单下划线开头，表示被保护的变量和方法只允许类及其子类使用，在使用中与普通变量没什么区别；</li><li><strong>私有：</strong>包括私有变量和私有方法。私有变量和私有方法只有类中定义的方法可以访问，子类不可以访问；</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象；</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。</li></ul><p>我们来定义一个简单的类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">:</span>    <span class="token comment"># id 是一个普通的类变量</span>    <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 单下划线开头的是保护变量，_protected1是受保护的类变量</span>    <span class="token comment"># 保护变量表示只允许类及其子类使用，然而在使用中与普通变量没什么区别</span>    _protected1 <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment"># 双下划线开头的是私有变量，__private1是私有的类变量</span>    <span class="token comment"># 私有变量只有类中定义的方法可以访问，子类不可以访问</span>    __private1 <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment"># __init__()是类的构造函数，实在一个类进行实例化的时候自动调用的函数，可以传入参数</span>    <span class="token comment"># 以双下划线开头且以双下划线结尾的函数在Python中表示特殊功能的函数，我们在写代码时尽量不要写这种形式的函数名</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> para1<span class="token punctuation">,</span> para2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># name gender 是实例变量</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> para1        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> para2        <span class="token comment"># _protected2是受保护的实例变量</span>        self<span class="token punctuation">.</span>_protected2 <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># __private2是私有的类变量</span>        self<span class="token punctuation">.</span>__private2 <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment"># 类中的一个方法，类中定义的方法的参数都必须包含self且以self开头</span>    <span class="token comment"># self表示的是实例化的对象</span>    <span class="token keyword">def</span> <span class="token function">prtname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment"># 类中的一个方法</span>    <span class="token keyword">def</span> <span class="token function">prtgender</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>    <span class="token comment"># 私有变量只有类中定义的方法可以访问1</span>    <span class="token keyword">def</span> <span class="token function">prtprivate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__private1<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__private2<span class="token punctuation">)</span><span class="token comment"># 实例化People类，得到一个对象x</span>x <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token string">"gs"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment"># 调用类变量可以通过对象和类</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>_protected1<span class="token punctuation">)</span><span class="token comment"># 下面注释掉的几句是错误的</span><span class="token comment"># print(People.__private1)</span><span class="token comment"># print(People.name)</span><span class="token comment"># print(People.gender)</span><span class="token comment"># print(People._protected2)</span><span class="token comment"># print(People.__private2)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_protected1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_protected2<span class="token punctuation">)</span><span class="token comment"># 下面注释掉的是错误的</span><span class="token comment"># print(x.__private1)</span><span class="token comment"># print(x.__private2)</span><span class="token comment"># Python并没有从语法上严格保证私有属性或方法的私密性</span><span class="token comment"># Python还提供了一种作弊的方法用于访问私有变量，Python寄希望于使用者自觉遵守规则并为自己的行为负责。</span><span class="token comment">#“We are all consenting adults here”</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_People__private1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_People__private2<span class="token punctuation">)</span><span class="token comment"># 调用类中的方法</span>x<span class="token punctuation">.</span>prtname<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>prtgender<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># private变量只有类中定义的方法可以调用</span>x<span class="token punctuation">.</span>prtprivate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的注释中基本写明了各种变量和函数的用法。下面我们学习继承的概念，帮助我们更好地理解类的用法。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>一个类可以继承另一个类，如类Student可以继承类People，此时Student称为子类，People称为父类。子类可以继承父类的普通变量与方法，以及保护变量与方法。</p><p>现在我们基于上一小节的代码继续往下写一个People类的子类Student，看看下面这段代码中，为什么有的调用正确，有的调用错误。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> para1<span class="token punctuation">,</span> para2<span class="token punctuation">,</span> para3<span class="token punctuation">)</span><span class="token punctuation">:</span>        People<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> para1<span class="token punctuation">,</span> para2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>school <span class="token operator">=</span> para3s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"gs"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>_protected1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>_protected2<span class="token punctuation">)</span>s<span class="token punctuation">.</span>prtnames<span class="token punctuation">.</span>_prtgender<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>prtprivate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 下面注释掉的几句是错误的</span><span class="token comment"># print(s.__private1)</span><span class="token comment"># print(s.__private2)</span><span class="token comment"># s.__privatefunc()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，一个类可以有很多个子类，子类还可以有子类，可以无限继承下去。</p><p>一个子类也可以有多个父类，在初始化时需要对各个父类都做初始化。</p><p>另外如果子类中定义了与父类相同名称的函数，在子类的一个实例对象调用该函数时，就会优先调用子类中的该函数，这就是“多态”。即，对于父类的方法，一个子类可以做无限修改，而不影响其他子类，也不影响依赖于该父类和该方法的其他函数。</p><p>以一张图结束本节课程吧，不知道小仙女有没有懂那么一丢丢呀<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="oopxxx.png" alt="面向对象"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的函数</title>
      <link href="/2021/09/02/python-zhong-de-han-shu/"/>
      <url>/2021/09/02/python-zhong-de-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中的函数"><a href="#Python中的函数" class="headerlink" title="Python中的函数"></a>Python中的函数</h1><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。</p><p>Python提供了许多内建函数，比如print()。我们可以自己创建函数，这就是自定义函数。学习自定义函数可以帮助我们更好地理解Python中的函数。</p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>我们可以这样定义一个函数：</p><ul><li>以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号**()**；</li><li>圆括号里面写上此自定义参数执行所需要的参数，圆括号结束后要跟冒号“**:**”；</li><li><strong>return [表达式]</strong> 结束函数，可以选择性地返回一个值给函数调用方，不带表达式的 return 相当于返回 None。</li></ul><p><img src="%E5%87%BD%E6%95%B0.png" alt="自定义函数"></p><h2 id="举一个栗子"><a href="#举一个栗子" class="headerlink" title="举一个栗子"></a>举一个栗子</h2><p>我们来建立一个自定义函数输出”Beautiful fairy, happy fairy!”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fairy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Beautiful fairy, happy fairy!"</span><span class="token punctuation">)</span>fairy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>怎么样，是不是很简单呀，小仙女<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="再举一个栗子"><a href="#再举一个栗子" class="headerlink" title="再举一个栗子"></a>再举一个栗子</h2><p>我们来自定义一个具有参数的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b a <span class="token operator">=</span> <span class="token number">4</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于我们自定义的一个比较大小的函数啦。</p><h2 id="可变对象与不可变对象"><a href="#可变对象与不可变对象" class="headerlink" title="可变对象与不可变对象"></a>可变对象与不可变对象</h2><p>在Python中，字符串，数字，元组等是不可变对象，而列表，字典等是可变对象：</p><ul><li>不可变对象在重新赋值时，如变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，实际是新生成一个 int 类型的对象 10，再让 a 指向它，而 5 被丢弃，而非改变 a 的值；</li><li>可变对象在重新赋值时，如变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将la的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><p>因此在函数调用中传递参数时：</p><ul><li>如果传递了不可变对象，则函数中对该对象做的修改，不会影响原对象；</li><li>如果传递了可变对象，则函数中对该对象的修改，会影响原对象。</li></ul><p>看下面这个例子就明白啦：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">changenum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">changelist</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>a <span class="token operator">=</span> <span class="token number">1</span>changenum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>changelist<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指定关键字的函数调用"><a href="#指定关键字的函数调用" class="headerlink" title="指定关键字的函数调用"></a>指定关键字的函数调用</h2><p>上文中我们写的函数都没有指定关键字，对参数的调用也是按顺序输入并调用的。现在我们来看这样的一个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> printinfo<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"little fairy"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的输出结果应该为：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">姓名:  little fairy年龄:  18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个例子告诉我们，可以借用函数中的关键字，确定把调用时的参数传递给函数里的哪个变量，制定了关键字就不用严格按照调用顺序。</p><h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><p>缺省参数指的是函数定义时所设置的默认参数值，如果调用时不传入对应值，就会使用默认参数。来看例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> printinfo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"little fairy"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们定义的printinfo()函数中的age参数就设置了缺省值18，即使调用时不输入age参数，也可以使用缺省值。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Python中有一种特殊的函数即匿名函数，它的定义形式非常简单：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>冒号前面是函数参数，后面是函数返回值。我们来看一个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mysum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为: "</span><span class="token punctuation">,</span> mysum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为: "</span><span class="token punctuation">,</span> mysum<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是一种匿名函数使用方式，还有另一种更常见的使用方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关于函数我们就介绍这么多啦，后面我们看情况再学习吧。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱（罗伊·克里夫特）</title>
      <link href="/2021/09/01/ai-luo-yi-ke-li-fu-te/"/>
      <url>/2021/09/01/ai-luo-yi-ke-li-fu-te/</url>
      
        <content type="html"><![CDATA[<h1 id="爱（罗伊·克里夫特）"><a href="#爱（罗伊·克里夫特）" class="headerlink" title="爱（罗伊·克里夫特）"></a>爱（罗伊·克里夫特）</h1><p>《爱》是是诗人罗伊·克里夫特的一首诗。罗伊在1979年自费出版了一本28页的诗集，其中最有名的诗就是《爱》。</p><p>2016年5月22日，腾讯视频播出<a href="https://v.qq.com/x/page/w030150d9hg.html">“蝴蝶为你朗读第487期：爱 罗伊克里夫特作品”。</a></p><h2 id="Love"><a href="#Love" class="headerlink" title="Love"></a>Love</h2><p><strong>by Roy Croft</strong></p><p>I love you,<br>Not only for what you are,<br>But for what I am<br>When I am with you.</p><p>I love you,<br>Not only for what<br>You have made of yourself,<br>But for what<br>You are making of me.<br>I love you<br>For the part of me<br>That you bring out;<br>I love you<br>For putting your hand<br>Into my heaped-up heart<br>And passing over<br>All the foolish, weak things<br>That you can’t help<br>Dimly seeing there,<br>And for drawing out<br>Into the light<br>All the beautiful belongings<br>That no one else had looked<br>Quite far enough to find.<br>I love you because you<br>Are helping me to make<br>Of the lumber of my life<br>Not a tavern<br>But a temple;<br>Out of the works<br>Of my every day<br>Not a reproach<br>But a song.</p><p>I love you<br>Because you have done<br>More than any creed<br>Could have done<br>To make me good<br>And more than any fate<br>Could have done<br>To make me happy.<br>You have done it<br>Without a touch,<br>Without a word,<br>Without a sign.<br>You have done it<br>By being yourself.<br>Perhaps that is what<br>Being a friend means,<br>After all.</p><h2 id="爱"><a href="#爱" class="headerlink" title="爱"></a>爱</h2><p><strong>罗伊·克里夫特</strong></p><p>我爱你，<br>不光因为你的样子，<br>还因为，<br>和你在一起时，<br>我的样子。<br>我爱你，<br>不光因为你为我而做的事，<br>还因为，<br>为了你，<br>我能做成的事。</p><p>我爱你，<br>因为你能唤出，<br>我最真的那部分。<br>我爱你，<br>因为你穿越我心灵的旷野，<br>如同阳光穿透水晶般容易。<br>我的傻气，<br>我的弱点，<br>在你的目光里几乎不存在，<br>而我心里最美丽的地方，<br>却被你的光芒照的通亮。<br>别人都不曾费心走那么远，<br>别人都觉得寻找太麻烦，<br>所以没人发现过我的美丽，<br>所以没人到过这里。<br>我爱你，<br>因为你将我的生活化腐朽为神奇。<br>因为有你，<br>我的生命，<br>不再是平凡的旅店，<br>而成为了恢弘的庙宇，<br>我日复一日的工作里，<br>不再充满抱怨，<br>而是美妙的旋律。</p><p>我爱你，<br>因为你比信念更能使我的生活变得无比美好，<br>因为你比命运更能使我的生活变得充满欢乐。<br>而你做出这一切的一切，<br>不费一丝力气，<br>一句言辞，<br>一个暗示，<br>你做出这一切的一切，<br>只是因为你就是你，<br>毕竟，<br>这也许就是爱的含义。</p><p><img src="%E7%88%B1.jpg" alt="爱 罗伊·克里夫特"></p>]]></content>
      
      
      <categories>
          
          <category> 悦读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹧鸪天·别后盼相逢</title>
      <link href="/2021/08/31/zhe-gu-tian-bie-hou-pan-xiang-feng/"/>
      <url>/2021/08/31/zhe-gu-tian-bie-hou-pan-xiang-feng/</url>
      
        <content type="html"><![CDATA[<h1 id="鹧鸪天·别后盼相逢"><a href="#鹧鸪天·别后盼相逢" class="headerlink" title="鹧鸪天·别后盼相逢"></a>鹧鸪天·别后盼相逢</h1><p>芊芊玉臂白素手，明眸皓齿樱桃口。微微细雨金陵月，斑斑树影夏夜风。<br>从别后，盼相逢，几回魂梦与君同。何当共赏秦淮水，风月皎洁似梦中。</p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咏芙蓉仙子</title>
      <link href="/2021/08/31/yong-fu-rong-xian-zi/"/>
      <url>/2021/08/31/yong-fu-rong-xian-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="咏芙蓉仙子"><a href="#咏芙蓉仙子" class="headerlink" title="咏芙蓉仙子"></a>咏芙蓉仙子</h1><p>皓齿明眸荷花面，飘然出水芙蓉仙。</p><p>天庭今日偶得暇，偏着素衣游人间。</p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回忆南京初见</title>
      <link href="/2021/08/28/hui-yi-nan-jing-chu-jian/"/>
      <url>/2021/08/28/hui-yi-nan-jing-chu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="回忆南京初见"><a href="#回忆南京初见" class="headerlink" title="回忆南京初见"></a>回忆南京初见</h1><p>那已经是一个多月前的7月17日和18日的事情了，现在回忆起来依然历历在目。从前期规划到见面到一起逛吃玩耍到返回上海，从忽雨忽晴的天气到既紧张又欣喜的心情，一切都是如此鲜活生动，我想人世间最美好的感觉就是如此了吧，充满期待，充满真诚，充满心跳。就把这些美好的回忆记录下来，珍藏起来吧，愿我们永怀那份感动，永远记得那时的心跳。</p><p>大约是7月上旬，我们定下了见面的时间。然后我下决心要做一个完美的旅行计划，给咪最好的体验和印象，也做了非常充分的准备，从衣服，发型，到手表，背包，换了又换，试了又试，最终确定。要说做的最细心认真的就是这份旅行计划了，从查看经典，到画图，到安排行程写计划，我甚至还考虑了吃饭的时候该怎么做，见面讲什么笑话，玩什么游戏。把当时做的计划放在下一部分吧，太有纪念意义啦。</p><h2 id="南京二日出行计划"><a href="#南京二日出行计划" class="headerlink" title="南京二日出行计划"></a>南京二日出行计划</h2><h3 id="总体行程"><a href="#总体行程" class="headerlink" title="总体行程"></a>总体行程</h3><p>7月17日主要路线为，从学校出发——<strong>总统府</strong>——<strong>南京博物院</strong>——<strong>大报恩寺-老门东</strong>——返回学校；</p><p>7月18日主要路线为，从学校出发——<strong>密室</strong>——返回学校。</p><p>安排的比较紧比较满，为的是有备无患，但玩的时候还是看心情，不用刻意按照时间表走。</p><p>玩到哪里就吃到哪里，玩到哪里就歇到哪里！开心就完事了！</p><p>完整安排见如下，<span style="color:gray;">浅色字</span>表示可以根据届时实际情况灵活选择去或者不去的地方，<strong>加粗字</strong>表示主要游览的景点；</p><p>一切游玩、出行、换乘、时间安排以舒服便利为目的，灵活选择，不用刻意按照计划来。</p><h4 id="7月17日"><a href="#7月17日" class="headerlink" title="7月17日"></a>7月17日</h4><ul><li><p>上午：郭郭出发，从上海到南京</p><ul><li><span class="github-emoji"><span>🚆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>高铁G104：上海虹桥-南京南，<span class="github-emoji"><span>🕖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>07:13-08:35</li><li><span class="github-emoji"><span>🏨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>宾馆踩点：广州路校门对面，君临国际珠江路地铁站店（君临国际A栋1520室）；</li></ul></li><li><p>中午：<strong>总统府</strong></p><ul><li><span class="github-emoji"><span>🕥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f565.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>10:30，郭郭到达鼓楼校区，和咪咪一起，乘坐地铁1号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>珠江路到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>新街口，转2号线到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>大行宫（5号出口）​，到达总统府；</li><li><span class="github-emoji"><span>🕚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>11:00-12:00，<span class="github-emoji"><span>🍝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>南京大排档（1912总统府店）就餐；<ul><li>推荐菜：金陵烤鸭，鸭血粉丝锅，酒酿赤豆元宵，民国美龄粥</li></ul></li><li><span class="github-emoji"><span>🕛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>12:00-13:00，游览总统府；</li></ul></li><li><p>下午：<strong>南京博物院，大报恩寺</strong></p><ul><li><span class="github-emoji"><span>🕐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f550.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>13:00-14:00，乘坐地铁2号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>大行宫到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>明故宫（1号出口），​到达南京博物院；</li><li><span class="github-emoji"><span>🕑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f551.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>14:00-15:30，游览南京博物院；</li><li><span class="github-emoji"><span>🕒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>15:30-16:30，乘坐地铁2号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>明故宫到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>新街口，转1号线到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>中华门（2号出口）​，步行/骑车到达大报恩寺；</li><li><span class="github-emoji"><span>🕓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f553.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>16:30-17:30，游览大报恩寺；</li></ul></li><li><p>晚上：<strong>老门东</strong></p><ul><li><span class="github-emoji"><span>🕔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>17:30-19:30，步行/骑车到达老门东，<span class="github-emoji"><span>🍝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>大巴山火锅（老门东店）就餐，然后游览；</li><li><span style="color:gray;"><span class="github-emoji"><span>🕖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>19:30-20:30，骑车/​打车前往熙南里，游览熙南里；</span></li><li><span style="color:gray;"><span class="github-emoji"><span>🕗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>20:30-21:30，游览1912街区；</span><ul><li><span style="color:gray;">老门东出发：乘坐地铁3号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>武定门到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>大行宫（5号出口），到达1912街区；</span></li><li><span style="color:gray;">熙南里出发：乘坐地铁1号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>三山街到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>新街口，转2号线​到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>大行宫（5号出口），到达1912街区；</span></li></ul></li><li><span class="github-emoji"><span>🕘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f558.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>送咪咪返回学校，郭郭回住处。<ul><li><span style="color:gray;">熙南里返程：乘坐地铁1号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>三山街到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>珠江路（1号出口）；</span></li><li><span style="color:gray;">1912街区或老门东返程： 打车。</span></li></ul></li></ul></li></ul><p>17日周六当天要游玩的主要景点分布，和总体线路如下：</p><p><img src="%E6%80%BB%E4%BD%93%E7%BA%BF%E8%B7%AF.png" alt="7月17日总体游玩线路"></p><h4 id="7月18日"><a href="#7月18日" class="headerlink" title="7月18日"></a>7月18日</h4><ul><li>上午：看望妈妈；</li><li>中午：带妈妈在附近吃吃逛逛；</li><li>下午：<strong>密室</strong><ul><li><span class="github-emoji"><span>🕒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>15:00-15:30，与咪咪一起，乘坐地铁1号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>珠江路到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>新街口（1号出口），到达<span class="github-emoji"><span>🏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>龙门EXIT剧情精品密室（新街口3店）；</li><li><span class="github-emoji"><span>🕒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>15:40-16:40，热门主题密室“<em>夜访卢浮宫</em>”；</li><li><span class="github-emoji"><span>🕔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>17:00-18:00，<span class="github-emoji"><span>🍝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>猫抓烤肉（新百店）就餐；<ul><li>推荐菜：洋葱牛小粒，猫抓焦糖布丁，玫瑰牛舌，丹麦猪五花</li></ul></li></ul></li><li>晚上：告别<ul><li><span class="github-emoji"><span>🕕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f555.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>18:00-18:30，送咪咪返回学校，乘坐地铁1号线<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>新街口到<span class="github-emoji"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>珠江路（1号出口），告别；</li><li><span class="github-emoji"><span>🚆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>高铁G1935，南京南-上海虹桥，<span class="github-emoji"><span>🕗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>20:20-21:23</li></ul></li></ul><h3 id="主要景点游前功课预习、逛吃打卡与购票"><a href="#主要景点游前功课预习、逛吃打卡与购票" class="headerlink" title="主要景点游前功课预习、逛吃打卡与购票"></a>主要景点游前功课预习、逛吃打卡与购票</h3><h4 id="总统府"><a href="#总统府" class="headerlink" title="总统府"></a>总统府</h4><p>即南京中国近代史遗址博物馆，明初归德侯府和汉王府，清江宁织造署、江南总督署、两江总督署，康熙乾隆下江南时的行宫，太平天国天王府，中华民国临时政府所在地，南京国民政府所在地，这里有超过600年的历史，更见证了近代中国诸多变迁。</p><h5 id="主要景观"><a href="#主要景观" class="headerlink" title="主要景观"></a>主要景观</h5><ul><li>总统府门楼：非常具有标志性的南京建筑，经典打卡地，是中国近代史的重要遗址，是拥有百年历史的民国标志性建筑；</li><li>两江总督史料展：清朝两江包括江南省（今江苏、安徽及上海地区）和江西省，以史料和实物展示、场景复原的手法，叙述了清代官衙的演变；</li><li>洪秀全与天朝宫殿历史文物陈列：以天王宝座、书房、后宫、机密房等模拟景观，再现了天朝宫殿的昔日辉煌。</li><li>1912街区：总统府外围，以民国文化为建筑特点的商业街区，是由19幢民国风格建筑及共和、博爱、新世纪、太平洋4个街心广场组成的时尚商业休闲街区；<ul><li>晚上可以来这条街找个清吧坐坐，休息休息，听听音乐</li></ul></li></ul><h5 id="景点导游"><a href="#景点导游" class="headerlink" title="景点导游"></a>景点导游</h5><p>按下图中箭头路线走一遍就很好啦。</p><p><img src="%E6%80%BB%E7%BB%9F%E5%BA%9C.png" alt="总统府导游图"></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><span class="github-emoji"><span>🎟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f39f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>预约订票：关注公众号“南京总统府”，进行购票，只可预约至次日，购票需要身份证号；</li><li>营业时间：08:30-17:00. </li></ul><h4 id="南京博物院"><a href="#南京博物院" class="headerlink" title="南京博物院"></a>南京博物院</h4><p>中国三大博物馆之一（另外两个是北京故宫和台北故宫博物院），含一院六馆，博物院大殿是仿辽代宫殿格式，是我国第一座由国家投资兴建的大型综合类博物馆，前身是蔡元培倡建的国立中央博物院。有43万件藏品，大陆仅次于故宫。</p><h5 id="镇馆之宝"><a href="#镇馆之宝" class="headerlink" title="镇馆之宝"></a>镇馆之宝</h5><ul><li>金兽：盱眙县出土的西汉金兽，重达9100克，是我国出土文物中最大最重的金器，国之瑰宝；</li><li>银缕玉衣：是仅次于金缕玉衣的高规格丧葬殓服，我国目前仅发现的一件；</li><li>《杂花卷图》：明代杰出书画家、号称“天下第一徐青藤”的徐渭的作品，长十余米，笔法酣畅淋漓，把牡丹、石榴等花卉蔬果表现得淋漓尽致；</li><li>青花寿山福海纹瓷炉：明代宣德御窑瓷器的巅峰之作，同类瓷器中唯一品相完好之大器，完整的宣德青花寿山福海纹炉仅存一、二件，是无价之宝；</li><li>利玛窦《坤舆万国全图》：历史书中的常客，国内现存最早的、第一幅出现美洲的世界地图，由明代太仆寺少卿李之藻与传教士利玛窦共同完成；</li><li>《竹林七贤与荣启期》砖画：20世纪中国百项考古大发现之一，我国考古发现的最早且品相最为完好的大型人物画像砖实物，完美展现魏晋风流；</li><li>······</li></ul><h5 id="景点导游-1"><a href="#景点导游-1" class="headerlink" title="景点导游"></a>景点导游</h5><p>主体建筑三栋，展馆六个。艺术馆、非遗馆（地下）、民国馆（地下）在一栋，特展馆、数字馆（地下）在一栋，历史馆在一栋。按顺序依次游览即可。</p><p><img src="%E5%8D%97%E5%8D%9A.jpeg" alt="南博导游图"></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><span class="github-emoji"><span>🎟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f39f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>预约订票：<a href="http://www.njmuseum.com/zh/visitIndex">官网预约</a>或使用南京博物院微信小程序预约，可提前半个月预约，预约需要身份证号，建议预约7月17日下午场；</li><li>营业时间：09:00-17:00，16:00停止检票；</li><li>入馆须持身份证，可以携带一副耳机，以备可能的扫码听电子讲解之需。</li></ul><h4 id="大报恩寺-老门东-熙南里"><a href="#大报恩寺-老门东-熙南里" class="headerlink" title="大报恩寺-老门东-熙南里"></a>大报恩寺-老门东-熙南里</h4><p>三者都是夫子庙-秦淮河附近的景点，其中老门东挨着大报恩寺，在夫子庙南侧，熙南里距离稍远一点，在夫子庙西北侧。</p><h5 id="主要景观-1"><a href="#主要景观-1" class="headerlink" title="主要景观"></a>主要景观</h5><ul><li><p>大报恩寺：中国历史最为悠久的佛教寺庙之一，现为遗址公园，有大报恩塔、琉璃塔、和几个大殿，曾出土世界唯一一枚佛顶真骨；</p></li><li><p>老门东：街头雕塑，石雕牌坊，还有豆花荘、沈记臭豆腐、树咖啡、蒋有记锅贴、鸡鸣汤包、黄勤记凉粉等小吃；</p></li><li><p>熙南里：即甘熙故居以南区域，是南京现有的保存最完整的私人民宅。这里还有金陵十八坊，还能看到抖空竹、南京绒花等南京传统的手工艺和表演。</p></li></ul><h5 id="景点导游-2"><a href="#景点导游-2" class="headerlink" title="景点导游"></a>景点导游</h5><p>可以先去大报恩寺和老门东，然后看如果时间允许就在熙南里和1912街区里选择一个或两个都去玩一下。</p><p>大报恩寺、老门东、熙南里位置关系如下，1912街区在总统府附近，见7月17日总体游玩线路图。</p><p><img src="%E5%A4%AB%E5%AD%90%E5%BA%99%E5%91%A8%E8%BE%B9.png" alt="夫子庙周边"></p><p>老门东和熙南里是街区，就不单独放图了，放一张大报恩寺的图。</p><p><img src="%E5%A4%A7%E6%8A%A5%E6%81%A9%E5%AF%BA.png" alt="大报恩寺导游图"></p><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><span class="github-emoji"><span>🎟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f39f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>大报恩寺订票：关注公众号“大报恩寺遗址景区”，进行购票，购票需身份证号，建议购买7月17日15:00-18:00场；</li><li>大报恩寺营业时间：08:30-18:00.</li></ul><h4 id="主题密室“夜访卢浮宫”"><a href="#主题密室“夜访卢浮宫”" class="headerlink" title="主题密室“夜访卢浮宫”"></a>主题密室“<em>夜访卢浮宫</em>”</h4><h5 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h5><p>第二次鸦片战争期间，英法联军火烧圆明园，致使大批珍贵文物流落海外，其中有一尊十二生肖兽首被收藏在法国的卢浮宫博物馆。为了惩戒侵略者、挽救国宝，神秘民间组织雇佣了一批身经百战的神偷，准备在夜间潜入卢浮宫把国宝盗回，同时还安排了卢浮宫的一名安保人员作为内应。作为神偷，玩家们的目标只有一个，那就是避开重重机关陷阱，按照内应提供的线索提示盗取国宝。</p><h5 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h5><ul><li>2020年、2019年畅销主题，秦淮区非恐密室人气第1名，累计预定15000逾人次；</li><li>非恐/高玩/悬疑/科幻，无换装无真人NPC；</li><li>难度系数5星级，时长60分钟。</li></ul><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>无任何恐怖元素，纯解谜，不用担心啦，以后看情况再说去不去玩微恐、恐怖、真人NPC密室吧；</li><li>已预定，2人起玩，最多8人，因此可能会有陌生人拼场，这个我们无法控制了。</li></ul><h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p>携带好身份证、学生证、手机、健康码（苏康码）等必备物品，雨伞、手纸、耳机等便利物品；</p><p>前一天和后一天都要早点睡，休息好，全程注意安全；</p><p>三个景点的门票预约和购买都需要身份证号，郭郭无法代劳了；</p><p><span class="github-emoji"><span>🎧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>准备一个最好听的歌单，分享耳机，实现真正意义的一起听；</p><p><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>准备一个最好笑的冷笑话，当面将给咪咪听；</p><p><span class="github-emoji"><span>📔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>准备一些相关历史掌故，在景点一一道来，假装自己真的啥都懂；​</p><p><span class="github-emoji"><span>💝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>准备一个最贴心的小礼物，在出现预料之外的情况、或者安排不周时拿出来讨饶，希望咪咪不要打我；</p><p><span class="github-emoji"><span>🎲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>准备一个最简单最好玩的小游戏，在地铁上一起玩；​</p><p>······</p><h2 id="7月17日-南京行第一天"><a href="#7月17日-南京行第一天" class="headerlink" title="7月17日 南京行第一天"></a>7月17日 南京行第一天</h2><h3 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h3><p>本来计划是要去鸡鸣寺和玄武湖的，咪说鸡鸣寺去了必倒霉，玄武湖已经去过太多次了，然后我想想就算啦。临行前几天把最后的计划发给咪，咪挺开心的。16日一大早我特意去北1门问了门卫四五点开不开门，门卫说让我去凯旋门，那边24小时开门，ok，get。在实验室再次整理行李，检查最近的工作疏漏，想未来几天可能会做什么，还有什么需要现在安排上的，把电脑跑上了一个一周都跑不完的代码。跟花店老板反复协商，该买什么见面礼物比较好，我本以为花店老板见多识广能给点靠谱建议，没想到他只想赚钱，失望。本来想买束花来着，考虑再三我没买大束花，预定了零食束，让老板17日9点送到珠江路地铁站。晚上11点多我早早回了寝室，洗澡换衣服，虽然准备了很久，还是试了又试，生怕不合适，大半夜穿戴整齐来来回回到一楼大厅去照镜子。晚上太兴奋导致直接失眠，满心里想的都是第二天见面的场景，辗转反侧就是睡不着。</p><p>17日一大早四点半闹钟一响，我立刻从床上跳了起来，再次洗澡，考虑到旅途劳顿，特意穿上比较旧的衣服，打算到了宾馆再换衣服。背好大包小包，骑上自行车直奔紫竹高新地铁站，一路上晨光熹微，到地铁站大概五点10分，上海天亮的真早啊，我到站的时候站门开没开，等了一会儿才有工作人员来开门，我应该是当天第一个进站的乘客吧，哈哈。下图是当时在紫竹高新地铁站外面拍的。</p><p><img src="%E6%99%A8%E8%B5%B7.jpg" alt="晨起动征铎"></p><p>去虹桥火车站需要在娄山关路换乘2号线，娄山关换乘是真费劲，要出站再进站，走十几分钟的路。在大马路上赶路的心情，和在地铁站里换乘赶路是不一样的，总感觉多了一倍的焦虑。来往行人匆匆，而我心里只想着那个我喜欢的姑娘。到火车站已经是快7点了，进站没多久就上车，车上人稀稀拉拉，我前后好几排都没人，于是定了个8点的闹钟，正好窝在座位上睡一会儿。然而我睡了十几分钟就再也睡不着了，看着窗外的山啊水啊村庄城市，心里想把早已计划好的行程又想了一遍，又在想还有什么细节没注意到，然而在忐忑之下已经有点心不在焉了。我寻思还是想想见面说什么吧，需要先从花店老板那里收了零食束，然后去见面。由于行程安排太紧，咪又表示想带我逛校园，我觉得要么就逛校园+南大吃饭+总统府，要么直接去总统府+吃饭，逛校园往后排，其他的到时候再说，这个需要见面问咪的想法了，如果咪不说那就直奔总统府吧。嗯我觉得差不多就这样。</p><p>火车到镇江的时候我看见外面雨下大了，路上行人都撑着伞，车辆都开着雨刮器，看眼预报说是大雨，我有点慌，不知道这雨要下多久，立刻萌生了退票想法。然后我就查了下大报恩寺怎么退票，嗯好像还需要下载个驴妈妈，高铁上上WIFI也不好，流量信号也不好，没办法，到南京再说吧。咪一路上都挺关心我的，问我到哪里了，说我到了跟她说一声，要不要去地铁站接我，我说不用我还要去宾馆放东西，顺便看看能不能入住呢。</p><h3 id="见面"><a href="#见面" class="headerlink" title="见面"></a>见面</h3><p>到了南京那雨下的叫一个大哟。我心里盘算着要不然就算了吧，找个地方聊聊天也挺好的，等雨停了再说。上了地铁立刻就开始下载驴妈妈，看怎么退票。有一说一，这地铁有点旧，跟上海那几个老线路的地铁差不多。火车站到南大还不太远，没几站就到了，我甚至还没搞清楚怎么退票。</p><p>出了珠江路地铁站，雨还是下的很大，丝毫没有停的迹象。出站口有好几个阿姨在卖雨伞。我跟咪说我先去宾馆一趟，好了来找你，然后给花店老板打了电话，他说快来了。来了之后我一看那零食束叫一个大，我一个人抱着都费劲，老板说你送到哪里我带你一程吧，太重了。我寻思着先去宾馆吧，就上车指路去宾馆。我望着车水马龙大雨倾盆，心里忐忑不安，美团地图多少有点问题，害得我和司机走过了都不知道，掉过头来才算找到。我抱着死沉的零食束，去找宾馆，怕零食束淋湿了，我把伞搭在上面。</p><p><img src="%E9%9B%B6%E9%A3%9F%E6%9D%9F.jpg" alt="零食束"></p><p>宾馆位置选的真好，正好就在广州路校门对面。考虑到这东西实在太沉太显眼，仍然无可避免地会给咪很大压力，我决定也先放到宾馆吧。上了楼，宾馆前台实在窄小得不堪入目。我委托阿姨帮我把零食束放到空调房，然后自己在储物室换了衣服，擦了擦雨水，望着广州路校门，忐忑，不安，期待，越是准备充分越是不安紧张。也由不得忐忑了，我奔校门而去，告诉咪我来了。</p><p>我站在校门口打着伞望着广州路校门口人来人往，心中五味杂陈。在雨中我忽然看见一个坚定优雅，一身浅色着装的身影向我走来，我知道那就是她了，她是那样自信从容，闪烁着迷人的双眼向我走来，在离我两步远的地方停下，我挥手致意说嗨，她也说嗨，一切不安瞬间化为欣喜和淡然，紧张感烟消云散。在雨中我们各自撑着伞，跨越时间和空间，我竟感觉有点相见恨晚，并且在那一瞬间我确信这就是我要找，要守护的那个人了，她比我之前在微信里认识的还优秀的多。</p><p>我说怎么样，我们去哪里，在学校转转吃吃饭等雨停，还是直接按计划去总统府。咪说雨下的不大了，我们出去玩吧。嗨，你就说巧不巧吧，真实天公作美，这雨还真就小了很多。然后我们从珠江路地铁站上车，前往总统府。我打开地图查看线路，完全进入了状态。</p><h3 id="总统府-1"><a href="#总统府-1" class="headerlink" title="总统府"></a>总统府</h3><p>我们出了地铁，我毫不费力地就找到了线路。马路边是江宁织造博物馆，过了马路我们看到了好长好长的一个长队，咪说这不会就是总统府排队的人吧，我说不会吧，这人也太多了吧。然后我们往前走了一段发现还真是排队的队伍，于是走回到队尾排着，一会儿的功夫有比刚才长了一些。队伍行进的很慢，我们聊呀聊，从梧桐树聊到南京城建，从南京的各种园到我们去过的城市，从比拼视力开玩笑到行人小孩，从总统府大门的廊柱样式到《七律·人民解放军占领南京》，再到围观不守规矩插队的游客，好开心呀，感觉我们总有聊不完的话题呢。</p><p><img src="%E6%80%BB%E7%BB%9F%E5%BA%9C%E5%A4%A7%E9%97%A8.jpg" alt="总统府大门"></p><p>进了总统府，是各种展览室，上面挂着各种油画和展板，从两江总督到太平天国，从中华民国临时政府到南京解放，说实话没什么好看的，有点像党建室。于是我们扭头去看了总统府的园林。园林是真不错呢，碧波荡漾，曲径通幽，水榭楼台，雕梁画栋，石狮假山，石坊画船，在这阴雨蒙蒙的天色之下更显得珊珊可爱，然而风景再美也不及咪在我心中的美，她嫣然的一笑足以令满园风景黯然失色。</p><p><img src="%E6%80%BB%E7%BB%9F%E5%BA%9C%E7%9A%84%E5%81%87%E5%B1%B1.jpg" alt="总统府的假山"></p><p><img src="%E6%80%BB%E7%BB%9F%E5%BA%9C%E7%9A%84%E6%B9%96%E6%B0%B4.jpg" alt="总统府的湖水"></p><p>咪是真的有点路痴，扭个头就分不清自己从哪个方向来的了，我差点就笑了，哈哈。和咪一路聊一路看，我感觉咪最喜欢的就是这里的园林了，下次有机会要带咪去看江南最好的园林。我穿的有点厚，一路上一直出汗。咪一直要给我拍照片，在湖边，在竹林旁，拍了也不让我看，哼，小仙女就是这么调戏小猪猪的呢。</p><p>总统府的办公楼朴实无华，实在没什么特色，我感觉都比不上以前在沈阳大帅府看到的。</p><p><img src="%E6%B0%B4%E6%B1%A0.jpg" alt="总统府办公楼前的水池"></p><p>参观完办公楼，逐渐往出口方向走，看了几个太平天国的展室，门口的水缸外壁画的是八仙过海，我还见到了我的老乡吕洞宾同志。咪对一个石雕很感兴趣，说可能是龙生九子之一，我说这个太丑啦，我感觉不是。</p><p>然后我们去1911街区吃饭，南京大排档人满为患，于是我们去了旁边的金陵十二菜，依然要排队。聊吃聊喝，很开心，我想提前点餐也不行，让服务员帮忙倒杯水也是只有热水，真费劲呐，水快来的时候已经有我们的空位了。我们排到了一个靠窗位置，还不错，窗外有一大片爬山虎，我讲起了大工山上礼堂的爬山虎，咪讲起了北大楼的爬山虎。我按照计划迅速点餐，倒水，要餐巾纸，把桌子挪到正对窗的位置。菜菜还不错，营养好吃。本来打算借着上厕所的功夫把账结了，没想到服务员太不上道儿一直大声嚷嚷，咪先下手为强，直接先结了，我好无奈。回到座位上我说咪你就不怕有的时候店家不可以手机结账嘛，咪说不会的怎么会呐。我？？？好吧，人算不如天算呐，没想到和咪的第一顿饭竟然是她请我吃的<span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="大报恩寺"><a href="#大报恩寺" class="headerlink" title="大报恩寺"></a>大报恩寺</h3><p>由于我们已经取消了南京博物院的行程，这个时候也已经三点多了，于是直奔大报恩寺而去。我们小仙女吸引了好多蚊子，到这时为止已经被要了好几个包了。下了地铁我带路，我感觉没走多远，但是路上的景观已经跟闵行比较相似了，南京城区也不大的样子，报恩寺在比较偏郊区了。我们走啊走，路上还吃了巧乐兹，咪真的喜欢吃冰淇淋呢。我注意到，咪喜欢走马路上面，即使有点积水。一路上咪都挺开心的，笑容满面，我的心都化了，唉，太喜欢这个姑娘啦。</p><p>大报恩寺占地面积挺大的，我们进门先看见了两个阁楼，我说这是暮鼓晨钟，走进了一看打脸了，原来是两尊硕大无比的碑。咪问我是龙生九子的哪一子，我也说不上来，咪就拿起手机百度了起来，原来是霸下。说实话我很喜欢咪这一点，和我很相似，对知识充满好奇和敏感。</p><p>报恩寺内部大厅是一些遗址陈迹，两边长廊有很多摆设，佛教画像、雕塑、工艺品之类的，有的是出售，有的是展览。菩萨天王画像被我一顿diss，说画的一点都不好，咪一脸鄙夷地看着我，哈哈哈哈。</p><p><img src="%E5%A4%A7%E6%8A%A5%E6%81%A9%E5%A1%94.jpg" alt="大报恩塔"></p><p>随后我们登上了大报恩塔，塔设计极其特别，每一层都有玻璃外壳包裹，看起来不仅毫不宝相庄严，反而还有点现代。电梯很窄小，要排队。塔顶层能看到各种帝王、佛祖浮雕，向外看是是无限风光，远处群山掩映，近处绿树葱葱，我们绕着塔顶转了一圈，还看到了共享望远镜，挺新鲜的，第一次见到呢。塔顶的围栏做的不错，很结实，不会有恐高感。我和咪有说有笑，猜着浮雕画的是哪个朝代哪个任务，看着远处山水，心情非常舒畅。下来的电梯里面，我想起了咪已经被蚊子咬了很多口了，看见一个人在用风油精，就问人家借，咪一直说不用不用。感觉自己真傻，为啥要说</p><p><img src="%E5%A1%94%E9%A1%B6.jpg" alt="大报恩塔塔顶远眺"></p><p>从塔顶下来的时候我们去了地宫看舍利子。地宫有一个穹顶的设计，周围四壁有很多小佛像，地宫中心摆放着很大的玻璃支架，众星捧月般拱卫中心的佛龛。咪和我绕着玻璃支架走了一圈，问我舍利子在哪里，我说应该在佛龛下层的小罐子里吧。在功德箱前面我问咪要不要拜一下，咪说没带零钱，我说我有呀，可惜只带了20块钱纸币，问咪要不要拜，咪说不要，然后我就拜了一下。咪说我应该先拜再投纸币进功德箱的，哇原来是这样呀，下次一定<span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>下次也要多带纸币了。我还买了一块许愿牌，咪也不要，就在一边看着。然后我想了半天要写啥，还拦着不想让咪看，哈哈，想半天写了“身体健康，早日毕业，不忘初心，不负有情”，挂了起来。</p><p><img src="%E8%88%8D%E5%88%A9%E5%AD%90.jpg" alt="地宫与舍利子"></p><p>然后我们又回到了长廊，坐在椅子上闲聊，咪拿着我的手给我看手相，说的头头是道哇，还拿走了小猪猪的一个腰子，呜呜呜。我也假装自己懂手相，然后一顿胡说，直到被咪戳穿看错纹理了<span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我们在一起总有说不完的话呢，根本停不下来，真好。</p><p>五点多我们打算回去了，咪说想吃巴奴家的火锅，于是马上预定位置，然后往新街口赶去。</p><h3 id="今夕何夕"><a href="#今夕何夕" class="headerlink" title="今夕何夕"></a>今夕何夕</h3><p>在新街口站我体验了南京地铁诡异的设计和新街口迷宫一样的出口转盘，极其考验我的眼力，然后带咪走了一条她没走过的路去了巴奴。巴奴家生意实在太好，我们到了之后前面还有几十桌，于是咪提议掼蛋和下五子棋解闷，打赌输了的人吃一包小零食，我感觉有点饿了，就一直输哇一直输，五子棋也输掼蛋也输<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>于是吃了好多小零食。等轮到了我们，我都感觉没那么饿了。我很贴心的记得咪喜欢黄喉，然后咪说还很喜欢他们家的一种笋，我们点了不少菜，鸳鸯锅，咪和我一样喜欢辣锅，咪很贴心地拿了葱花，用另一半的清汤菌菇锅底来泡汤，哇，真好喝。吃火锅的时候我感觉聊的差不多，终于敢把礼物的事情说出来了，我说我也给你带东西了的，看雨太大了就没拿着，现在在宾馆呢。咪说不要。不过转头为了给我面子，又说除非是好吃的。我说唉巧了，就是好吃的，一会儿回去我先从宾馆取下来，帮你送到寝室去，顺便一起逛校园，咪说好的。可能昨晚睡得晚，今天又起得早，这时候已经感觉有点累了。</p><p>显然我们菜点多了，最后都吃不下了。咪一直调侃我饭量不如她，我说我零食吃多了，而且我这顿吃的真不比你少<span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>咪最后把蔬菜带了回去。我们感觉坐地铁回去和走回去时间差不多了，就选择走回去。我带了一条最近的路，咪从来没走过，号称最短距离，带着咪走街穿巷。咪被我只看地图不用导航的方式震惊到了<span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🤣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f923.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>最后我们抵达广州路校门对面的时候，有一种豁然开朗，拨云见日的感觉。</p><p>然后我去宾馆入住，抱着零食束下了楼，在电梯里碰见几个女生，她们一边“哇”一边说加油，我笑了笑啥也没说。出了宾馆门，我看见咪低着头在瓷砖上踱步，我想咪也在思考，也在感受吧。咪看见了我，说太沉啦，算了吧，而且太重太显眼啦，这里离寝室还有好远呢，我们还要逛校园，太不方便了。我说那我明天把都装到袋子里吧，这样就不显眼啦，然后明天给你，顺便你帮我看下书包，我去找我妈妈。咪说好的。于是我又把零食束送回房间。顺便把贺卡拍给咪看。</p><p><img src="%E8%B4%BA%E5%8D%A1.jpg" alt="贺卡"></p><p>咪对广州路校门附近就很熟悉啦，带着我从小粉桥前往北园，一路上跟我说这是小粉桥的好吃的粉，这是好吃的猪蹄。小粉桥环境有点差，但是好吃的是真不少呢。我拿着咪的卡进了北园，嗯，这大马路和梧桐树似曾相识，有一点高中的味道。咪给我指了指破旧的图书馆，说这里还拍过电视剧呢。我们来到了北大楼，感觉北大楼也没我想象的那么长，比例还是挺和谐的呢。然后沿着北大楼我们又往安中楼去，看见了正在修建的操场，路边草丛里的雕像老先生。我已经困得有点挂不出了，无精打采的，还是强撑着，咪看起来还是好精神呢。</p><p>然后又前往南园，这里离咪宿舍就比较近了。进门的时候碰见了咪的几个同学，然后毫不意外的被吃瓜了。南大校园里的马路好宽敞，我们路过商店曹操和好多宿舍，终于到了咪楼下。我说回去早点休息吧，都听困了吧，咪说你回去了跟我说一声，我说好的，回去了告诉你，我们微信联系。</p><p>告别了咪，扭过头往校门方向走，我立刻感到万千沮丧，那一瞬间我真的开始怀疑一晚上都在干嘛，竟然那样疲惫无力地逛完了校园，整个人就好像忘写了一道大题的考生一样。我骑了一辆共享单车回了宾馆，跟咪报了平安，上厕所，然后和妈妈通了视频，聊了今天的情况，我的情绪都有点绷不住了。我跟妈妈说，我感觉自己准备了好多好多，但是最忘了准备的就是饱满的精力，而且我是完全把这一点忽略了，太失策了，见面礼的事情也挺尴尬的，我准备的小游戏也挺尴尬的，我想努力给咪留个完美的印象，但是我最终没有做到，还出了挺大疏漏的，太缺乏经验了啊。同时我也说我知道自己做的还不错，还不算特别差，用心程度拉满，我相信咪也感受到了。</p><p>于是洗澡，洗完澡一身的疲惫都消失了，真好，早知道当时从巴奴回来就应该洗个澡，失策啊。问咪怎么样啦，想不想下棋呀，咪说想和我视频，我说好呀，终于可以欢笑着面对我的心上人了。我们开心着聊了一会儿，问我晚上为什么不开心，我说我太累了抱歉。咪是善解人意的姑娘呢，我太爱了。和咪视频完之后，我就收拾东西，换衣服，把零食束分装到我带来的装衣服的袋子里，一切妥当之后准备睡觉。好困啊，躺着没多久就睡着了。</p><h2 id="7月18日-南京行第二天"><a href="#7月18日-南京行第二天" class="headerlink" title="7月18日 南京行第二天"></a>7月18日 南京行第二天</h2><h3 id="去看妈妈"><a href="#去看妈妈" class="headerlink" title="去看妈妈"></a>去看妈妈</h3><p>大早七点多就被妈妈的电话叫醒，然后眯了一会，八点多再也睡不着了，起床，洗澡，洗漱，随手拎了一下昨天装的袋子，袋子就坏掉了，。。于是起身下楼，给妈妈买点东西带着，顺便找几个结实的袋子。往东走没多远，就看到了杨记核桃酥，买了一些，给咪也买了一些，问店员要了两个额外的大袋子。回来之后再次分装，一袋装一些旺仔牛奶和水果，顶上放一盒杨记，emm，看起来还蛮不错，像那么回事？！正好，把我从上海带来的，一直没机会给咪的皮卡丘玩偶和米奇娃娃放了进去，真的是，功不唐捐啊，本来以为怎么带来怎么带回去了，老天还是给到我机会了。</p><p>八点四十多点跟咪说早安，然后在屋里晃来晃去，躺躺坐坐，过了一会儿咪也醒了。到快九点半的时候我说你忙完了嘛，我去找你呀。然后拎着背着大包小包，再次踏入广州路校门。咪给我指了指她们寝室的位置，和破旧的篮球场，我好开心。然后在寝室正门门口，我还担心咪拎不动两大袋东西，想让她分两次拎呢，然而咪的手劲还是可以的。吃的，然后是我的书包。我站在楼下，看了看寝室楼门口的对联，嗯挺有水平的。</p><p><img src="%E5%AF%B9%E8%81%94.jpg" alt="8舍门口对联"></p><p>然后去找妈妈。好远的路。坐到卧龙湖地铁站下车，想找个共享单车，怎么都找不到，索性走过去了。天好热，走过去一身汗。妈妈还出来迎接我了。一年半没见过妈妈了，时间啊时间，为何过的这么快。和妈妈一起去南边的餐馆吃饭，相谈甚欢，聊起和咪见面的感觉，我说我特别喜欢她，她比我之前在微信里了解到的还要好的多，我更是非常用心的在对待她，关心她，这次来南京，我承认免不了有些小问题，毕竟没什么经验。然而总体上我觉得没有出大问题，用心程度更是拉满，我相信咪也感受到了。妈妈说只要你喜欢就好，妈妈也觉得咪是很好很优秀的姑娘，表示支持我祝福我。</p><h3 id="下午茶"><a href="#下午茶" class="headerlink" title="下午茶"></a>下午茶</h3><p>两点多开始返程，打车到地铁站，告诉咪我准备回去了。上地铁打瞌睡，迷迷瞪瞪一路。咪说鼓楼下雨了，知道我没带伞，说你到了说一声我去接你，我好开心，真是贴心girl。迷瞪了一会儿开始查下午吃什么，我看了眼时间，肯定是没工夫看《中国医生》了，鉴于咪可能饿可能不饿，而且我到学校不过四点多，我找了好几家店，如果咪不饿我们就去咖啡厅坐坐吃下午茶，如果咪有点饿我们就去吃三猫鱼花，如果咪不想走太远我们就去小粉桥螺蛳粉，然后还需要问问她们下午几点的聚会，再做总体考虑。出了珠江路站，天公作美啊，居然放晴了。咪同意了去咖啡厅，然后我带着她走去上海路，咪再次对我的认路能力刮目相看。</p><p>咖啡厅好小好简单，我有理由怀疑美团好评是刷出来的。一人一杯饮料，我要了两个点心，坐着聊天，聊的好开心，聊起了咪本科时候的故事。中间我表演了空手抓蚊子，哈哈哈哈。</p><h3 id="告别"><a href="#告别" class="headerlink" title="告别"></a>告别</h3><p>六点半左右我说我们走吧，咪要送我到地铁站，我好开心。在地铁站，咪说路上注意安全，上车跟我说，我说我随时给你报行程，你快翻个白眼再让我看一下，哈哈哈哈。我过闸机，咪看着下地铁去的楼梯，我赶紧过了闸机，希望能和咪目光碰撞一下，谁知到楼梯跟前看不见咪了，我张望好久，只好下去了。在地铁上，怅然无比，我的心已经留在南京了，已经在期盼下一次过来了。</p><p><img src="%E8%BD%A6%E7%AB%99.jpg" alt="离别的车站，美丽的晚霞"></p><p>晚上到上海，到了实验室，看了眼我的代码，嗯还不错的样子。咪和同门玩的好晚。咪室友晚上也回来了。她什么时候走啊，我不想让她打扰我和咪视频。。<br>总体来讲，确实是天公很作美，很给机会了。周六刚到南京，雨就小了，到总统府就是雨后初晴。周日回到学校雨也停了，也许这就是天意吧。<br>咪很担心男生不能持之以恒地对她好。相信我吧，我会做给你看的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>仔细反思这次南京行做的不好的地方，目前想到了以下几点：</p><ul><li>带的礼物太过不应该，以至于最后被迫分成两袋子；</li><li>没带花露水；</li><li>有一次一不小心爆了粗口；</li><li>带路去B座没看清，走错一次；</li><li>走路略快，不走马路上面；</li><li>吃饭不应该二郎腿；</li><li>太疲劳了，应该前一天晚上过来的，这样就能休息好了。</li></ul><p>希望这对于我和咪来说都是比较好的回忆吧，好期待下一次见面啊。。。</p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逛吃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基本语法</title>
      <link href="/2021/08/27/python-ji-ben-yu-fa/"/>
      <url>/2021/08/27/python-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基本语法"><a href="#Python基本语法" class="headerlink" title="Python基本语法"></a>Python基本语法</h1><p>这一章我们主要来学习Python语言使用的基本语法，便于以后读写Python代码。当然我们只学习最重要的部分。</p><h2 id="Python基本数据类型和运算符"><a href="#Python基本数据类型和运算符" class="headerlink" title="Python基本数据类型和运算符"></a>Python基本数据类型和运算符</h2><p>Python中的<strong>变量</strong>需要先<strong>声明</strong>后使用。看下面一段代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">counter <span class="token operator">=</span> <span class="token number">100</span>          <span class="token comment"># 整型变量 int</span>miles   <span class="token operator">=</span> <span class="token number">1000.0</span>       <span class="token comment"># 浮点型变量 float</span>name    <span class="token operator">=</span> <span class="token string">"fairy"</span>      <span class="token comment"># 字符串 str，注意字符串既可以用双引号，也可以用单引号，"fairy"和'fairy'在python里是等同的 </span>flag    <span class="token operator">=</span> <span class="token boolean">True</span>   <span class="token comment"># 布尔类型 bool，其值仅可以为True或False</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>miles<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行该代码可以得到：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; 100(base) PS C:\Users\15617&gt; 1000.0(base) PS C:\Users\15617&gt; fairy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码中<strong>声明</strong>并<strong>赋值</strong>了整型变量counter，浮点型变量miles，字符串类型变量name，和布尔（Bool）类型的变量flag，然后调用Python自带的print<strong>函数</strong>输出各变量。函数的概念我们后面会讲，这里只使用不讨论。</p><p>注意布尔类型变量的值仅可为True或False，在运算和判断中等价于1和0，用于标记“是”和“非”。</p><p>整型、浮点型可以用<strong>运算符</strong>进行各种运算，如以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">21</span>c <span class="token operator">=</span> a <span class="token comment"># "="是赋值符号，也是一种运算符</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token comment"># 加法</span>c <span class="token operator">=</span> a <span class="token operator">-</span> b <span class="token comment"># 减法</span>c <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token comment"># 乘法</span>c <span class="token operator">=</span> a <span class="token operator">/</span> b <span class="token comment"># 除法</span>c <span class="token operator">=</span> a <span class="token operator">%</span> b <span class="token comment"># 取模，返回a除以b得到的余数</span>c <span class="token operator">=</span> a <span class="token operator">**</span> b <span class="token comment"># 幂运算，返回a的b次幂</span>c <span class="token operator">=</span> a <span class="token operator">//</span> b <span class="token comment"># 整除运算，将a/b的商向下取整，例如，9/2=4.5,9//2=4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串常见的运算符和运算如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"mi"</span>b <span class="token operator">=</span> <span class="token string">"Xiao mi"</span>c <span class="token operator">=</span> b <span class="token operator">+</span> a <span class="token comment"># 字符串拼接，得到的c为新字符串"Xiao mimi"</span>c <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 通过索引获取字符，得到的字符c="i"，字符串中的字符从左到右索引分别为0，1，2，...</span>c <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment"># 字符串截取，这里截取了第0~4个字符，得到的字符串c="Xiao "，注意不包括第5个字符，注意空格也是字符</span>c <span class="token operator">=</span> a <span class="token keyword">in</span> b <span class="token comment"># 成员运算，如果字符串a存在于字符串b中，则c为布尔类型的True，否则为False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咪咪可以试着更改一下参数或者a, b的值，运行一下代码，输出c的值，看看是否符合自己的预期。</p><p><strong>总结与延申：</strong></p><ul><li>这一节我们学习了基本变量的声明和计算，包括整数、浮点数、字符串、布尔类型等，加减乘除模，字符串的查询拼接等等；</li><li>Python中的一切运算最终都要落到变量的运算上来，所以如果想对变量做某种处理而不知道该怎么处理，就可以百度或者谷歌啦。</li></ul><p><strong>小练习:</strong></p><p>现在我们来做两个小练习，巩固一下学到的知识：</p><ul><li>已知三角形的三边长a=5, b=6, c=7，怎样在Python中计算三角形的面积？（提示，可以采用海伦公式）</li><li>假设现在变量x=10，y=20，怎样在Python中把x和y的值交换？</li></ul><h2 id="Python-数据类型转换"><a href="#Python-数据类型转换" class="headerlink" title="Python 数据类型转换"></a>Python 数据类型转换</h2><p>Python中的数据可以进行数据类型转换，需要分别采用int float str bool这样的关键字。如以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">520</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">13.14</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'9.99'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做数据类型转换只需要使用关键字括号+参数的形式即可。注意由一个浮点数构成的字符串转为整数时，需要先转为浮点数，再转为整数。</p><h2 id="Python基本数据结构"><a href="#Python基本数据结构" class="headerlink" title="Python基本数据结构"></a>Python基本数据结构</h2><p>上一节我们学的是基本变量的赋值和运算规则，然而一个变量一个变量命名太慢了，如果我们有一大批数据需要存储，就很难给一个一个数据都分别设置变量来存储。这时候我们就需要数据结构来进行统一操作和处理。</p><p>Python中有四种基本的数据结构：列表，元组，字典，集合，如下面的代码所定义的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Xmm"</span><span class="token punctuation">,</span> <span class="token number">1994</span><span class="token punctuation">,</span> <span class="token number">4.16</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span> <span class="token comment"># 列表中的元素可以为上一节讲的各种数据类型</span><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Gs"</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token number">2.28</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 元组和列表一样，区别仅仅在于元组中的值定义好之后无法更改</span>dictionary <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"跟油油学Python"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">8.15</span><span class="token punctuation">,</span> <span class="token string">"site"</span><span class="token punctuation">:</span><span class="token string">"formi_python"</span><span class="token punctuation">}</span> <span class="token comment"># 字典用于建立自定义的对应关系，每组对应关系包含一个key一个value，在冒号前后;key和value的值均可为上一节讲的各种数据类型</span><span class="token builtin">set</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">}</span><span class="token comment"># 集合是一个无序的不重复元素集，每个元素可为上一节讲的各种数据类型。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只介绍最常见的数据结构list的最常见的用法，别的数据结构我们知道有它们的主要特性就好啦，需要用的时候再学习：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">]</span> <span class="token comment"># 一个包含7个字符串的列表</span><span class="token comment"># 列表查询</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出list[0]，即第0个元素'red'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出list[2]，即第2个元素'blue'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第-1个元素，即倒数第一个元素'black'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第-2个元素，即'white'，其他以此类推</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第1~3个元素，即['green', 'blue', 'yellow']，注意得到的结果是一个新的list</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第1~倒数第3个元素，即['green', 'blue', 'yellow']，注意得到的结果是一个新的list</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第3个以及后面的所有元素，即['yellow', 'white', 'black']，注意得到的结果是一个新的list</span><span class="token comment"># 列表修改</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'pink'</span> <span class="token comment"># 将第2个元素赋值为'pink'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token comment"># 猜猜输出结果是什么？</span><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span> <span class="token comment"># 在列表末尾加入元素'orange'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token comment"># 猜猜输出结果是什么？</span><span class="token keyword">del</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">#删除列表第2个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token comment"># 猜猜输出结果是什么？</span><span class="token comment"># 列表脚本操作符</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">+</span> list2<span class="token punctuation">)</span> <span class="token comment"># "+"可以将list1和list2拼接为新的list</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> list1<span class="token punctuation">)</span> <span class="token comment"># "in"可以判断一个元素是否存在于一个list中，返回一个布尔类型的True或False，这里输出True</span><span class="token comment"># 列表常用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># len()函数可以得到列表中元素的个数，返回值是整型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># max()函数返回list中元素的最大值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># min()函数返回list中元素的最小值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试着运行一下这段代码，看得到的效果和我们预期的一样不一样吧~</p><p>注意这里都是用print()函数将结果直接输出出来了，当然也可以把结果赋给新的变量。</p><p><strong>总结与延申：</strong></p><ul><li>这一节我们学习了基本数据结构及操作，主要是list的操作，数据结构主要是为了方便大规模处理数据而存在的；</li><li>每个数据结构在Python中都有许多已经写好的<strong>函数</strong>可以进行处理，例如len(), max(), min()等，比较共性的功能基本都不需要我们自己去实现，百度或者谷歌一下就会用啦。</li></ul><p><strong>小练习：</strong></p><ul><li>请咪咪同学在Python中声明一个长度为10的list，前两个元素分别为数字0和1。然后通过计算得到其他元素的值，要求从第三个元素开始，每个元素都等于前两个元素之和。即“斐波那契数列”。</li><li>对上述得到的斐波那契数列list进行翻转。</li></ul><h2 id="Python条件语句"><a href="#Python条件语句" class="headerlink" title="Python条件语句"></a>Python条件语句</h2><p>有时候我们只在一定条件下才做运算和处理，这个时候就需要条件语句。</p><p>Python中的条件语句if用法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入你家猪猪的年龄: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你是在逗我吧!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相当于 14 岁的人。"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相当于 22 岁的人。"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    human <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">+</span> <span class="token punctuation">(</span>age <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对应人类年龄: "</span><span class="token punctuation">,</span> human<span class="token punctuation">)</span> <span class="token comment">### 退出提示</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"点击 enter 键退出"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较简单易懂。</p><h2 id="Python-for循环语句"><a href="#Python-for循环语句" class="headerlink" title="Python for循环语句"></a>Python for循环语句</h2><p>循环语句我们之前在学写乘法口诀表的时候有过接触了，这里再细致看一下。</p><p>先来看我们熟悉的for循环，它的一般格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>    statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它的执行流程图是这样的：</p><p><img src="for.jpg" alt="for循环执行流程图"></p><p>下面这份代码里的两个例子是for循环最常用的用法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">characters_of_fairy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"beautiful"</span><span class="token punctuation">,</span> <span class="token string">"clever"</span><span class="token punctuation">,</span> <span class="token string">"lovely"</span><span class="token punctuation">,</span> <span class="token string">"ambitious"</span><span class="token punctuation">]</span><span class="token keyword">for</span> character <span class="token keyword">in</span> characters_of_fairy<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>characters_of_fairy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>characters_of_fairy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-while循环"><a href="#Python-while循环" class="headerlink" title="Python while循环"></a>Python while循环</h2><p>while循环与for循环大同小异：</p><p><img src="while.jpg" alt="while循环执行流程图"></p><p>下面这个例子演示了使用while循环从1累加到100：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>counter <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> counter <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> counter    counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是不是很简单呀<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="Python-循环嵌套"><a href="#Python-循环嵌套" class="headerlink" title="Python 循环嵌套"></a>Python 循环嵌套</h2><p>Python的循环嵌套我们前面也已经认识过了，它是把内层循环当作了外层循环的循环体。Python允许任意层数的循环嵌套，例如双层for循环：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>   <span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>      statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>双层while循环：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> expression<span class="token punctuation">:</span>   <span class="token keyword">while</span> expression<span class="token punctuation">:</span>      statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>双层循环的执行流程图如下：</p><p><img src="double.png" alt="双层循环执行流程图"></p><p>当然for循环也可以和while循环互相嵌套。</p><p>作为一个小练习，我们再来复习一下Python正向和反向输出乘法口诀表吧<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="break-continue-与-pass"><a href="#break-continue-与-pass" class="headerlink" title="break, continue 与 pass"></a>break, continue 与 pass</h2><p>在循环语句中还有两个常用的关键字，分别是break和continue。其中break用于立刻结束当前循环转而执行后面的语句，continue用于结束本轮循环，继续下一轮循环。我们通过下面这两个例子来理解：</p><p>break语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>continue语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小仙女可以分别执行这两份代码，看看结果有什么不同呢<span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>而pass语句表示空语句，什么也不做，它的作用是占位。因为我们知道Python里面的循环不可以没有循环体，if语句也不可以没有判定成功后的执行内容，自定义函数也不可以为空，所以如果我们需要一个空循环，或者空函数，或者空的if语句，就需要用到pass：</p><p>如以下语句是合法的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">mymax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而以下语句是非法的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">mymax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="大练习"><a href="#大练习" class="headerlink" title="大练习"></a>大练习</h2><p>请咪咪小朋友用Python语言判断并输出2~100以内的所有素数。</p><p>会做这个题目或者读懂下面这段代码，本文的内容就全都理解到位啦。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>      j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境搭建与Python入门</title>
      <link href="/2021/08/27/huan-jing-da-jian-yu-python-ru-men/"/>
      <url>/2021/08/27/huan-jing-da-jian-yu-python-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建与Python入门"><a href="#环境搭建与Python入门" class="headerlink" title="环境搭建与Python入门"></a>环境搭建与Python入门</h1><p>本文我们先了解什么是Python，然后在Windows上搭建Python环境，学会如何运行Python代码，再跑几个样例代码做测试，感受一下Python的魅力。</p><h2 id="Python是什么"><a href="#Python是什么" class="headerlink" title="Python是什么"></a>Python是什么</h2><p>计算机上的各种软件都是用编程语言写成的，编程语言可以沟通人与计算机，便于人们更好地使用计算机的算力和资源。</p><p>Python语言正是当前最流行的编程语言，主要特点是简单明了、功能强大、扩展性强，只有你想不到，没有它做不到。</p><p>Python在各种工程和科研领域都有应用，尤其在人工智能领域，几乎占垄断地位。</p><p>Python3目前正在完全取代Python2，二者大同小异，因此我们只学习Python3，也只用Python3，本文中的所有Python均指Python3. </p><p>我们后面要做的爬虫、NLP等内容都是基于Python语言的，所以对Python有基本了解是很有必要的。</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>我们通过安装Anaconda来搭建Python环境。</p><p>Anaconda是当前最流行的Python发行版本，其中包含了Python和许多常用工具包及其依赖，还提供了conda、pip等工具用于环境和包管理，十分方便。</p><p>我们可以在<a href="https://www.anaconda.com/products/individual#Downloads">这里</a>下载最新的安装包，建议下载Windows 64 bit版本安装包，如下图所示：</p><p><img src="anaconda.png" alt="Anaconda下载"></p><p>安装完成后来测试一下。按下Windows键，找到Anaconda3 (64-bit) 文件夹，然后打开**Anaconda Powershell Prompt (Anaconda3)**，输入Python：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Anaconda Powershell Prompt (Anaconda3)就是我们后面经常要用到的PowerShell，这是Anaconda提供给我们的。</p><p>然后按下回车，看到类似如下输出即可表明Anaconda安装成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; pythonPython 3.8.3 (default, Jul  2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以关闭PowerShell了。</p><h2 id="安装Sublime-Text-3"><a href="#安装Sublime-Text-3" class="headerlink" title="安装Sublime Text 3"></a>安装Sublime Text 3</h2><p>安装完了Python环境，我们现在需要一个编辑器来写Python代码，这里推荐的是Sublime Text 3，也是油油最喜欢的代码和文本编辑器。</p><p>Sublime Text3的特点是简洁轻便美观并且免费。唯一缺点是偶尔会弹出来购买提示框，按Esc忽略即可。</p><p>如下图，可以在<a href="https://www.sublimetext.com/3">这里</a>下载Windows 64 bit版本安装包。</p><p><img src="sublime.png" alt="Sublime Text 3下载"></p><p>安装还是建议安装在D盘，安装完成后在桌面上会出现Sublime Text 3的图标，打开即可使用。</p><h2 id="咪咪的第一个Python代码"><a href="#咪咪的第一个Python代码" class="headerlink" title="咪咪的第一个Python代码"></a>咪咪的第一个Python代码</h2><p>现在我们来写第一个Python代码。 </p><p>打开Sublime Text 3，在键盘上按<strong>Ctrl+N</strong>，这样就新建了一个文件。在文件中输入以下内容，只有一句话，调用print函数输出双引号引起来的字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Beautiful fairy, happy fairy!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在键盘上按<strong>Ctrl+S</strong>，在<strong>另存为</strong>框中选择一个目录，这里作为示例选的是E盘100dataset文件夹。</p><p>然后在文件名一栏输入<strong>test.py</strong>，点击保存。注意，目录应尽量避免中文名。</p><p>代码写完了，现在我们来执行这份名为<strong>test.py</strong>的代码。首先需要打开<strong>PowerShell</strong>并切换目录。</p><p>在文件管理器中打开你刚才选择的目录，在地址栏单击鼠标，然后<strong>Ctrl+C</strong>可以复制当前目录位置，如下图，我们复制了E盘100dataset文件夹的位置：</p><p><img src="path.png" alt="执行目录"></p><p>然后依照上部分讲的方式，打开PowerShell，在其中输入”cd “，然后<strong>Ctrl+V</strong>粘贴我们刚才复制的目录位置，再回车，即可将PowerShell的工作目录转移到我们代码的位置下，如这里我们转移到了”E:\100dataset”的位置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; cd E:\100dataset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在我们可以执行代码了。在PowerShell中输入**”python “+待执行的.py文件名**，这里应该是“python test.py”，如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS E:\100dataset&gt; python test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按下回车键，然后你就可以看到PowerShell窗口在空白行输出的字符串啦：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS E:\100dataset&gt; Beautiful fairy, happy fairy!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>怎么样，是不是很简单。当然，字符串可以是其他任何内容。</p><h2 id="Python输出九九乘法口诀表"><a href="#Python输出九九乘法口诀表" class="headerlink" title="Python输出九九乘法口诀表"></a>Python输出九九乘法口诀表</h2><p>我们再来看一个例子。将test.py中的内容全部删掉，输入以下内容（可以复制粘贴）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}x{}={}\t'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在PowerShell窗口再次输入：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS E:\100dataset&gt; python test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并按下回车，怎么样，是不是得到了一个九九乘法口诀表？试着读一下代码，能读懂它的逻辑吗？</p><h2 id="Python输出心形"><a href="#Python输出心形" class="headerlink" title="Python输出心形"></a>Python输出心形</h2><p>将<strong>test.py</strong>中的内容全部删掉，输入以下内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timewords <span class="token operator">=</span> <span class="token string">"lovemi"</span><span class="token keyword">for</span> item <span class="token keyword">in</span> words<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以同样的方式运行，是不是得到了一个心形？这段代码比较复杂，不需要掌握，只是想展示一下Python语言的强大和精妙。</p><p>给咪咪比个❤哦~</p><h2 id="Python小游戏：贪吃蛇"><a href="#Python小游戏：贪吃蛇" class="headerlink" title="Python小游戏：贪吃蛇"></a>Python小游戏：贪吃蛇</h2><p>运行这个小游戏的代码需要先安装一个名为<strong>pygame</strong>的包，在PowerShell中输入以下内容并回车就可以使用pip安装新的工具包了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; pip install pygame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们以后还会用pip安装和管理其他工具包。等待安装完成，然后在test.py中输入以下代码并以前述方式运行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> pygame<span class="token keyword">import</span> sys<span class="token keyword">from</span> pygame<span class="token punctuation">.</span><span class="token builtin">locals</span> <span class="token keyword">import</span> <span class="token operator">*</span> Snakespeed <span class="token operator">=</span> <span class="token number">17</span>Window_Width <span class="token operator">=</span> <span class="token number">1600</span>Window_Height <span class="token operator">=</span> <span class="token number">1000</span>Cell_Size <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># Width and height of the cells</span><span class="token comment"># Ensuring that the cells fit perfectly in the window. eg if cell size was</span><span class="token comment"># 10     and window width or windowheight were 15 only 1.5 cells would</span><span class="token comment"># fit.</span><span class="token keyword">assert</span> Window_Width <span class="token operator">%</span> Cell_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Window width must be a multiple of cell size."</span><span class="token comment"># Ensuring that only whole integer number of cells fit perfectly in the window.</span><span class="token keyword">assert</span> Window_Height <span class="token operator">%</span> Cell_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Window height must be a multiple of cell size."</span>Cell_W <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> Cell_Size<span class="token punctuation">)</span>  <span class="token comment"># Cell Width</span>Cell_H <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Window_Height <span class="token operator">/</span> Cell_Size<span class="token punctuation">)</span>  <span class="token comment"># Cellc Height</span>  White <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>Black <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>Red <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># Defining element colors for the program.</span>Green <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>DARKGreen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>DARKGRAY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>YELLOW <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>Red_DARK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>BLUE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>BLUE_DARK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>  BGCOLOR <span class="token operator">=</span> Black  <span class="token comment"># Background color</span>  UP <span class="token operator">=</span> <span class="token string">'up'</span>DOWN <span class="token operator">=</span> <span class="token string">'down'</span>      <span class="token comment"># Defining keyboard keys.</span>LEFT <span class="token operator">=</span> <span class="token string">'left'</span>RIGHT <span class="token operator">=</span> <span class="token string">'right'</span> HEAD <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># Syntactic sugar: index of the snake's head</span>  <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> SnakespeedCLOCK<span class="token punctuation">,</span> DISPLAYSURF<span class="token punctuation">,</span> BASICFONT     pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    SnakespeedCLOCK <span class="token operator">=</span> pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    DISPLAYSURF <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span>Window_Width<span class="token punctuation">,</span> Window_Height<span class="token punctuation">)</span><span class="token punctuation">)</span>    BASICFONT <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token string">'freesansbold.ttf'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'Snake'</span><span class="token punctuation">)</span>     showStartScreen<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        runGame<span class="token punctuation">(</span><span class="token punctuation">)</span>        showGameOverScreen<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">runGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Set a random start point.</span>    startx <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Cell_W <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>    starty <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Cell_H <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>    wormCoords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> startx<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> starty<span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> startx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> starty<span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> startx <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> starty<span class="token punctuation">}</span><span class="token punctuation">]</span>    direction <span class="token operator">=</span> RIGHT     <span class="token comment"># Start the apple in a random place.</span>    apple <span class="token operator">=</span> getRandomLocation<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># main game loop</span>        <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># event handling loop</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> QUIT<span class="token punctuation">:</span>                terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> KEYDOWN<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_LEFT<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> RIGHT<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> LEFT                <span class="token keyword">elif</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_RIGHT<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> LEFT<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> RIGHT                <span class="token keyword">elif</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_UP<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> DOWN<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> UP                <span class="token keyword">elif</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_DOWN<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> UP<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> DOWN                <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_ESCAPE<span class="token punctuation">:</span>                    terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># check if the Snake has hit itself or the edge</span>        <span class="token keyword">if</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> Cell_W <span class="token keyword">or</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> Cell_H<span class="token punctuation">:</span>            <span class="token keyword">return</span>  <span class="token comment"># game over</span>        <span class="token keyword">for</span> wormBody <span class="token keyword">in</span> wormCoords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> wormBody<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> wormBody<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>  <span class="token comment"># game over</span>         <span class="token comment"># check if Snake has eaten an apply</span>        <span class="token keyword">if</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> apple<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> apple<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># don't remove worm's tail segment</span>            apple <span class="token operator">=</span> getRandomLocation<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># set a new apple somewhere</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">del</span> wormCoords<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># remove worm's tail segment</span>         <span class="token comment"># move the worm by adding a segment in the direction it is moving</span>        <span class="token keyword">if</span> direction <span class="token operator">==</span> UP<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span>        <span class="token keyword">elif</span> direction <span class="token operator">==</span> DOWN<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>        <span class="token keyword">elif</span> direction <span class="token operator">==</span> LEFT<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span>                <span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token keyword">elif</span> direction <span class="token operator">==</span> RIGHT<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span>                <span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        wormCoords<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> newHead<span class="token punctuation">)</span>        DISPLAYSURF<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>BGCOLOR<span class="token punctuation">)</span>        drawGrid<span class="token punctuation">(</span><span class="token punctuation">)</span>        drawWorm<span class="token punctuation">(</span>wormCoords<span class="token punctuation">)</span>        drawApple<span class="token punctuation">(</span>apple<span class="token punctuation">)</span>        drawScore<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>wormCoords<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        SnakespeedCLOCK<span class="token punctuation">.</span>tick<span class="token punctuation">(</span>Snakespeed<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawPressKeyMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pressKeySurf <span class="token operator">=</span> BASICFONT<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Press a key to play.'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    pressKeyRect <span class="token operator">=</span> pressKeySurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    pressKeyRect<span class="token punctuation">.</span>topleft <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">,</span> Window_Height <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span>    DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>pressKeySurf<span class="token punctuation">,</span> pressKeyRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">checkForKeyPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span>QUIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    keyUpEvents <span class="token operator">=</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span>KEYUP<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>keyUpEvents<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> keyUpEvents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> K_ESCAPE<span class="token punctuation">:</span>        terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> keyUpEvents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key  <span class="token keyword">def</span> <span class="token function">showStartScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    titleFont <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token string">'freesansbold.ttf'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    titleSurf1 <span class="token operator">=</span> titleFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Snake!'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">,</span> DARKGreen<span class="token punctuation">)</span>    degrees1 <span class="token operator">=</span> <span class="token number">0</span>    degrees2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        DISPLAYSURF<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>BGCOLOR<span class="token punctuation">)</span>        rotatedSurf1 <span class="token operator">=</span> pygame<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>titleSurf1<span class="token punctuation">,</span> degrees1<span class="token punctuation">)</span>        rotatedRect1 <span class="token operator">=</span> rotatedSurf1<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>        rotatedRect1<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Window_Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>rotatedSurf1<span class="token punctuation">,</span> rotatedRect1<span class="token punctuation">)</span>         drawPressKeyMsg<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> checkForKeyPress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># clear event queue</span>            <span class="token keyword">return</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        SnakespeedCLOCK<span class="token punctuation">.</span>tick<span class="token punctuation">(</span>Snakespeed<span class="token punctuation">)</span>        degrees1 <span class="token operator">+=</span> <span class="token number">3</span>  <span class="token comment"># rotate by 3 degrees each frame</span>        degrees2 <span class="token operator">+=</span> <span class="token number">7</span>  <span class="token comment"># rotate by 7 degrees each frame</span>  <span class="token keyword">def</span> <span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">getRandomLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Cell_W <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Cell_H <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">showGameOverScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gameOverFont <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token string">'freesansbold.ttf'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    gameSurf <span class="token operator">=</span> gameOverFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Game'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    overSurf <span class="token operator">=</span> gameOverFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Over'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    gameRect <span class="token operator">=</span> gameSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    overRect <span class="token operator">=</span> overSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    gameRect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    overRect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> gameRect<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">)</span>     DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>gameSurf<span class="token punctuation">,</span> gameRect<span class="token punctuation">)</span>    DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>overSurf<span class="token punctuation">,</span> overRect<span class="token punctuation">)</span>    drawPressKeyMsg<span class="token punctuation">(</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>    checkForKeyPress<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># clear out any key presses in the event queue</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> checkForKeyPress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># clear event queue</span>            <span class="token keyword">return</span>  <span class="token keyword">def</span> <span class="token function">drawScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">:</span>    scoreSurf <span class="token operator">=</span> BASICFONT<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Score: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    scoreRect <span class="token operator">=</span> scoreSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    scoreRect<span class="token punctuation">.</span>topleft <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">-</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>scoreSurf<span class="token punctuation">,</span> scoreRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawWorm</span><span class="token punctuation">(</span>wormCoords<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> coord <span class="token keyword">in</span> wormCoords<span class="token punctuation">:</span>        x <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size        y <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size        wormSegmentRect <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> DARKGreen<span class="token punctuation">,</span> wormSegmentRect<span class="token punctuation">)</span>        wormInnerSegmentRect <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span>            x <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> Cell_Size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> Cell_Size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> wormInnerSegmentRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawApple</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size    y <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size    appleRect <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> Red<span class="token punctuation">,</span> appleRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Window_Width<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># draw vertical lines</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> DARKGRAY<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> Window_Height<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Window_Height<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># draw horizontal lines</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> DARKGRAY<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Window_Width<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> SystemExit<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，代码中”#”后面的部分为<strong>注释</strong>，是为了方便读者阅读代码而存在的，不具备语法意义。</p><p>在操作界面按下键盘上的方向键上下左右，就可以控制贪吃蛇的移动方向。怎么样，是不是很有趣~</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
