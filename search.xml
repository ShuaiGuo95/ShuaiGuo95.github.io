<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微调transformers进行BERT垃圾邮件分类</title>
      <link href="/2021/11/03/%E5%BE%AE%E8%B0%83transformers%E8%BF%9B%E8%A1%8C%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
      <url>/2021/11/03/%E5%BE%AE%E8%B0%83transformers%E8%BF%9B%E8%A1%8C%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="微调transformers进行BERT垃圾邮件分类"><a href="#微调transformers进行BERT垃圾邮件分类" class="headerlink" title="微调transformers进行BERT垃圾邮件分类"></a>微调transformers进行BERT垃圾邮件分类</h1><p>现在我们使用Hugging Face的transformers包提供的预训练模型，在我们之前做的垃圾邮件分类任务上做一个微调，为将来我们的具体任务做准备。</p><p>本文主要参考<a href="https://mccormickml.com/2019/07/22/BERT-fine-tuning/#21-download--extract">这篇英文博客</a>，并结合我们的数据集完成。</p><p>本文使用<code>PyTorch</code>深度学习框架，在<code>GTX 1080ti</code>显卡上运行。</p><p>本文跟上一篇的主要区别在于使用的是我们自定义的数据集，而不是Hugging Face封装好的数据集。</p><h2 id="数据集读入与停用词去除"><a href="#数据集读入与停用词去除" class="headerlink" title="数据集读入与停用词去除"></a>数据集读入与停用词去除</h2><p>首先还是读入数据，这部分与之前用BOW等方法的时候基本一样。首先是读入<code>index</code>文件作为索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> codecs<span class="token keyword">import</span> re<span class="token keyword">import</span> jiebaindex <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 读入是两列，一列spam 一列path</span>index<span class="token punctuation">.</span>spam <span class="token operator">=</span> index<span class="token punctuation">.</span>spam<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'spam'</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 数据标签，标签为spam的设置为1 否则设置为0</span>index<span class="token punctuation">.</span>path <span class="token operator">=</span> index<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 更改文件路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>spam</code>列是标签列，若值为<code>spam</code>则为垃圾邮件；<code>path</code>列是邮件文件存储的路径列，可以直接读取。这是一个二分类任务。</p><p>然后是按照路径读入邮件内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_mail_content</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    遍历得到每封邮件的词汇字符串    :param path: 邮件路径    :return:(Str)content    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"gbk"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 以gbk编码打开文件，忽略错误</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读入所有行，得到一个包含多个字符串的list，一行是一个字符串</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>            <span class="token comment"># 去除第一个空行，即在第一个空行之前的邮件协议内容全部舍弃</span>            lines <span class="token operator">=</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># strip()是丢弃换行符，split()是按照空格分隔开（起到剔除多个空格只留下一个空格的作用），然后再join在一起</span>    <span class="token comment"># print(content)</span>    <span class="token keyword">return</span> contentindex<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> get_mail_content<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对content列使用函数，得到邮件内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义<code>get_mail_content()</code>函数，第一个换行符之前的内容为英文内容，直接丢弃；中文内容按行读入并整合，写入新建的<code>content</code>列。</p><p>现在我们载入数据集提供的停用词列表，然后从<code>content</code>列中去除停用词：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_stop_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读出停用词列表    :return: (List)_stop_words    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 载入停用词列表</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读入所有行，得到一个包含多个字符串的list，一行是一个字符串</span>    _stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">]</span> <span class="token comment"># 舍弃掉所有换行符</span>    <span class="token keyword">return</span> _stop_wordsstop_words <span class="token operator">=</span> load_stop_word<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_word_dict</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> stop_words_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    依据邮件的词汇字符串统计词汇出现记录，依据停止词列表除去某些词语    :param content: 邮件的词汇字符串    :param stop_words_list:停止词列表    :return:(Dict)word_dict    """</span>    word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    word_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment"># word_dict key:word, value:1</span>    content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">u"[\u4e00-\u9fa5]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>     <span class="token comment"># 正则表达式，只保留汉字，其他字符全部剔除，这句得到的是含有多个字符串的list，其中一个汉字一个字符串</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token comment"># 拼起来</span>    word_list_temp <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token comment"># 使用jieba进行分词</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_list_temp<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words_list<span class="token punctuation">:</span> <span class="token comment"># 去掉空词和停止词</span>            word_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>word_list<span class="token punctuation">)</span>index<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> create_word_dict<span class="token punctuation">(</span>x<span class="token punctuation">,</span> stop_words<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 得到新的列content，去除了停用词</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里数据读入和预处理就做完啦。现在看到的<code>index</code>大致是这样的：</p><table><thead><tr><th align="left"></th><th align="right">spam</th><th align="right">path</th><th align="right">content</th></tr></thead><tbody><tr><td align="left">0</td><td align="right">1</td><td align="right">./data/000/000</td><td align="right">非财务纠淼牟莆窆芾沙盘模拟运用财务岳硖岣吖芾砑课程背景一位管理技术人员清楚懂得技术角度衡量合…</td></tr><tr><td align="left">1</td><td align="right">0</td><td align="right">./data/000/001</td><td align="right">讲孔子后人故事一个领导回到家乡儿子感情贪财孙子孔为和睦领导弟弟魏宗万马车洋妞考察民俗家过年孔…</td></tr><tr><td align="left">2</td><td align="right">1</td><td align="right">./data/000/002</td><td align="right">尊敬贵公司财务经理负责人您好深圳金海实业有限公司广州东莞省市分公司我司良好社会关系实力每月进…</td></tr><tr><td align="left">3</td><td align="right">1</td><td align="right">./data/000/003</td><td align="right">贵公司负责人经理财务您好深圳市华龙公司受多家公司委托向外低点代开部分增值税电脑发票左右普通商…</td></tr><tr><td align="left">4</td><td align="right">1</td><td align="right">./data/000/004</td><td align="right">这是一封格式信件广告网络电话包年卡元长途市话全包最快论坛邮址搜索专家最好邮件群发专家论坛短信…</td></tr><tr><td align="left">…</td><td align="right">…</td><td align="right">…</td><td align="right">…</td></tr><tr><td align="left">64615</td><td align="right">1</td><td align="right">./data/215/115</td><td align="right">贵公司负责人经理财务您好公司深圳市华源实业有限公司公司实力雄厚全国各地分公司有着良好社会关系…</td></tr><tr><td align="left">64616</td><td align="right">1</td><td align="right">./data/215/116</td><td align="right">尊敬商家朋友您好深圳市裕华实业有限公司我司实力雄厚有着良好社会关系部分外省市票据进项较多现完…</td></tr><tr><td align="left">64617</td><td align="right">1</td><td align="right">./data/215/117</td><td align="right">贵公司负责人经理财务您好深圳市康特实业有限公司公司全国各地设有分公司广州东莞等市分公司全国分…</td></tr><tr><td align="left">64618</td><td align="right">1</td><td align="right">./data/215/118</td><td align="right">这是一个格式邮件</td></tr><tr><td align="left">64619</td><td align="right">1</td><td align="right">./data/215/119</td><td align="right">贵公司负责人经理财务您好深圳市康特实业有限公司公司全国各地设有分公司广州东莞等市分公司全国分…</td></tr></tbody></table><h2 id="文本tokenize"><a href="#文本tokenize" class="headerlink" title="文本tokenize"></a>文本tokenize</h2><p>为了把我们的数据集喂给<code>transformers</code>的BERT模型，我们需要把我们的文本做<code>tokenize</code>映射为BERT指定的词汇表中的序号：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertTokenizer<span class="token comment"># 载入Bert tokenizer.</span>tokenizer <span class="token operator">=</span> BertTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">'bert-base-uncased'</span><span class="token punctuation">,</span> do_lower_case<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们把<code>index</code>中的文本提取出来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sentences <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>index<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后把所有<code>index</code>中的文本都做tokenize：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>attention_masks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> sent <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>    <span class="token comment"># `encode_plus` 的步骤:</span>    <span class="token comment">#   (1) 分割文本；</span>    <span class="token comment">#   (2) 在文本开头加入 `[CLS]` 符号.</span>    <span class="token comment">#   (3) 在文本末尾加入 `[SEP]` 符号.</span>    <span class="token comment">#   (4) 把文本分割后的词序列映射为编号序列.</span>    <span class="token comment">#   (5) 把编号序列添加 `PAD` 符号扩展到 `max_length`.</span>    <span class="token comment">#   (6) 提供一个 `mask` 序列， 值为1表示对应的词不是扩充的，值为0表示对应的词是扩充的空白.</span>    encoded_dict <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>encode_plus<span class="token punctuation">(</span>                        sent<span class="token punctuation">,</span>                      <span class="token comment"># 输入的句子.</span>                        add_special_tokens <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># 添加 '[CLS]', '[SEP]'</span>                        max_length <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>           <span class="token comment"># 扩展到的最大长度.</span>                        pad_to_max_length <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                        return_attention_mask <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>   <span class="token comment"># 提供mask.</span>                        return_tensors <span class="token operator">=</span> <span class="token string">'pt'</span><span class="token punctuation">,</span>     <span class="token comment"># 返回 pytorch tensors.</span>                   <span class="token punctuation">)</span>        <span class="token comment"># 把所有编号序列整合.    </span>    input_ids<span class="token punctuation">.</span>append<span class="token punctuation">(</span>encoded_dict<span class="token punctuation">[</span><span class="token string">'input_ids'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 所有mask整合.</span>    attention_masks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>encoded_dict<span class="token punctuation">[</span><span class="token string">'attention_mask'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个图很简洁明了：</p><p><img src="token.png"></p><p>然后我们把得到的编号序列集和mask集，还有数据集的标签转化为<code>PyTorch</code>需要的形式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_ids <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>attention_masks <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>attention_masks<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>labels <span class="token operator">=</span> index<span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valueslabels <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分割并封装数据集"><a href="#分割并封装数据集" class="headerlink" title="分割并封装数据集"></a>分割并封装数据集</h2><p>我们训练模型是要用上一步得到的<code>input_ids</code>, <code>attention_masks</code>和<code>labels</code>的，我们对数据集做的所有处理最后得到的就是这三个变量，现在对它们做分割，分别用来训练和验证：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> TensorDataset<span class="token punctuation">,</span> random_split<span class="token comment"># 封装进TensorDataset.</span>dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>input_ids<span class="token punctuation">,</span> attention_masks<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>train_size <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.9</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>val_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span> <span class="token operator">-</span> train_size<span class="token comment"># 90%训练，10%验证</span>train_dataset<span class="token punctuation">,</span> val_dataset <span class="token operator">=</span> random_split<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> <span class="token punctuation">[</span>train_size<span class="token punctuation">,</span> val_size<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明两个<code>DataLoader</code>，用于在训练的时候载入数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> RandomSampler<span class="token punctuation">,</span> SequentialSampler<span class="token comment"># 每轮训练输入的数据量，BERT作者推荐的值是16或32</span>batch_size <span class="token operator">=</span> <span class="token number">32</span><span class="token comment"># 两个DataLoaders，分别载入训练集和验证集.</span>train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>            train_dataset<span class="token punctuation">,</span>            sampler <span class="token operator">=</span> RandomSampler<span class="token punctuation">(</span>train_dataset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 随机选择batch训练</span>            batch_size <span class="token operator">=</span> batch_size        <span class="token punctuation">)</span>validation_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>            val_dataset<span class="token punctuation">,</span>            sampler <span class="token operator">=</span> SequentialSampler<span class="token punctuation">(</span>val_dataset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 有序选择batch测试</span>            batch_size <span class="token operator">=</span> batch_size        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="准备训练"><a href="#准备训练" class="headerlink" title="准备训练"></a>准备训练</h2><p>现在打开显卡：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Tell PyTorch to use the GPU.    </span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'There are %d GPU(s) available.'</span> <span class="token operator">%</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>device_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'We will use the GPU:'</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>get_device_name<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># If not...</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'No GPU available, using the CPU instead.'</span><span class="token punctuation">)</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cpu"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的输出是：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">There are 1 GPU(s) available.We will use the GPU: NVIDIA GeForce GTX 1080 Ti<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们来载入BERT文本分类模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> BertForSequenceClassification<span class="token punctuation">,</span> AdamW<span class="token punctuation">,</span> BertConfig<span class="token comment"># 这是一个12层的模型，最后一层输出是标签</span>model <span class="token operator">=</span> BertForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>    <span class="token string">"bert-base-uncased"</span><span class="token punctuation">,</span>    num_labels <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment"># 二分类任务</span>    output_attentions <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token comment"># 不返回 attentions weights.</span>    output_hidden_states <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token comment"># 不返回所有的 hidden-states.</span><span class="token punctuation">)</span><span class="token comment"># 告诉PyTorch这个模型要在GPU上运行</span>model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来设置一个优化器：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">optimizer <span class="token operator">=</span> AdamW<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  lr <span class="token operator">=</span> <span class="token number">2e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment"># 学习率，网络参数的更新系数</span>                  eps <span class="token operator">=</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">8</span> <span class="token comment"># 如果新旧lr之间的差异小于eps，则忽略此次更新</span>                <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再来设置一个学习率调整器，用于让学习率在warm-up（即在<code>num_warmup_steps</code>后升高至<code>optimizer</code>中的预定值）阶段后，然后在<code>total_steps</code>次训练后线性递减至0：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> get_linear_schedule_with_warmup<span class="token comment"># 微调的训练轮次数，BERT作者建议是2~4轮</span>epochs <span class="token operator">=</span> <span class="token number">4</span><span class="token comment">#训练步骤数 [number of batches] x [number of epochs]. </span>total_steps <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span> <span class="token operator">*</span> epochs<span class="token comment"># 学习率调整器</span>scheduler <span class="token operator">=</span> get_linear_schedule_with_warmup<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span>                                             num_warmup_steps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                                            num_training_steps <span class="token operator">=</span> total_steps<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个函数用于计算分类准确率，一个函数用于计算时间消耗：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">flat_accuracy</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">:</span>    pred_flat <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>    labels_flat <span class="token operator">=</span> labels<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>pred_flat <span class="token operator">==</span> labels_flat<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>labels_flat<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">format_time</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 取近似值</span>    elapsed_rounded <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 转化为时分秒</span>    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span>elapsed_rounded<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="微调训练"><a href="#微调训练" class="headerlink" title="微调训练"></a>微调训练</h2><p>现在一切准备就绪，终于可以开始微调模型啦：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 固定随机数种子，使得实验结果可重复</span>seed_val <span class="token operator">=</span> <span class="token number">42</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed_val<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed_val<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed_val<span class="token punctuation">)</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed_val<span class="token punctuation">)</span><span class="token comment"># 存储训练状态</span>training_stats <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 代码开始运行的时间</span>total_t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 每一轮训练：</span><span class="token keyword">for</span> epoch_i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># ========================================</span>    <span class="token comment">#               训练过程</span>    <span class="token comment"># ========================================</span>        <span class="token comment"># Perform one full pass over the training set.</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======== Epoch {:} / {:} ========'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch_i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training...'</span><span class="token punctuation">)</span>    <span class="token comment"># 当前时间</span>    t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 本轮训练loss</span>    total_train_loss <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 把BERT模型设置为训练状态</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 每个Batch的数据：</span>    <span class="token keyword">for</span> step<span class="token punctuation">,</span> batch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 设置每40个batch输出一次log</span>        <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">40</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">not</span> step <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># 时间消耗</span>            elapsed <span class="token operator">=</span> format_time<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0<span class="token punctuation">)</span>                        <span class="token comment"># 训练进程</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  Batch {:&gt;5,}  of  {:&gt;5,}.    Elapsed: {:}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 把当前batch的数据上传到GPU</span>        b_input_ids <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        b_input_mask <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        b_labels <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token comment"># 清除之前的梯度，准备下一次训练</span>        model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 得到一个输出和loss</span>        output <span class="token operator">=</span> model<span class="token punctuation">(</span>b_input_ids<span class="token punctuation">,</span> token_type_ids<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> attention_mask<span class="token operator">=</span>b_input_mask<span class="token punctuation">,</span> labels<span class="token operator">=</span>b_labels<span class="token punctuation">)</span>        loss <span class="token operator">=</span> output<span class="token punctuation">.</span>loss        logits <span class="token operator">=</span> output<span class="token punctuation">.</span>logits        <span class="token comment"># 累积loss</span>        total_train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 前向传递参数</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 梯度裁剪，防止梯度爆炸，将梯度约束在某一个区间之内，在训练的过程中，在优化器更新之前进行梯度截断操作</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>clip_grad_norm_<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>        <span class="token comment"># 更新参数</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 更新学习率</span>        scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 计算所有batch的平均loss</span>    avg_train_loss <span class="token operator">=</span> total_train_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span>                    <span class="token comment"># 计算本轮训练花费的时间</span>    training_time <span class="token operator">=</span> format_time<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Average training loss: {0:.2f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>avg_train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Training epcoh took: {:}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>training_time<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># ========================================</span>    <span class="token comment">#               验证</span>    <span class="token comment"># ========================================</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Running Validation..."</span><span class="token punctuation">)</span>    t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 把模型设置为验证模式</span>    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    total_eval_accuracy <span class="token operator">=</span> <span class="token number">0</span>    total_eval_loss <span class="token operator">=</span> <span class="token number">0</span>    nb_eval_steps <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 逐batch验证</span>    <span class="token keyword">for</span> batch <span class="token keyword">in</span> validation_dataloader<span class="token punctuation">:</span>                b_input_ids <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        b_input_mask <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        b_labels <span class="token operator">=</span> batch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                <span class="token comment"># 设置模型无需不跟踪梯度，跟踪梯度是训练的时候要做的</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># logits是模型输出结果</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span>b_input_ids<span class="token punctuation">,</span> token_type_ids<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> attention_mask<span class="token operator">=</span>b_input_mask<span class="token punctuation">,</span> labels<span class="token operator">=</span>b_labels<span class="token punctuation">)</span>            loss <span class="token operator">=</span> output<span class="token punctuation">.</span>loss            logits <span class="token operator">=</span> output<span class="token punctuation">.</span>logits                    <span class="token comment"># 累计loss</span>        total_eval_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 从GPU转移到CPU</span>        logits <span class="token operator">=</span> logits<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        label_ids <span class="token operator">=</span> b_labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 累计准确率</span>        total_eval_accuracy <span class="token operator">+=</span> flat_accuracy<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> label_ids<span class="token punctuation">)</span>            <span class="token comment"># 平均准确率</span>    avg_val_accuracy <span class="token operator">=</span> total_eval_accuracy <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataloader<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Accuracy: {0:.2f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>avg_val_accuracy<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 平均loss</span>    avg_val_loss <span class="token operator">=</span> total_eval_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>validation_dataloader<span class="token punctuation">)</span>        <span class="token comment"># 验证模型过程的时间消耗</span>    validation_time <span class="token operator">=</span> format_time<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Validation Loss: {0:.2f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>avg_val_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Validation took: {:}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>validation_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 记录起来</span>    training_stats<span class="token punctuation">.</span>append<span class="token punctuation">(</span>        <span class="token punctuation">{</span>            <span class="token string">'epoch'</span><span class="token punctuation">:</span> epoch_i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">'Training Loss'</span><span class="token punctuation">:</span> avg_train_loss<span class="token punctuation">,</span>            <span class="token string">'Valid. Loss'</span><span class="token punctuation">:</span> avg_val_loss<span class="token punctuation">,</span>            <span class="token string">'Valid. Accur.'</span><span class="token punctuation">:</span> avg_val_accuracy<span class="token punctuation">,</span>            <span class="token string">'Training Time'</span><span class="token punctuation">:</span> training_time<span class="token punctuation">,</span>            <span class="token string">'Validation Time'</span><span class="token punctuation">:</span> validation_time        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Training complete!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total training took {:} (h:mm:ss)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>format_time<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>total_t0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练花费的时间并不长，很快就可以训练完毕。经过验证，分类准确率在97%以上。虽然看起来没比之前的机器学习模型高，但我们的数据集毕竟是个简单任务呢。而且BERT预训练模型最时髦呀~~~</p><blockquote><p>Running Validation…<br>  Accuracy: 0.97<br>  Validation Loss: 0.12<br>  Validation took: 0:00:13</p><p>Training complete!<br>Total training took 0:26:04 (h:mm:ss)</p></blockquote><p><code>max_length</code>的大小我咨询了专业人士，表示一般64足够了，一般不超过200。其他的我暂时感觉没什么问题了。</p><h2 id="更换中文预训练模型"><a href="#更换中文预训练模型" class="headerlink" title="更换中文预训练模型"></a>更换中文预训练模型</h2><p>更换其他预训练模型的方法很简单，在<a href="https://huggingface.co/models">Hugging Face/Models</a>里搜索Chinese，或者筛选语言<code>zh</code>，找个模型，把名字复制过来，替换掉上面代码中的所有<code>bert-base-uncased</code>即可。</p><p>我这里更换的是中文模型里面下载量最大的<a href="https://huggingface.co/hfl/chinese-roberta-wwm-ext">hfl/chinese-roberta-wwm-ext</a>，进行1轮微调，准确率就已经达到了99%；经过10轮微调，准确率已经达到100%了。很优秀。</p><p>而且BERT有个好处，就是不需要自定义词典，因为token是按照字做的而不是按照词做的。</p><blockquote><p>Running Validation…<br>  Accuracy: 1.00<br>  Validation Loss: 0.04<br>  Validation took: 0:00:13</p><p>Training complete!<br>Total training took 1:04:12 (h:mm:ss)</p></blockquote><p>这节课就是这样啦，怎么样，是不是很好玩<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微调transformers BERT文本分类预训练模型</title>
      <link href="/2021/11/01/%E5%BE%AE%E8%B0%83transformers%20BERT%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/11/01/%E5%BE%AE%E8%B0%83transformers%20BERT%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="微调transformers-BERT文本分类预训练模型"><a href="#微调transformers-BERT文本分类预训练模型" class="headerlink" title="微调transformers BERT文本分类预训练模型"></a>微调transformers BERT文本分类预训练模型</h1><p>本节我们为Hugging Face的transformers包中提供的文本分类预训练模型做一个Fine-tune，即微调，令其更适应于我们使用的数据集，并做一个分类任务。</p><p>主要参考了<code>transformers</code>官方文档中的<a href="https://huggingface.co/transformers/training.html#fine-tuning-in-pytorch-with-the-trainer-api">fine-tune一节</a>，使用的数据集是Hugging Face提供的封装好的数据集。</p><p>本文使用<code>PyTorch</code>深度学习框架，在<code>GTX 1080ti</code>显卡上运行。</p><h2 id="数据集载入与tokenize"><a href="#数据集载入与tokenize" class="headerlink" title="数据集载入与tokenize"></a>数据集载入与tokenize</h2><p>首先使用同样是Hugging Face提供的datasets包载入数据集IMDB，这是一个影评数据集：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_datasetraw_datasets <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">"imdb"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该数据集已经划分好了<code>train</code>,<code>test</code>, <code>unsupervised</code>集，直接使用即可。</p><p>然后使用预训练模型进行分词与向量化tokenize：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizertokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"bert-base-cased"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的<code>tokenizer</code>可以把文本映射为512维的向量。然后把<code>raw_datasets</code>中的所有文本进行一下映射：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tokenize_function</span><span class="token punctuation">(</span>examples<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tokenizer<span class="token punctuation">(</span>examples<span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"max_length"</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>tokenized_datasets <span class="token operator">=</span> raw_datasets<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>tokenize_function<span class="token punctuation">,</span> batched<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Fine-tune"><a href="#Fine-tune" class="headerlink" title="Fine-tune"></a>Fine-tune</h2><p>先从数据集中筛选一个较小的部分：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">small_train_dataset <span class="token operator">=</span> tokenized_datasets<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>small_eval_dataset <span class="token operator">=</span> tokenized_datasets<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>full_train_dataset <span class="token operator">=</span> tokenized_datasets<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span>full_eval_dataset <span class="token operator">=</span> tokenized_datasets<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义我们的文本分类模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModelForSequenceClassificationmodel <span class="token operator">=</span> AutoModelForSequenceClassification<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">"bert-base-cased"</span><span class="token punctuation">,</span> num_labels<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就可以进行微调啦：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> TrainingArguments<span class="token keyword">from</span> transformers <span class="token keyword">import</span> Trainertraining_args <span class="token operator">=</span> TrainingArguments<span class="token punctuation">(</span><span class="token string">"test_trainer"</span><span class="token punctuation">)</span>trainer <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>    model<span class="token operator">=</span>model<span class="token punctuation">,</span> args<span class="token operator">=</span>training_args<span class="token punctuation">,</span> train_dataset<span class="token operator">=</span>small_train_dataset<span class="token punctuation">,</span> eval_dataset<span class="token operator">=</span>small_eval_dataset<span class="token punctuation">)</span>trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练完毕后是验证结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_metricmetric <span class="token operator">=</span> load_metric<span class="token punctuation">(</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">compute_metrics</span><span class="token punctuation">(</span>eval_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    logits<span class="token punctuation">,</span> labels <span class="token operator">=</span> eval_pred    predictions <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> metric<span class="token punctuation">.</span>compute<span class="token punctuation">(</span>predictions<span class="token operator">=</span>predictions<span class="token punctuation">,</span> references<span class="token operator">=</span>labels<span class="token punctuation">)</span>trainer <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>    model<span class="token operator">=</span>model<span class="token punctuation">,</span>    args<span class="token operator">=</span>training_args<span class="token punctuation">,</span>    train_dataset<span class="token operator">=</span>small_train_dataset<span class="token punctuation">,</span>    eval_dataset<span class="token operator">=</span>small_eval_dataset<span class="token punctuation">,</span>    compute_metrics<span class="token operator">=</span>compute_metrics<span class="token punctuation">,</span><span class="token punctuation">)</span>trainer<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我在本地跑下来的结果是：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">'eval_loss': 0.5007675886154175, 'eval_accuracy': 0.887, 'eval_runtime': 18.8074, 'eval_samples_per_second': 53.171, 'eval_steps_per_second': 6.646<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分类准确率为88.7%. </p><p>真的很棒呢，不用花费大量时间训练就可以得到这样的效果。后面进一步研究，应该还会有提高<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>一起加油吧，小仙女~<span class="github-emoji"><span>🤜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f91c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🤛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f91b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hugging Face与NLP预训练模型</title>
      <link href="/2021/11/01/Hugging%20Face%E4%B8%8ENLP%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/11/01/Hugging%20Face%E4%B8%8ENLP%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Hugging-Face与NLP预训练模型"><a href="#Hugging-Face与NLP预训练模型" class="headerlink" title="Hugging Face与NLP预训练模型"></a>Hugging Face与NLP预训练模型</h1><p>这一节我们来学习基于Hugging Face的NLP预训练模型的使用方式，包括Bert。</p><p>先来了解一些背景知识。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><p>我们前面用的BOW，贝叶斯，SVM，LR，XGBoost都是传统机器学习范畴，深度学习的特点是通过设计不同的神经网络来完成各种任务，自从兴起以来，它在分类、监测、识别、生成等领域取得了远声誉传统机器学习方法的效果，已经成为人工智能的代名词。</p><p><img src="alexnet.png" alt="Alexnet"></p><p><img src="resnet.svg" alt="Resnet"></p><p><img src="densenet.png" alt="Densenet"></p><p><img src="RNN.png" alt="RNN"></p><h3 id="预训练与微调"><a href="#预训练与微调" class="headerlink" title="预训练与微调"></a>预训练与微调</h3><p>预训练是让某一神经网络从大规模数据中获得与具体任务无关的参数的训练，并将得到的参数和模型保存出来。它采用的数据规模是如此之大，以至于不论我们在具体任务中用的什么类型的数据，都已经被它学习过了，都可以胜任我们的任务。</p><p>如果我们觉得还不放心，或者存在标签不一致的问题，还可以做一下<strong>微调</strong>，即再在我们的数据上做一个简单训练，让预训练参数适应于我们的数据，然后再进行测试。</p><h3 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h3><p>BERT全称为Bidirectional Encoder Representation from Transformers，即双向Transformer的Encoder。模型的主要创新点都在pre-train方法上，通过预训练和精调横扫了11项NLP任务，提出当年就成为NLP领域大火、整个人工智能学界都有所耳闻的模型。目前已经是NLP领域里程碑式的方法。</p><blockquote><p>Devlin J, Chang M W, Lee K, et al. Bert: Pre-training of deep bidirectional transformers for language understanding[J]. arXiv preprint arXiv:1810.04805, 2018.</p></blockquote><h3 id="Hugging-Face"><a href="#Hugging-Face" class="headerlink" title="Hugging Face"></a>Hugging Face</h3><p><img src="huggingface.png" alt="Hugging Face"></p><p><a href="https://huggingface.co/">Hugging Face</a>是一家总部位于纽约的聊天机器人初创服务商，但更令它广为人知的是Hugging Face专注于NLP技术，拥有大型的开源社区。尤其是在github上开源的自然语言处理预训练模型库 Transformers，已被下载超过一百万次，github上超过24000个star。Transformers 提供了NLP领域大量state-of-art的预训练语言模型结构的模型和调用框架。</p><p>简单来说就是Hugging Face提供了一个库，名为 Transformers，包含大量预训练模型，以供人们使用。</p><p>为什么使用<code>transformers</code>？</p><ul><li>表现优越，高级抽象，只有三个类，对所有模型有同一的API；</li><li>社区中有研究人员分享的数十种亿万级的模型架构、两千多个预训练模型、100多种语言支持，不止BERT；</li><li>使用简单。</li></ul><h2 id="使用Hugging-Face的预训练模型"><a href="#使用Hugging-Face的预训练模型" class="headerlink" title="使用Hugging Face的预训练模型"></a>使用Hugging Face的预训练模型</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先是安装Hugging Face的<code>transformers</code>包。这个包依赖于Python 3.6+、Flax 0.3.2+、PyTorch 1.3.1+ 和 TensorFlow 2.3+等环境，最好在有深度学习级GPU的电脑上进行安装。配置好依赖后，使用<code>pip</code>进行安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip install transformers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p><code>transformers</code>提供了 <code>pipeline</code> （流水线）API，聚合了多种多样的预训练模型和对应的文本预处理。</p><p>下面是一个快速使用流水线去判断正负面情绪的例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;&gt;&gt; from transformers import pipeline# 使用情绪分析流水线&gt;&gt;&gt; classifier = pipeline('sentiment-analysis')&gt;&gt;&gt; print(classifier('I love you more and more each day as time goes by'))[{'label': 'POSITIVE', 'score': 0.9998432397842407}]&gt;&gt;&gt; print(classifier('有你的每一天都很开心'))[{'label': 'POSITIVE', 'score': 0.662761926651001}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二行代码下载并缓存了 <code>pipeline</code> 使用的默认预训练模型，而第三行代码则在给定的文本上进行了评估。这里的<code>sore</code>表示答案“正面” (positive) 具有 99 %的置信度。</p><p>下面是一个简单的从给定文本中抽取问题答案的例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt;&gt;&gt; from transformers import pipeline# 使用问答流水线&gt;&gt;&gt; question_answerer = pipeline('question-answering')&gt;&gt;&gt; question_answerer({...     'question': 'What is the name of the repository ?',...     'context': 'Pipeline has been included in the huggingface/transformers repository'... }){'score': 0.30970096588134766, 'start': 34, 'end': 58, 'answer': 'huggingface/transformers'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了给出答案，预训练模型还给出了对应的置信度分数、答案在词符化 (tokenized) 后的文本中开始和结束的位置。</p><h3 id="使用非默认的其他预训练模型"><a href="#使用非默认的其他预训练模型" class="headerlink" title="使用非默认的其他预训练模型"></a>使用非默认的其他预训练模型</h3><p><a href="https://huggingface.co/models">Hugging Face Models</a> 提供了很多其他模型供我们使用，我们来导入一个非默认的模型<a href="https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment">nlptown/bert-base-multilingual-uncased-sentiment</a>，这是一个基于BERT的模型，可以做判断正负面情绪的工作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> classifier <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">'sentiment-analysis'</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">"nlptown/bert-base-multilingual-uncased-sentiment"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>classifier<span class="token punctuation">(</span><span class="token string">'I love you more and more each day as time goes by'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string">'5 stars'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.8776088356971741</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>classifier<span class="token punctuation">(</span><span class="token string">'心有领导，永远忠诚'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string">'5 stars'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.6939144730567932</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>classifier<span class="token punctuation">(</span><span class="token string">'我讨厌渣男'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'label'</span><span class="token punctuation">:</span> <span class="token string">'1 star'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.41145384311676025</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见这个模型会把文本分为<code>1 star</code>到<code>5 star</code>的不同等级。星级越高，该文本表达的情绪越积极。</p><p>再来看一个<code>fill-mask</code>填词任务，我们导入的是预训练模型<a href="https://huggingface.co/hfl/chinese-roberta-wwm-ext">hfl/chinese-roberta-wwm-ext</a>，这也是一基于BERT的模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> transformers <span class="token keyword">import</span> pipeline<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> maskfiller <span class="token operator">=</span> pipeline<span class="token punctuation">(</span><span class="token string">'fill-mask'</span><span class="token punctuation">,</span> model <span class="token operator">=</span> <span class="token string">"hfl/chinese-roberta-wwm-ext"</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>maskfiller<span class="token punctuation">(</span><span class="token string">'我爱[MASK]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'我 爱 你'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.9170712828636169</span><span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">872</span><span class="token punctuation">,</span> <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'你'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'我 爱 他'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.02408534474670887</span><span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">' 他'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'我 爱 她'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.014233492314815521</span><span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">1961</span><span class="token punctuation">,</span> <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'她'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'我 爱 我'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.005949386395514011</span><span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">2769</span><span class="token punctuation">,</span> <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'我'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'sequence'</span><span class="token punctuation">:</span> <span class="token string">'我 爱 您'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">0.0037280190736055374</span><span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token number">2644</span><span class="token punctuation">,</span> <span class="token string">'token_str'</span><span class="token punctuation">:</span> <span class="token string">'您'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>怎么样，是不是很好玩<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋思（其一）</title>
      <link href="/2021/10/28/%E7%A7%8B%E6%80%9D%EF%BC%88%E5%85%B6%E4%B8%80%EF%BC%89/"/>
      <url>/2021/10/28/%E7%A7%8B%E6%80%9D%EF%BC%88%E5%85%B6%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="秋思（其一）"><a href="#秋思（其一）" class="headerlink" title="秋思（其一）"></a>秋思（其一）</h1><p>云边鸿雁送秋风，欲寄相思意万重。</p><p>为谁倾倒为谁狂，忽如梦醒已三生。</p><p><img src="qiuyan.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
            <tag> 油先生选集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于BOW实现垃圾邮件分类</title>
      <link href="/2021/10/21/%E5%9F%BA%E4%BA%8EBOW%E5%AE%9E%E7%8E%B0%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
      <url>/2021/10/21/%E5%9F%BA%E4%BA%8EBOW%E5%AE%9E%E7%8E%B0%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="基于BOW实现垃圾邮件分类"><a href="#基于BOW实现垃圾邮件分类" class="headerlink" title="基于BOW实现垃圾邮件分类"></a>基于BOW实现垃圾邮件分类</h1><p>上一节我们基于朴素贝叶斯的词频统计，做了垃圾邮件分类，这一节我们采用BOW模型，在相同数据集上使用BOW模型再次进行分类任务，并且使用各种经典的机器学习模型。</p><h2 id="jieba加入自定义词典"><a href="#jieba加入自定义词典" class="headerlink" title="jieba加入自定义词典"></a>jieba加入自定义词典</h2><p>首先我们来做一个自定义分词功能，以备后面需要之用。看下面这段代码，这段代码展示了如何在<code>jieba</code>中加入自定义分词：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jiebatext <span class="token operator">=</span> '平安银行是一家总部设在深圳的全国性股份制商业银行（SZ000001）。\其前身深圳发展银行是中国内地首家公开上市的全国性股份制银行。中国平安及其控股子公司为本行控股股东。\截至<span class="token number">2021</span>年<span class="token number">6</span>月，本集团在职员工共<span class="token number">37</span><span class="token punctuation">,</span><span class="token number">384</span> 人，通过<span class="token number">101</span>家分行及<span class="token number">1110</span>家营业机构为客户提供多种金融服务。'result <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment"># cut返回一个generater，lcut返回一个list</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>jieba<span class="token punctuation">.</span>load_userdict<span class="token punctuation">(</span><span class="token string">r'my_dict.txt'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>my_dict.txt</code>为我们的自定义词典，一行一个自定义词，这里的内容为：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">平安银行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行代码可知，<code>jieba</code>原本会将<code>平安银行</code>分成两个词<code>平安</code>和<code>银行</code>，加入自定义词典之后就不会了。</p><h2 id="BOW模型与scikit-learn调用"><a href="#BOW模型与scikit-learn调用" class="headerlink" title="BOW模型与scikit-learn调用"></a>BOW模型与scikit-learn调用</h2><p><img src="bow1.jpg" alt="BOW-NLP"></p><p><img src="bow2.jpg" alt="BOW-CV"></p><p>本着奥卡姆剃刀的原则，我们就不自己实现算法了，直接调用sklearn中的BOW模型实现CountVectorizer。</p><p>在分类器方面，我们在这里采用比较经典的四种机器学习分类器：</p><ul><li>朴素高斯贝叶斯：一种基于词频统计、概率先验、高斯函数的分类器；</li><li>逻辑回归：与传统线性回归稍有区别的一种回归模型，常用于二分类；</li><li>SVC：支持向量机SVM的分类应用模型；</li><li>XGBoost：一种基于决策树的分类算法。</li></ul><p>我们在上一篇代码的基础上来进行修改。整体代码如下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> re<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> codecs<span class="token keyword">import</span> jieba<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> linear_model<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNB<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC<span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBClassifier<span class="token keyword">from</span> xgboost <span class="token keyword">import</span> plot_importance<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> metrics<span class="token keyword">def</span> <span class="token function">load_formatted_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    加载格式化后的标签-路径列表    spam列为1代表是垃圾邮件，0代表普通邮件    path列代表该邮件路径    :return:(DataFrame)index    """</span>    <span class="token comment"># 加载数据集</span>    index <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 读入是两列，一列spam 一列path</span>    index<span class="token punctuation">.</span>spam <span class="token operator">=</span> index<span class="token punctuation">.</span>spam<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'spam'</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 数据标签，标签为spam的设置为1 否则设置为0</span>    index<span class="token punctuation">.</span>path <span class="token operator">=</span> index<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 更改文件路径</span>    <span class="token keyword">return</span> index<span class="token keyword">def</span> <span class="token function">load_stop_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读出停用词列表    :return: (List)_stop_words    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 载入停用词列表</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读入所有行，得到一个包含多个字符串的list，一行是一个字符串</span>    _stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">]</span> <span class="token comment"># 舍弃掉所有换行符</span>    <span class="token keyword">return</span> _stop_words<span class="token keyword">def</span> <span class="token function">get_mail_content</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> stop_words_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    遍历得到每封邮件的词汇字符串    :param path: 邮件路径    :return:(Str)content    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"gbk"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 以gbk编码打开文件，忽略错误</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读入所有行，得到一个包含多个字符串的list，一行是一个字符串</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>            <span class="token comment"># 去除第一个空行，即在第一个空行之前的邮件协议内容全部舍弃</span>            lines <span class="token operator">=</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># strip()是丢弃换行符，split()是按照空格分隔开（起到剔除多个空格只留下一个空格的作用），然后再join在一起</span>    <span class="token comment"># print(content)</span>    content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">u"[\u4e00-\u9fa5]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token comment"># 只保留汉字</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token comment"># 拼起来</span>    word_list_temp <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token comment"># 使用jieba进行分词</span>    word_list <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_list_temp<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words_list<span class="token punctuation">:</span> <span class="token comment"># 去掉空词和停止词</span>            word_list <span class="token operator">+=</span> word <span class="token operator">+</span> <span class="token string">' '</span>    <span class="token keyword">return</span> word_list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    index_list <span class="token operator">=</span> load_formatted_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_words <span class="token operator">=</span> load_stop_word<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># get_mail_content(index_list.path[0])</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'邮件内容读取与分词'</span><span class="token punctuation">)</span>    index_list<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index_list<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> get_mail_content<span class="token punctuation">(</span>x<span class="token punctuation">,</span> stop_words<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对content列使用函数，得到邮件内容</span>    words <span class="token operator">=</span> index_list<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    vectorizer <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>max_features<span class="token operator">=</span><span class="token number">4000</span><span class="token punctuation">,</span> min_df<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 词典最大长度4k，频率高于100的词才统计</span>    vectorizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bag_of_words模型的总词汇数量："</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vectorizer<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 分割数据集</span>    data <span class="token operator">=</span> vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>index_list<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span>    label <span class="token operator">=</span> index_list<span class="token punctuation">.</span>spam<span class="token punctuation">.</span>values    X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span> data<span class="token punctuation">,</span> label<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token comment"># 标准化</span>    scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    X_train <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>    X_test <span class="token operator">=</span> scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    classifier <span class="token operator">=</span> SVC<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>    classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SVM算法的分类准确率为{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    classifier <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>    classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'XGBoost算法的分类准确率为{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    classifier <span class="token operator">=</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span>    classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'朴素贝叶斯算法的分类准确率为{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    classifier <span class="token operator">=</span> linear_model<span class="token punctuation">.</span>LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>    classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逻辑回归算法的分类准确率为{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些具体的参数我们后面要用的话可以继续深入调节，这里都尽量只使用默认参数。实验结果可知，在20%数据用作训练姐，80%数据用作测试集的分类准确率大致如下：</p><table><thead><tr><th>SVC模型</th><th>朴素高斯贝叶斯模型</th><th>逻辑回归模型</th><th>XGBoost模型</th></tr></thead><tbody><tr><td>63.94%</td><td>88.56%</td><td>98.93%</td><td>98.85%</td></tr></tbody></table><h2 id="TfidfVectorizer与HashingVectorizer"><a href="#TfidfVectorizer与HashingVectorizer" class="headerlink" title="TfidfVectorizer与HashingVectorizer"></a>TfidfVectorizer与HashingVectorizer</h2><p>sklearn中还有另外两种类似于BOW模型的<code>TfidfVectorizer</code>和<code>HashingVectorizer</code>：</p><ul><li><code>TfidfVectorizer</code>即<code>TF-IDF</code>算法，认为一个词语在一篇文章中出现次数越多，同时在所有文档中出现次数越少，越能够代表该文章；</li><li><code>HashingVectorizer</code>主要是采用哈希算法，在词库很大的时候，能将词向量进行哈希操作，便于存储。</li></ul><p>二者基本用法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> HashingVectorizercorpus <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'This is the first document.'</span><span class="token punctuation">,</span>     <span class="token string">'This document is the second document.'</span><span class="token punctuation">,</span>     <span class="token string">'And this is the third one.'</span><span class="token punctuation">,</span>     <span class="token string">'Is this the first document?'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>vectorizer <span class="token operator">=</span> TfidfVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>vectorizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>corpus<span class="token punctuation">)</span>vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>corpus<span class="token punctuation">)</span><span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span>vectorizer <span class="token operator">=</span> HashingVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>vectorizer<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>corpus<span class="token punctuation">)</span>vectorizer<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>corpus<span class="token punctuation">)</span><span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接替换上一节代码中的<code>CountVectorizer</code>部分即可。</p><p>怎么样，是不是很简单呀<span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>加油吧，小仙女~</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九叶重楼 相思怎解</title>
      <link href="/2021/10/20/%E4%B9%9D%E5%8F%B6%E9%87%8D%E6%A5%BC-%E7%9B%B8%E6%80%9D%E6%80%8E%E8%A7%A3/"/>
      <url>/2021/10/20/%E4%B9%9D%E5%8F%B6%E9%87%8D%E6%A5%BC-%E7%9B%B8%E6%80%9D%E6%80%8E%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="九叶重楼-相思怎解"><a href="#九叶重楼-相思怎解" class="headerlink" title="九叶重楼 相思怎解"></a>九叶重楼 相思怎解</h1><blockquote><p>我问大夫，什么药可以医相思之苦。</p><p>大夫说：“九叶重楼二两，冬至蝉蛹一钱，煎入隔年雪， 可医世人相思疾苦。“</p><p>可重楼七叶一枝花，冬至何来蝉蛹，雪又怎能隔年，终是相思无解。</p><p>大夫说，殊不知夏枯即为九重楼，掘地三尺寒蝉现，除夕子时雪，落地已隔年，过了离别时，相思亦可解。</p></blockquote><p><em>注：重楼是一味中药，有七片叶子一朵花；夏枯草也是一味中药，又名九重楼。</em></p>]]></content>
      
      
      <categories>
          
          <category> 悦读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All This I Did Without You (Gerald Durrell)</title>
      <link href="/2021/10/20/All-This-I-Did-Without-You-Gerald-Durrell/"/>
      <url>/2021/10/20/All-This-I-Did-Without-You-Gerald-Durrell/</url>
      
        <content type="html"><![CDATA[<h1 id="All-This-I-Did-Without-You"><a href="#All-This-I-Did-Without-You" class="headerlink" title="All This I Did Without You"></a>All This I Did Without You</h1><p>这是Gerald Durrell 1978年写给未婚妻Lee McGeorge的情书。Gerald Durrell是一位英国动物学家、主持人和作家，泽西动物园的创办人，与Lee在1977年第一次见面，两年后二人结婚，到1995年Durrell去世时，他们一起探秘了很多的保护区，合著了两本书《业余博物学家的实用指南》和 《Durrell在俄罗斯》。</p><h2 id="Tom-Hiddleston-在-Letters-Live-的朗读"><a href="#Tom-Hiddleston-在-Letters-Live-的朗读" class="headerlink" title="Tom Hiddleston 在 Letters Live 的朗读"></a>Tom Hiddleston 在 Letters Live 的朗读</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/PE4msFl_Boo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>July 31st, 1978</p><p>My darling McGeorge,</p><p>You said that things seemed clearer when they were written down. Well, herewith is a very boring letter in which I will try and put everything down so that you may read and re-read it <em>in horror</em> at your folly in getting involved with me. Deep breath.</p><p>To begin with, I love you with a depth and passion that I have felt for no one else in this life and if it astonishes you it astonishes me as well. Not — I hasten to say — because you are not worth loving. Far from it. It’s just that, first of all, I swore I would not get involved with another woman. Secondly, I have never had such a feeling before and it is almost frightening. Thirdly, I would never have thought it possible that another human being could occupy my waking (and sleeping) thoughts to the exclusion of almost everything else.</p><p>Fourthly, I never thought that — even if one was in love — one could get so completely besotted with another person so that a minute away from them felt like a thousand years.</p><p>Fifthly, I never hoped, aspired, dreamed that one could find everything one wanted in a person. <em>I was not such an idiot as to believe this was possible.</em> Yet, in you, I have found everything I want: you are beautiful, gay, giving, gentle, idiotically and deliciously feminine, sexy, wonderfully intelligent and wonderfully silly as well. I want nothing else in this life than to be with you, to listen and watch you — your beautiful voice, your beauty — to argue with you, to laugh with you, to show you things and share things with you, to explore your magnificent mind, to explore your wonderful body, to help you, protect you, serve you, and bash you on the head when I think you are wrong… not to put too fine a point on it I consider that I am <em>the only man outside mythology</em> to have found the crock of gold at the rainbow’s end.</p><p>But — having said all that — let us consider things in detail. Don’t let this become public but… well, I have one or two faults. Minor ones, I hasten to say. For example, I am inclined to be overbearing. I do it for the best possible motives (all tyrants say that) but I do tend (without thinking) to tread people underfoot. You must tell me when I am doing it to you, my sweet, because it can be a very bad thing in a marriage.</p><p>Right. Second blemish. This, actually, is not so much a blemish of character as a blemish of circumstance. Darling, I want you to be you in your own right, and I will do everything I can to help you in this. But you must take into consideration that I am also me in my own right and that I have a headstart on you… what I am trying to say is that you mustn’t feel offended if you are sometimes treated simply as my wife. (Always remember that what you lose on the swings, you gain on the roundabouts). But, I am an established creature in the world, and so — on occasions — you will have to live in my shadow. Nothing gives me less pleasure than this but it is a fact of life that has to be faced.</p><p>Third (and very important and nasty) blemish: jealousy. I don’t think you know what jealousy is — thank God — in the real sense of the word. I know you have felt jealousy over Lincoln’s wife and child but this is what I call normal jealousy, and this — to my regret — is not what I’ve got. What I have got is a black monster that can pervert my good sense, my good humour and any goodness that I have in my make-up. It is really a Jekyll and Hyde situation… my Hyde is stronger than my good sense and defeats me, hard though I try. As I told you, I have always known that this lurks within me, but I could control it, and my monster slumbered and nothing happened to awake it. Then I met you… and I felt my monster stir and become half awake when you told me of Lincoln and others you have known and, with your letter, my monster came out of its lair — <em>black, irrational, bigoted, stupid, evil, malevolent</em>. You will never know how terribly corrosive jealousy is; it is a physical pain as though you had swallowed acid or red hot coals. It is the most terrible of feelings. But you can’t help it — at least I can’t. God knows I’ve tried. I don’t want any ex-boyfriends sitting in church when I marry you. On our wedding day, I want nothing but happiness, both for you and me, and I know I won’t be happy if there is a church full of your ex-conquests. <strong>When I marry you I will have no past, only a future:</strong> I don’t want to drag my past into our future and I don’t want you to do it, either. Remember, I am jealous of you because I love you. You are never jealous of something you don’t care about. OK, enough about jealousy.</p><p><img src="picture.jfif" alt="Gerald Durrell and Lee McGeorge"></p><p>Now, let me tell you something… I have seen a thousand sunsets and sunrises; on land where it floods forests and mountains with honey-coloured light; at sea where it rises and sets like a blood orange in a multi-coloured nest of cloud, slipping in and out of the vast ocean. I have seen a thousand moons: harvest moons like gold coins, <em>winter moons as white as ice chips</em>, new moons <em>like baby swans’ feathers</em>.</p><p>I have seen seas as smooth as if painted, *<strong>coloured like shot silk*</strong> or blue as a kingfisher or transparent as glass or black and crumpled with foam, <em>moving ponderously and murderously</em>.</p><p>I have felt winds straight from the South Pole, bleak and wailing like a lost child; winds as tender and warm as a lover’s breath; winds that carried the astringent smell of salt and the death of seaweeds; winds that carried the moist rich smell of a forest floor — the smell of a million flowers. Fierce winds that churned and moved the sea like yeast, or winds that made the waters lap at the shore like a kitten.</p><p>I have known silence: the cold, earthy silence at the bottom of a newly dug well; the implacable stony silence of a deep cave; the hot, drugged, midday silence when everything is hypnotized and stilled into silence by the eye of the sun; <em>the silence when great music ends</em>.</p><p>I have heard summer cicadas cry so that *<strong>the sound seems stitched into your bones*</strong>. I have heard tree frogs in an orchestration as complicated as Bach singing in a forest lit by a million emerald fireflies. I have heard the Keas calling over grey glaciers that groaned to themselves *<strong>like old people as they inched their way to the sea*</strong>. I have heard the hoarse street vendor cries of the mating fur seals as they sang to their sleek golden wives, the crisp staccato admonishment of the rattlesnake, *<strong>the cobweb squeak*</strong> of the bat and the belling roar of *<strong>the red deer knee-deep in purple heather*</strong>. I have heard wolves baying at a winter’s moon, red howlers making the forest vibrate with their roaring cries. I have heard the squeak, purr, and grunt of a hundred multi-coloured reef fishes.</p><p>I have seen hummingbirds flashing like opals round a tree of scarlet blooms, humming like a top. I have seen flying fish, skittering like quicksilver across the blue waves, drawing silver lines on the surface with their tails. I have seen spoonbills flying home to roost like a scarlet banner across the sky. <em>I have seen whales, black as tar,</em> *<strong>cushioned on a cornflower blue sea*</strong>, creating a Versailles of fountain with their breath. I have watched butterflies emerge and sit, trembling, *<strong>while the sun irons their wings smooth*</strong>. <em>I have watched tigers, like flames</em>, mating in the long grass. I have been dive-bombed by an angry raven, black and glossy as the Devil’s hoof. <em>I have lain in water warm as milk, soft as silk</em>, while around me played a host of dolphins. I have met a thousand animals and seen a thousand wonderful things…</p><p>All this I did without you. <em>This was my loss.</em></p><p>All this I want to do with you. This will be my gain.</p><p>All this I would gladly have forgone for the sake of one minute of your company, for your laugh, your voice, your eyes, hair, lips, body, and above all for your sweet, ever-surprising mind which is an enchanting quarry in which it is my privilege to delve.</p><p>很感人的文字呢。</p>]]></content>
      
      
      <categories>
          
          <category> 悦读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯分类器实现垃圾邮件分类</title>
      <link href="/2021/10/19/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
      <url>/2021/10/19/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="朴素贝叶斯分类器实现垃圾邮件分类"><a href="#朴素贝叶斯分类器实现垃圾邮件分类" class="headerlink" title="朴素贝叶斯分类器实现垃圾邮件分类"></a>朴素贝叶斯分类器实现垃圾邮件分类</h1><p>本文主要参考<a href="https://github.com/AaronFang123/Naive-Bayes-classifier">这个github项目</a>来实现。</p><h2 id="代码运行"><a href="#代码运行" class="headerlink" title="代码运行"></a>代码运行</h2><p>使用<code>git clone</code>下载项目，然后将<a href="https://drive.google.com/open?id=15Yi14PBw9P1pb045_aIRa-C3cdP0PKT_">数据集</a> 解压到仓库路径下即可</p><p>运行：<code>python new.py</code></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>我在本地运行得到的结果为</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Building prefix dict from the default dictionary ...Dumping model to file cache C:\Users\15617\AppData\Local\Temp\jieba.cacheLoading model cost 0.621 seconds.Prefix dict has been built successfully.测试集样本总数 12924正确预计个数 11326错误预测个数 1598预测准确率： 0.8763540699473847<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法步骤解析"><a href="#算法步骤解析" class="headerlink" title="算法步骤解析"></a>算法步骤解析</h2><h3 id="1-收集数据，收集垃圾邮件文本数据以及停用词"><a href="#1-收集数据，收集垃圾邮件文本数据以及停用词" class="headerlink" title="1. 收集数据，收集垃圾邮件文本数据以及停用词"></a>1. 收集数据，收集垃圾邮件文本数据以及停用词</h3><p>仓库包含了两个文件<code>index</code>以及<code>stop</code>， 前者包含了邮件目录和标签，后者包含了停用词列表。邮件被分成两类：<code>spam</code>垃圾邮件以及<code>ham</code>正常邮件。</p><p>首先要从<code>index</code>和<code>stop</code>中读出标签-路径列表和停用词列表，由函数<code>load_formatted_data()</code></p><p>和<code>load_stop_word()</code>实现。</p><p>针对<code>DataFrame</code>类的特点，使用函数式编程(lambda表达式)可以大幅提高效率以及代码可读性。</p><p><code>main</code>函数内：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    index_list <span class="token operator">=</span> load_formatted_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_words <span class="token operator">=</span> load_stop_word<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对应函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_formatted_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    加载格式化后的标签-路径列表    spam列为1代表是垃圾邮件，0代表普通邮件    path列代表该邮件路径    :return:(DataFrame)index    """</span>    <span class="token comment"># 加载数据集</span>    index <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    index<span class="token punctuation">.</span>spam <span class="token operator">=</span> index<span class="token punctuation">.</span>spam<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'spam'</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>    index<span class="token punctuation">.</span>path <span class="token operator">=</span> index<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_stop_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读出停用词列表    :return: (List)_stop_words    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    _stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    <span class="token keyword">return</span> _stop_words<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-加载数据，使用pandas加载数据，并使用函数式编程-lambda-来对数据进行预处理。"><a href="#2-加载数据，使用pandas加载数据，并使用函数式编程-lambda-来对数据进行预处理。" class="headerlink" title="2.加载数据，使用pandas加载数据，并使用函数式编程(lambda)来对数据进行预处理。"></a>2.加载数据，使用pandas加载数据，并使用函数式编程(lambda)来对数据进行预处理。</h3><p>依据上一步读取到的标签-路径列表，遍历得到每封邮件的词汇字符串，得到字符串之后，制作每封邮件的词汇字典(Dictionary)，形如<code>{word:1}</code>。此处采用的是词集模型，即全部文档中的所有单词构成的集合，每个单词只出现一次，仅仅考虑词是否在文本中出现，而不考虑词频。</p><p><code>main</code>函数内：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>index_list<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index_list<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> get_mail_content<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>index_list<span class="token punctuation">[</span><span class="token string">'word_dict'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index_list<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> create_word_dict<span class="token punctuation">(</span>x<span class="token punctuation">,</span> stop_words<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对应函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_mail_content</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    遍历得到每封邮件的词汇字符串    :param path: 邮件路径    :return:(Str)content    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"gbk"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>            <span class="token comment"># 去除第一个空行，即在第一个空行之前的邮件协议内容全部舍弃</span>            lines <span class="token operator">=</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(content)</span>    <span class="token keyword">return</span> content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_word_dict</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> stop_words_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    依据邮件的词汇字符串统计词汇出现记录，依据停止词列表除去某些词语    :param content: 邮件的词汇字符串    :param stop_words_list:停止词列表    :return:(Dict)word_dict    """</span>    word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    word_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment"># word_dict key:word, value:1</span>    <span class="token comment"># 限定只查找中文字符</span>    content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">u"[\u4e00-\u9fa5]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    word_list_temp <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_list_temp<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words_list<span class="token punctuation">:</span>            word_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_list<span class="token punctuation">:</span>        word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> word_dict<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中文分词是通过第三方库<code>jieba</code>实现的</p><h3 id="3-训练算法"><a href="#3-训练算法" class="headerlink" title="3. 训练算法"></a>3. 训练算法</h3><p>首先需要设置训练集和测试集，假设选定前80%的data数据作为训练集，20%作为测试集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> train_set <span class="token operator">=</span> index_list<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>index_list<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">]</span> test_set <span class="token operator">=</span> index_list<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>index_list<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对数据集进行训练, 统计训练集中某个词在普通邮件和垃圾邮件中的出现次数, 为计算先验概率和后验概率提供数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>train_word_dict<span class="token punctuation">,</span> spam_count<span class="token punctuation">,</span> ham_count <span class="token operator">=</span> train_dataset<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_dataset</span><span class="token punctuation">(</span>dataset_to_train<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对数据集进行训练, 统计训练集中某个词在普通邮件和垃圾邮件中的出现次数    :param dataset_to_train: 将要用来训练的数据集    :return:Tuple(词汇出现次数字典_train_word_dict, 垃圾邮件总数spam_count, 正常邮件总数ham_count)    """</span>    _train_word_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment"># train_word_dict内容，训练集中某个词在普通邮件和垃圾邮件中的出现次数</span>    <span class="token keyword">for</span> word_dict<span class="token punctuation">,</span> spam <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>dataset_to_train<span class="token punctuation">.</span>word_dict<span class="token punctuation">,</span> dataset_to_train<span class="token punctuation">.</span>spam<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># word_dict某封信的词汇表 spam某封信的状态</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> word_dict<span class="token punctuation">:</span>            <span class="token comment"># 对每封信的每个词在该邮件分类进行出现记录 出现过为则记录数加1 未出现为0</span>            _train_word_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            _train_word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">[</span>spam<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    ham_count <span class="token operator">=</span> dataset_to_train<span class="token punctuation">.</span>spam<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    spam_count <span class="token operator">=</span> dataset_to_train<span class="token punctuation">.</span>spam<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> _train_word_dict<span class="token punctuation">,</span> spam_count<span class="token punctuation">,</span> ham_count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试算法"><a href="#4-测试算法" class="headerlink" title="4. 测试算法"></a>4. 测试算法</h3><p>先验概率P(s)极大似然估计</p><p>P(spam) =  垃圾邮件数/邮件总数</p><p>P(ham) = 正常邮件数/邮件总数</p><p>为了计算避免数字过小丢失精度，以下计算均以对数形式进行</p><p>用W表示某个词，现在需要计算P(S|W)的值，即在某个词语（W）已经存在的条件下，垃圾邮件（S）的概率有多大。</p><p><img src="http://chart.googleapis.com/chart?cht=tx&amp;chl=P(S%7CW)=%5Cfrac%7BP(W%7CS)P(S)%7D%7BP(W%7CS)P(S)+P(W%7CH)P(H)%7D&amp;chs=70" alt="img"></p><p>又因为对于每个词P(S | H) ，分母与上式一致，所以只需比较分子即可得出结论——大者为更可能的分类结果。</p><p>为了增强信度，基于上面的推理，需要计算联合概率密度，对每个出现在一信件中的所有词汇的所有后验概率计算联合概率，大者为更可能的分类结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict_dataset</span><span class="token punctuation">(</span>_train_word_dict<span class="token punctuation">,</span> _spam_count<span class="token punctuation">,</span> _ham_count<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    测试算法    :param _train_word_dict:词汇出现次数字典    :param _spam_count:垃圾邮件总数    :param _ham_count:正常邮件总数    :param data:测试集    :return:    """</span>    total_count <span class="token operator">=</span> _ham_count <span class="token operator">+</span> _spam_count    word_dict <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'word_dict'</span><span class="token punctuation">]</span>    <span class="token comment"># 先验概率 已经取了对数</span>    ham_probability <span class="token operator">=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>_ham_count<span class="token punctuation">)</span> <span class="token operator">/</span> total_count<span class="token punctuation">)</span>    spam_probability <span class="token operator">=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>_spam_count<span class="token punctuation">)</span> <span class="token operator">/</span> total_count<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_dict<span class="token punctuation">:</span>        word <span class="token operator">=</span> word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        _train_word_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment"># 求联合概率密度 += log</span>        <span class="token comment"># 拉普拉斯平滑</span>        word_occurs_counts_ham <span class="token operator">=</span> _train_word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 出现过这个词的信件数 / 垃圾邮件数</span>        ham_probability <span class="token operator">+=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>word_occurs_counts_ham<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> _ham_count <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        word_occurs_counts_spam <span class="token operator">=</span> _train_word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># 出现过这个词的信件数 / 普通邮件数</span>        spam_probability <span class="token operator">+=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>word_occurs_counts_spam<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> _spam_count <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> spam_probability <span class="token operator">&gt;</span> ham_probability<span class="token punctuation">:</span>        is_spam <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        is_spam <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 返回预测正确状态</span>    <span class="token keyword">if</span> is_spam <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拉普拉斯平滑：发现0概率会给后验概率计算带来致命影响，从实际意义上看，未出现在训练集中的词语不能说是不可能的，所以有必要指定一个默认值。这个过程称为拉普拉斯平滑。</p><h3 id="5-使用算法"><a href="#5-使用算法" class="headerlink" title="5. 使用算法"></a>5. 使用算法</h3><p>测试算法得出的预测结论与实际分类情况做比较，得出准确率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>test_mails_predict <span class="token operator">=</span> test_set<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>        <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> predict_dataset<span class="token punctuation">(</span>train_word_dict<span class="token punctuation">,</span> spam_count<span class="token punctuation">,</span> ham_count<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    corr_count <span class="token operator">=</span> <span class="token number">0</span>    false_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> test_mails_predict<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            corr_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            false_count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集样本总数"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>corr_count <span class="token operator">+</span> false_count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确预计个数"</span><span class="token punctuation">,</span> corr_count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误预测个数"</span><span class="token punctuation">,</span> false_count<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>corr_count <span class="token operator">/</span> <span class="token punctuation">(</span>corr_count <span class="token operator">+</span> false_count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预测准确率：'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码与注释"><a href="#完整代码与注释" class="headerlink" title="完整代码与注释"></a>完整代码与注释</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> re<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> codecs<span class="token keyword">import</span> jieba<span class="token keyword">def</span> <span class="token function">load_formatted_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    加载格式化后的标签-路径列表    spam列为1代表是垃圾邮件，0代表普通邮件    path列代表该邮件路径    :return:(DataFrame)index    """</span>    <span class="token comment"># 加载数据集</span>    index <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">,</span> <span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 读入是两列，一列spam 一列path</span>    index<span class="token punctuation">.</span>spam <span class="token operator">=</span> index<span class="token punctuation">.</span>spam<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'spam'</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 数据标签，标签为spam的设置为1 否则设置为0</span>    index<span class="token punctuation">.</span>path <span class="token operator">=</span> index<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 更改文件路径</span>    <span class="token keyword">return</span> index<span class="token keyword">def</span> <span class="token function">load_stop_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    读出停用词列表 后续我们要设计自己的停用词列表    :return: (List)_stop_words    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"stop"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 载入停用词列表</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读入所有行，得到一个包含多个字符串的list，一行是一个字符串</span>    _stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">]</span> <span class="token comment"># 舍弃掉所有换行符</span>    <span class="token keyword">return</span> _stop_words<span class="token keyword">def</span> <span class="token function">get_mail_content</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    遍历得到每封邮件的词汇字符串    :param path: 邮件路径    :return:(Str)content    """</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"gbk"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 以gbk编码打开文件，忽略错误</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读入所有行，得到一个包含多个字符串的list，一行是一个字符串</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>            <span class="token comment"># 去除第一个空行，即在第一个空行之前的邮件协议内容全部舍弃</span>            lines <span class="token operator">=</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># strip()是丢弃换行符，split()是按照空格分隔开（起到剔除多个空格只留下一个空格的作用），然后再join在一起</span>    <span class="token comment"># print(content)</span>    <span class="token keyword">return</span> content<span class="token keyword">def</span> <span class="token function">create_word_dict</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> stop_words_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    依据邮件的词汇字符串统计词汇出现记录，依据停止词列表除去某些词语    :param content: 邮件的词汇字符串    :param stop_words_list:停止词列表    :return:(Dict)word_dict    """</span>    word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    word_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment"># word_dict key:word, value:1</span>    content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">u"[\u4e00-\u9fa5]"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>     <span class="token comment"># 正则表达式，只保留汉字，其他字符全部剔除，这句得到的是含有多个字符串的list，其中一个汉字一个字符串</span>    content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token comment"># 拼起来</span>    word_list_temp <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token comment"># 使用jieba进行分词 后续我们要加入自己的分词词典</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_list_temp<span class="token punctuation">:</span>        <span class="token keyword">if</span> word <span class="token operator">!=</span> <span class="token string">''</span> <span class="token keyword">and</span> word <span class="token keyword">not</span> <span class="token keyword">in</span> stop_words_list<span class="token punctuation">:</span> <span class="token comment"># 去掉空词和停止词</span>            word_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_list<span class="token punctuation">:</span>        word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># 建立字典，合法词的对应值都为1</span>    <span class="token keyword">return</span> word_dict<span class="token keyword">def</span> <span class="token function">train_dataset</span><span class="token punctuation">(</span>dataset_to_train<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对数据集进行训练, 统计训练集中某个词在普通邮件和垃圾邮件中的出现次数    :param dataset_to_train: 将要用来训练的数据集    :return:Tuple(词汇出现次数字典_train_word_dict, 垃圾邮件总数spam_count, 正常邮件总数ham_count)    """</span>    _train_word_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment"># train_word_dict内容，训练集中某个词在普通邮件和垃圾邮件中的出现次数</span>    <span class="token keyword">for</span> word_dict<span class="token punctuation">,</span> spam <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>dataset_to_train<span class="token punctuation">.</span>word_dict<span class="token punctuation">,</span> dataset_to_train<span class="token punctuation">.</span>spam<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># word_dict某封信的词汇表 spam某封信的状态</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> word_dict<span class="token punctuation">:</span>            <span class="token comment"># 对每封信的每个词在该邮件分类进行出现记录 出现过为则记录数加1 未出现为0</span>            _train_word_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 二维字典，每个词对应一个{0: 0, 1: 0}，冒号前表示标签，冒号后表示出现次数</span>            _train_word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">[</span>spam<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    ham_count <span class="token operator">=</span> dataset_to_train<span class="token punctuation">.</span>spam<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    spam_count <span class="token operator">=</span> dataset_to_train<span class="token punctuation">.</span>spam<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> _train_word_dict<span class="token punctuation">,</span> spam_count<span class="token punctuation">,</span> ham_count<span class="token keyword">def</span> <span class="token function">predict_dataset</span><span class="token punctuation">(</span>_train_word_dict<span class="token punctuation">,</span> _spam_count<span class="token punctuation">,</span> _ham_count<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    测试算法    :param _train_word_dict:词汇出现次数字典    :param _spam_count:垃圾邮件总数    :param _ham_count:正常邮件总数    :param data:测试集    :return:    """</span>    total_count <span class="token operator">=</span> _ham_count <span class="token operator">+</span> _spam_count    word_dict <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'word_dict'</span><span class="token punctuation">]</span>    <span class="token comment"># 先验概率 已经取了对数</span>    ham_probability <span class="token operator">=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>_ham_count<span class="token punctuation">)</span> <span class="token operator">/</span> total_count<span class="token punctuation">)</span>    spam_probability <span class="token operator">=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>_spam_count<span class="token punctuation">)</span> <span class="token operator">/</span> total_count<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> word_dict<span class="token punctuation">:</span>        word <span class="token operator">=</span> word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        _train_word_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment"># 求联合概率密度 += log</span>        <span class="token comment"># 拉普拉斯平滑</span>        word_occurs_counts_ham <span class="token operator">=</span> _train_word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 出现过这个词的信件数 / 垃圾邮件数</span>        ham_probability <span class="token operator">+=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>word_occurs_counts_ham<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> _ham_count <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>        word_occurs_counts_spam <span class="token operator">=</span> _train_word_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># 出现过这个词的信件数 / 普通邮件数</span>        spam_probability <span class="token operator">+=</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>word_occurs_counts_spam<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> _spam_count <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> spam_probability <span class="token operator">&gt;</span> ham_probability<span class="token punctuation">:</span>        is_spam <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        is_spam <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 返回预测正确状态</span>    <span class="token keyword">if</span> is_spam <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token string">'spam'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">save_train_word_dict</span><span class="token punctuation">(</span>train_word_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"train_word_dict"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"gbk"</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">"ignore"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>train_word_dict<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    index_list <span class="token operator">=</span> load_formatted_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_words <span class="token operator">=</span> load_stop_word<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># get_mail_content(index_list.path[0])</span>    index_list<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index_list<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> get_mail_content<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对content列使用函数，得到邮件内容</span>    index_list<span class="token punctuation">[</span><span class="token string">'word_dict'</span><span class="token punctuation">]</span> <span class="token operator">=</span> index_list<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> create_word_dict<span class="token punctuation">(</span>x<span class="token punctuation">,</span> stop_words<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 得到新的列word_dict，内容为对应content行的合法词字典</span>    train_set <span class="token operator">=</span> index_list<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>index_list<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">]</span> <span class="token comment"># 取80%为训练集，20%为测试集</span>    test_set <span class="token operator">=</span> index_list<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>index_list<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    train_word_dict<span class="token punctuation">,</span> spam_count<span class="token punctuation">,</span> ham_count <span class="token operator">=</span> train_dataset<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span>    save_train_word_dict<span class="token punctuation">(</span>train_word_dict<span class="token punctuation">)</span> <span class="token comment"># 保存每个词每个标签出现的次数</span>    test_mails_predict <span class="token operator">=</span> test_set<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>        <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> predict_dataset<span class="token punctuation">(</span>train_word_dict<span class="token punctuation">,</span> spam_count<span class="token punctuation">,</span> ham_count<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    corr_count <span class="token operator">=</span> <span class="token number">0</span>    false_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> test_mails_predict<span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            corr_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            false_count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集样本总数"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>corr_count <span class="token operator">+</span> false_count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确预计个数"</span><span class="token punctuation">,</span> corr_count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误预测个数"</span><span class="token punctuation">,</span> false_count<span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>corr_count <span class="token operator">/</span> <span class="token punctuation">(</span>corr_count <span class="token operator">+</span> false_count<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预测准确率：'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个项目主要是用作NLP分类学习的入门，简单跑一下熟悉一下，一起好好学习吧<del>小仙女</del><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年下半年目标</title>
      <link href="/2021/10/12/2021%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%E7%9B%AE%E6%A0%87/"/>
      <url>/2021/10/12/2021%E5%B9%B4%E4%B8%8B%E5%8D%8A%E5%B9%B4%E7%9B%AE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="2021年下半年目标"><a href="#2021年下半年目标" class="headerlink" title="2021年下半年目标"></a>2021年下半年目标</h1><p>新学期新打算，小仙女和油油要制定好目标，一起努力呀：</p><h2 id="小仙女的目标："><a href="#小仙女的目标：" class="headerlink" title="小仙女的目标："></a>小仙女的目标：</h2><ul><li>NBY论文投出去（不晚于11月底）</li><li>产生2~3个新的idea<ul><li>一个NLP</li><li>一个survey</li><li>一个case</li></ul></li><li>推进其中一到两个idea，年底做好数据处理</li><li>申请出国，获得贾的同意，拿到offer</li><li>雅思考试（预计22年1月考）</li><li>江苏省项目结题；学院的项目可尝试</li></ul><h2 id="油油的目标："><a href="#油油的目标：" class="headerlink" title="油油的目标："></a>油油的目标：</h2><ul><li>MSL论文投出去（不晚于11月底）</li><li>数据集和free-view baseline的论文投出去（过年回家之前）</li><li>雅思考试（过年回家之前）</li></ul><p>制定好了目标，就一起加油努力吧！互相监督，共同努力！</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标与计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP常见Python包简介</title>
      <link href="/2021/10/11/NLP%E5%B8%B8%E8%A7%81Python%E5%8C%85%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/10/11/NLP%E5%B8%B8%E8%A7%81Python%E5%8C%85%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="NLP常见Python包简介"><a href="#NLP常见Python包简介" class="headerlink" title="NLP常见Python包简介"></a>NLP常见Python包简介</h1><p>Python依然是做NLP研究的主力，本文我们主要介绍NLP常用的Python包。</p><h2 id="pypinyin"><a href="#pypinyin" class="headerlink" title="pypinyin"></a>pypinyin</h2><p><a href="https://github.com/mozillazg/python-pinyin">pypinyin</a>是将汉字转为拼音的常用包，可以用于汉字注音、排序、检索等，有时候需要把汉字先变为拼音再做处理。主要特点如下：</p><ul><li>根据词组智能匹配最正确的拼音；</li><li>支持多音字；</li><li>简单的繁体支持，注音支持，威妥玛拼音支持；</li><li>支持多种不同拼音/注音风格。</li></ul><p>使用<code>pip</code>安装了pypinyin之后，以下代码很好地说明了pypinyin的基本使用方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pypinyin <span class="token keyword">import</span> pinyin<span class="token punctuation">,</span> lazy_pinyin<span class="token punctuation">,</span> Stylepinyin<span class="token punctuation">(</span><span class="token string">'中心'</span><span class="token punctuation">)</span>  <span class="token comment"># or pinyin(['中心'])，参数值为列表时表示输入的是已分词后的数据</span>pinyin<span class="token punctuation">(</span><span class="token string">'中心'</span><span class="token punctuation">,</span> heteronym<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 启用多音字模式</span>pinyin<span class="token punctuation">(</span><span class="token string">'中心'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>FIRST_LETTER<span class="token punctuation">)</span>  <span class="token comment"># 设置拼音风格</span>pinyin<span class="token punctuation">(</span><span class="token string">'中心'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>TONE2<span class="token punctuation">,</span> heteronym<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>pinyin<span class="token punctuation">(</span><span class="token string">'中心'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>TONE3<span class="token punctuation">,</span> heteronym<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>pinyin<span class="token punctuation">(</span><span class="token string">'中心'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>BOPOMOFO<span class="token punctuation">)</span>  <span class="token comment"># 注音风格</span>lazy_pinyin<span class="token punctuation">(</span><span class="token string">'威妥玛拼音'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>WADEGILES<span class="token punctuation">)</span>lazy_pinyin<span class="token punctuation">(</span><span class="token string">'中心'</span><span class="token punctuation">)</span>  <span class="token comment"># 不考虑多音字的情况</span>lazy_pinyin<span class="token punctuation">(</span><span class="token string">'战略'</span><span class="token punctuation">,</span> v_to_u<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 不使用 v 表示 ü</span><span class="token comment"># 使用 5 标识轻声</span>lazy_pinyin<span class="token punctuation">(</span><span class="token string">'衣裳'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>TONE3<span class="token punctuation">,</span> neutral_tone_with_five<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 变调  nǐ hǎo -&gt; ní hǎo</span>lazy_pinyin<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>TONE2<span class="token punctuation">,</span> tone_sandhi<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出声母：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pinyin<span class="token punctuation">(</span><span class="token string">'下雨天'</span><span class="token punctuation">,</span> style<span class="token operator">=</span>Style<span class="token punctuation">.</span>INITIALS<span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="NLTK"><a href="#NLTK" class="headerlink" title="NLTK"></a>NLTK</h2><p><a href="http://www.nltk.org/">NLTK</a>（<a href="https://yiyibooks.cn/yiyi/nltk_python/index.html">中文文档</a>）是一个巨大的工具包，是最知名的NLP处理工具。从将段落拆分为句子，拆分词语，识别这些词语的词性，高亮主题，甚至帮助我们解文本内容。另外<a href="https://www.cnblogs.com/chen8023miss/p/11458571.html">这篇文章</a>介绍的也比较好。</p><p>NLTK可以但不限于做以下事情：</p><ul><li>语料库：<ul><li>获取和处理语料库，NLTK中包含古腾堡语料库、网络聊天语料库等几个语料库；</li></ul></li><li>预料预处理：<ul><li>去除停止词，即筛去不属于自然语言的词汇或者符号；</li><li>分词，即把句子分解为以单词为单位的结构；</li><li>词性标注，是在给定句子中判定每个词的语法范畴，确定其词性并加以标注的过程；</li><li>词干提取，是英文语料预处理的一个步骤（中文并不需要），即抽取词的词干或词根形式；</li><li>词性还原，基于字典的映射来抽取词干，nltk中要求手动注明词性，否则可能会有问题；</li><li>分块和添加缝隙，即把词汇分成有意义的块；</li><li>命名实体识别，即识别出来<code>White House</code>这样的固定搭配实体，而不将其分开；</li></ul></li><li>分类任务：<ul><li>朴素贝叶斯分类器，最大熵分类器，决策树，组合算法（多个分类器投票）；</li></ul></li></ul><h2 id="jieba"><a href="#jieba" class="headerlink" title="jieba"></a>jieba</h2><p><a href="https://github.com/fxsjy/jieba">jieba</a>是中文的分词工具，主要功能为：</p><ul><li>分词；</li><li>自定义词典；</li><li>关键词提取；</li><li>词性标注；</li><li>并行分词；</li><li>Tokenize：返回词语在原文的起止位置；</li><li>ChineseAnalyzer for Whoosh 搜索引擎；</li><li>命令行分词。</li></ul><h2 id="spaCy"><a href="#spaCy" class="headerlink" title="spaCy"></a>spaCy</h2><p><a href="https://spacy.io/usage/models">spaCy</a>是一个极其优化的NLP库，可与深度学习框架（如TensorFlow或PyTorch）一起运行。该库提供了大多数标准功能（标记化，PoS标记，解析，命名实体识别……），并且构建快速。</p><p>spaCy也很好地与所有主要的深度学习框架接口，并预装了一些非常好的和有用的语言模型。</p><h2 id="scikit-learn"><a href="#scikit-learn" class="headerlink" title="scikit-learn"></a>scikit-learn</h2><p><a href="https://scikit-learn.org/stable/">scikit-learn</a>是一个很强大的机器学习库，同时也提供了处理NLP的一些工具和算法，如BOW和一系列其他机器学习模型。</p><p>一个比较大的优点是文档齐全。</p><h2 id="Pologlot"><a href="#Pologlot" class="headerlink" title="Pologlot"></a>Pologlot</h2><p>具有类似的NLP功能，此外它提供了一些非常有趣的功能，例如语言检测和音译等，主要用于做多语言支持。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP基本研究方向简介</title>
      <link href="/2021/10/10/NLP%E5%9F%BA%E6%9C%AC%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/10/10/NLP%E5%9F%BA%E6%9C%AC%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="NLP基本研究方向简介"><a href="#NLP基本研究方向简介" class="headerlink" title="NLP基本研究方向简介"></a>NLP基本研究方向简介</h1><p>自然语言处理（英语：Natural Language Processing，缩写作 NLP）是人工智能和语言学领域的分支学科。此领域探讨如何处理及运用自然语言；自然语言处理包括多方面和步骤，基本有认知、理解、生成等部分。</p><p>自然语言认知和理解是让电脑把输入的语言变成有意思的符号和关系，然后根据目的再处理。自然语言生成系统则是把计算机数据转化为自然语言。</p><p>基于此，NLP领域延伸处理种类繁多的任务，这里总结了文本向量化、序列标注任务、文本分类、信息提取、以及复杂应用场景五大类NLP任务，做一个介绍。</p><h2 id="文本向量化"><a href="#文本向量化" class="headerlink" title="文本向量化"></a>文本向量化</h2><p>文本的向量化可谓是NLP进入深度学习时代的标志。所谓文本的向量化（embedding），就是将文本用一定维度的向量来表示，也可以理解为文本的数值化。通过embedding，文本的语义、句法等特征得以表征，便于下游模型的处理。</p><p>例如，“人/如果/没有/梦想/，/跟/咸鱼/还有/什么/差别”，向机器学习模型直接输入字符串显然是不明智的，不便于模型进行计算和文本之间的比较。那么，我们需要一种方式来表示一个文本，这种文本表示方式要能够便于进行文本之间的比较，计算等。最容易想到的，就是对文本进行向量化的表示。例如，根据语料库的分词结果，建立一个词典，每个词用一个向量来表示，这样就可以将文本向量化了。</p><p><img src="vector.webp" alt="文本向量化"></p><p>词的向量化，最早尝试是词袋模型，后来证明，词袋模型无法表征词序特征，并且会带来维度灾难；Yoshua Bengio在2003年《A Neural Probabilistic Language Model》一文中提出了一种神经网络的方法，用于语言模型的计算，词向量作为副产品后来却引起了业界的关注。2008年Collobert和Weston展示了第一个能有效利用预训练词嵌入的研究工作，他们提出的神经网络架构，构成了当前很多方法的基础。这一项研究工作还率先将词嵌入作为 NLP 任务的高效工具。不过词嵌入真正走向NLP主流还是Mikolov 等人在 2013 年做出的研究《Distributed Representations of Words and Phrases and their Compositionality》。Mikolov 等研究者在这篇论文中提出了连续词袋模型CBOW和 Skip-Gram 模型，通过引入负采样等可行性的措施，这两种方法都能学习高质量的词向量。基于此，ELMO提出了一种相同词能够根据语境生成不同词向量的模型。高质量的词向量的获得，结合LSTM、CNN等神经网络抽取器，使得NER，文本分类以及信息抽取等任务获得了长足的进步。</p><p>此外，基于词向量的思想，从2018年开始，NLP中预训练模型开始流行，BERT、GPT、ALBERT以及XLNET等模型不断刷榜。</p><h2 id="序列标注任务"><a href="#序列标注任务" class="headerlink" title="序列标注任务"></a>序列标注任务</h2><p>序列标注任务是NLP里非常基础和重要的任务，例如分词、NER等都属于序列标注任务，包括一些预测span的阅读理解任务也可归于此列。</p><p>分词通常是中文自然语言处理的第一步（随着深度学习模型表征能力越来越强，慢慢证明，分词未必是必要的）；NER是非常重要和基础的信息抽取任务，在非常多的场景中都需要用到，例如聊天机器人中的槽位抽取、文本结构化过程中的实体抽取等等。</p><p><img src="sequence.webp" alt="序列标注"></p><p>早期的序列标注任务，例如分词，NER等主要是用HMM、CRF等机器学习模型；随着深度学习的兴起，LSTM+CRF变成序列标注任务的主流方法；当然，因为LSTM的若干缺点，不少NLP的从业者坚持使用CNN，因而基于膨胀卷积的序列标注模型得以提出。随着transformer的提出，利用BERT等预训练模型做NER这类任务开始变得流行，特别是抽取一些相对较长和复杂的实体，例如地址等。需要特别提出的是，有些情况下，正则匹配也是实体抽取的一种有效手段，可作为补充，例如时间实体等。</p><h2 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h2><p>文本分类是一个不难理解的概念，即通过计算机对输入文本进行分类，例如判断“你真是个帅哥啊”这句话是褒义还是贬义。文本分类的应用场景很多，例如情感分类、机器人中的意图识别等。</p><p><img src="classify.webp" alt="文本分类"></p><p>听上去，分类问题似乎是个不难解决的问题，实际上文本分类有它的难度。当类别非常多或者类别与类别之间差异很小时，文本分类就开始变得困难；再者，有时需要考虑额外特征才能分类正确，例如常常需要根据说话者语气，才能判断“你真是个帅哥啊”这句话是讽刺还是真心的赞美。</p><p>早期有一些基于传统机器学习的文本分类，例如基于某种词语特征的的贝叶斯模型，SVM分类器等。</p><p>随着深度学习的发展，LSTM+softmax/CNN+softmax模型变成了一种非常流行的文本分类架构，基于此Fasttext、textCNN等便捷高效的开源文本分类工具也开始流行。此外，结合Attention等技巧与概念能够一定程度的提高模型的效果。</p><p>文本分类还有另外一种模式，即通过将文本向量化，再通过聚类获得类别，NLTK等开源NLP工具都有便捷的Doc2vec API。如果觉得效果不好，可以试试BERT的【CLS】向量。此外，还可以增加TF-IDF模块，构建更有表达能力的DocVec。</p><h2 id="信息提取任务"><a href="#信息提取任务" class="headerlink" title="信息提取任务"></a><strong>信息提取任务</strong></h2><p>信息提取(IE)的目标是将文本信息转化为结构化信息，起初用于定位自然语言文档中的特定信息。广泛的看，信息提取其实是一个非常宽泛的概念，从文本提出感兴趣的内容就可以称为信息提取。在NLP中常常用实体抽取、关系抽取以及事件抽取等手段进行信息抽取。</p><p><img src="info.webp" alt="信息提取"></p><p>实体抽取是序列标记问题，上面已经介绍过，关系抽取以及事件抽取则通常转化为分类的任务。关系抽取常常需要先确认subject以及object。所以，关系抽取任务常常伴随着实体抽取的要求。</p><p>早期，信息提取多使用正则和传统的机器学习方法。随着深度学习的快速发展，信息提取技术也开始迅速发展。实体抽取与关系抽取从Pipline的方式进化到end-to-end的方式。使用的特征抽取器也逐步进化，从LSTM/CNN到transformer。需要特别提出的是，BERT在信息抽取方面表现出色，基于BERT和阅读理解任务来做信息抽取，是一种非常别致的方式。</p><h2 id="场景任务"><a href="#场景任务" class="headerlink" title="场景任务"></a>场景任务</h2><p>此外，NLP还有一些复杂的应用场景，他们可能是多种NLP技术的应用和综合，例如聊天机器人、知识图谱、文本搜索以及文本推荐系统等。</p><p>搜索是NLP技术最早得到大规模应用的技术，例如百度搜索、知乎话题搜索以及各大互联网公司的query搜索技术，都涉及到语义匹配或文本分类技术。此外，大型的搜索引擎，知识图谱的搭建是必须的。</p><p>推荐系统在一定层面来说是跟搜索场景相反的。搜索是基于用户的意图，在文本库中寻找匹配项；推荐则相反，通常基于积累的用户信息，给用户推荐可能感兴趣的内容。推荐系统常常涉及用户画像、标签定义等过程，需要一定程度的依赖NLP技术。</p><p>聊天机器人是目前NLP技术应用最多的场景，基于NLP技术构建一个能够替代客服、销售、办公文员是这一任务的终极目标。目前，聊天机器人已经以各种形态出现在人们面前，有站在银行门口迎接顾客的迎宾机器人，有放在卧室床头的智能音箱，有呆在各个APP首页的助手机器人等等。在聊天机器人中，运用了文本分类、语义匹配、对话管理、实体识别等大量的NLP技术。要做好是一件难度大、超复杂的任务。</p><p>知识图谱是AI时代一个非常重要基础设施，大规模结构化的知识网络的搭建，能够重塑很多的智能场景。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime破解及汉化</title>
      <link href="/2021/09/30/Sublime%E7%A0%B4%E8%A7%A3%E5%8F%8A%E6%B1%89%E5%8C%96/"/>
      <url>/2021/09/30/Sublime%E7%A0%B4%E8%A7%A3%E5%8F%8A%E6%B1%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Sublime破解及汉化"><a href="#Sublime破解及汉化" class="headerlink" title="Sublime破解及汉化"></a>Sublime破解及汉化</h1><p>终于找到了可用的Sublime破解方式，主要参考<a href="https://www.cvps.top/10296.html">这篇文章</a>，这里我们做一下破解，避免烦人的购买提示。如有必要再做一下汉化。</p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><ol><li>在软件的安装目录找到 <code>sublime_text.exe</code> 文件，进行备份；</li><li>使用<a href="https://hexed.it/">hexed</a> 在线十六进制编辑器，打开 <code>sublime_text.exe</code> 文件；</li><li>软件版本4113替换以下2组字符，如果不是最新的4113版就先更新到最新版：</li></ol><pre class="line-numbers language-none"><code class="language-none">C3 C6 01 00 C3 替换为 C3 C6 01 01 C351 31 C0 88 05 替换为 51 b0 01 88 05<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>将替换结果保存到我们的安装目录下，替换原来的<code>sublime_text.exe</code>即可。</li></ol><h2 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h2><ol><li>点击 <strong>Tools</strong>—<strong>Install Package Control</strong>，等待安装插件控件；</li><li>菜单点击P<strong>references – Package Control，选择 Install Package</strong>；</li><li>输入 ChineseLocalzations 可见中文包，选中即可安装。</li></ol><p>这篇是真的简单<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>从此可以避免购买和激活提示啦。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小仙女的学习笔记</title>
      <link href="/2021/09/26/%E5%B0%8F%E4%BB%99%E5%A5%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/09/26/%E5%B0%8F%E4%BB%99%E5%A5%B3%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="小仙女的学习笔记"><a href="#小仙女的学习笔记" class="headerlink" title="小仙女的学习笔记"></a>小仙女的学习笔记</h1><p>这篇文章用来帮小仙女记录在学习中遇到的需要笔记的知识点。</p><h2 id="快捷键与命令"><a href="#快捷键与命令" class="headerlink" title="快捷键与命令"></a>快捷键与命令</h2><h3 id="文件处理快捷键"><a href="#文件处理快捷键" class="headerlink" title="文件处理快捷键"></a>文件处理快捷键</h3><table><thead><tr><th align="center">使用</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>Ctrl</strong>+<strong>N</strong></td><td align="center">新建文件</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>C</strong></td><td align="center">复制</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>X</strong></td><td align="center">剪切</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>V</strong></td><td align="center">粘贴</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>F</strong></td><td align="center">搜索</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>H</strong></td><td align="center">替换</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>A</strong></td><td align="center">全选</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>S</strong></td><td align="center">保存</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>Z</strong></td><td align="center">撤销编辑</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>Y</strong></td><td align="center">还原编辑</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>B</strong></td><td align="center">字体加粗</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>I</strong></td><td align="center">字体倾斜</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>U</strong></td><td align="center">字体下划线</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>P</strong></td><td align="center">打印</td></tr></tbody></table><h3 id="Windows快捷键"><a href="#Windows快捷键" class="headerlink" title="Windows快捷键"></a>Windows快捷键</h3><table><thead><tr><th align="center">使用</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>Alt</strong>+<strong>Tab</strong></td><td align="center">窗口切换</td></tr><tr><td align="center"><strong>Win</strong>+<strong>↑↓←→</strong></td><td align="center">使窗口全屏、最小化、靠左、靠右</td></tr><tr><td align="center"><strong>Fn</strong>+<strong>F2</strong></td><td align="center">文件重命名</td></tr><tr><td align="center"><strong>Del</strong></td><td align="center">文件删除</td></tr><tr><td align="center"><strong>Shift</strong>+<strong>Del</strong></td><td align="center">文件彻底删除</td></tr><tr><td align="center"><strong>Alt</strong>+<strong>↑↓←→</strong></td><td align="center">进入上一级、下一级、前一级、后一级目录</td></tr></tbody></table><h3 id="Windows-Shell命令与快捷键"><a href="#Windows-Shell命令与快捷键" class="headerlink" title="Windows Shell命令与快捷键"></a>Windows Shell命令与快捷键</h3><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>python</strong></td><td align="center">进入python解释器，或者执行python代码</td></tr><tr><td align="center"><strong>dir</strong></td><td align="center">当前目录下所有文件</td></tr><tr><td align="center"><strong>cd</strong></td><td align="center">切换目录</td></tr><tr><td align="center"><strong>del</strong></td><td align="center">删除文件</td></tr><tr><td align="center"><strong>Tab</strong></td><td align="center">切换文件</td></tr><tr><td align="center"><strong>Ctrl</strong>+<strong>C</strong></td><td align="center">中断执行</td></tr></tbody></table><h3 id="Jupyter-Notebook-快捷键"><a href="#Jupyter-Notebook-快捷键" class="headerlink" title="Jupyter Notebook 快捷键"></a>Jupyter Notebook 快捷键</h3><table><thead><tr><th align="center">使用</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>Shift</strong>+<strong>Enter</strong></td><td align="center">执行当前cell并新建一个cell</td></tr></tbody></table><h3 id="Python语句"><a href="#Python语句" class="headerlink" title="Python语句"></a>Python语句</h3><table><thead><tr><th align="center">语法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>type(a)</strong></td><td align="center">查看a的数据类型</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水调歌头·辛丑中秋</title>
      <link href="/2021/09/21/%E6%B0%B4%E8%B0%83%E6%AD%8C%E5%A4%B4%C2%B7%E8%BE%9B%E4%BA%A5%E4%B8%AD%E7%A7%8B/"/>
      <url>/2021/09/21/%E6%B0%B4%E8%B0%83%E6%AD%8C%E5%A4%B4%C2%B7%E8%BE%9B%E4%BA%A5%E4%B8%AD%E7%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="水调歌头·辛丑中秋"><a href="#水调歌头·辛丑中秋" class="headerlink" title="水调歌头·辛丑中秋"></a>水调歌头·辛丑中秋</h1><p>遥遥广寒宫，皎皎白玉盘。不知古今明月，照几回团圆？唱罢东坡宏愿，方念曲江怀远，单车载我还。风动鱼龙舞，归路绕汀湾。<br>钟山月，秦淮水，不眠愁。清秋千里，长江无语向东流。想见伊人在水，相思诚如满月，更向何中求？月华知我意，清辉寸寸悠。</p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词 </tag>
            
            <tag> 油先生选集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从巨潮资讯网爬取2020年上市公司财报</title>
      <link href="/2021/09/17/%E4%BB%8E%E5%B7%A8%E6%BD%AE%E8%B5%84%E8%AE%AF%E7%BD%91%E7%88%AC%E5%8F%962020%E5%B9%B4%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E8%B4%A2%E6%8A%A5/"/>
      <url>/2021/09/17/%E4%BB%8E%E5%B7%A8%E6%BD%AE%E8%B5%84%E8%AE%AF%E7%BD%91%E7%88%AC%E5%8F%962020%E5%B9%B4%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E8%B4%A2%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="从巨潮资讯网爬取2020年上市公司财报"><a href="#从巨潮资讯网爬取2020年上市公司财报" class="headerlink" title="从巨潮资讯网爬取2020年上市公司财报"></a>从巨潮资讯网爬取2020年上市公司财报</h1><p>前面说有三个比较官方的财报获取渠道：上交所、深交所、巨潮资讯网。这个巨潮资讯网来头不小，是证监会指定的上市公司信息披露网站，爬它一个免得去爬上交所+深交所，而且看起来比较好爬。</p><p>我是从上次看过的<a href="https://zhuanlan.zhihu.com/p/353785120">30行代码爬取A股上市公司年报</a>这篇文章里面，看到<a href="https://blog.csdn.net/qq_36780279/article/details/103946869">这篇介绍爬取巨潮资讯的文章的</a>。</p><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>这篇文章比较复杂，爬巨潮比我们前面爬的内容都要复杂，因为它对财报的下载url做了特殊处理，有一定反爬功能。这篇文章提供的原码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> requests  <span class="token keyword">def</span> <span class="token function">get_adress</span><span class="token punctuation">(</span>bank_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"http://www.cninfo.com.cn/new/information/topSearch/detailOfQuery"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'keyWord'</span><span class="token punctuation">:</span> bank_name<span class="token punctuation">,</span>        <span class="token string">'maxSecNum'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token string">'maxListNum'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    hd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Pragma'</span><span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip,deflate'</span><span class="token punctuation">,</span>        <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'70'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0(Windows NT 10.0;Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 75.0.3770.100Safari / 537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json,text/plain,*/*'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9,en;q=0.8'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    r <span class="token operator">=</span> r<span class="token punctuation">.</span>content    m <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    pk <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    orgId <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"orgId"</span><span class="token punctuation">]</span>   <span class="token comment">#获取参数</span>    plate <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"plate"</span><span class="token punctuation">]</span>    code <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>orgId<span class="token punctuation">,</span>plate<span class="token punctuation">,</span>code<span class="token punctuation">)</span>    <span class="token keyword">return</span> orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code  <span class="token keyword">def</span> <span class="token function">download_PDF</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#下载pdf</span>    url <span class="token operator">=</span> url    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>bank <span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span> file_name <span class="token operator">+</span> <span class="token string">".pdf"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">get_PDF</span><span class="token punctuation">(</span>orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://www.cninfo.com.cn/new/hisAnnouncement/query"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'stock'</span><span class="token punctuation">:</span> <span class="token string">'{},{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> orgId<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'tabName'</span><span class="token punctuation">:</span> <span class="token string">'fulltext'</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        <span class="token string">'pageNum'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'column'</span><span class="token punctuation">:</span> plate<span class="token punctuation">,</span>        <span class="token string">'category'</span><span class="token punctuation">:</span> <span class="token string">'category_ndbg_szsh;'</span><span class="token punctuation">,</span>        <span class="token string">'plate'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'seDate'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'searchkey'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'secid'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'sortName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'sortType'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'isHLtitle'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>     hd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Pragma'</span><span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip,deflate'</span><span class="token punctuation">,</span>        <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Content-Length': '216',</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'User-Agent:Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json,text/plain,*/*'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9,en;q=0.8'</span><span class="token punctuation">,</span>        <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Cookie': cookies</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    r <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    reports_list <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token string">'announcements'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> report <span class="token keyword">in</span> reports_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'摘要'</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token string">"20"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token string">'H'</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># http://static.cninfo.com.cn/finalpage/2019-03-29/1205958883.PDF</span>            pdf_url <span class="token operator">=</span> <span class="token string">"http://static.cninfo.com.cn/"</span> <span class="token operator">+</span> report<span class="token punctuation">[</span><span class="token string">'adjunctUrl'</span><span class="token punctuation">]</span>            file_name <span class="token operator">=</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span><span class="token operator">+</span>pdf_url<span class="token punctuation">,</span><span class="token string">"存放在当前目录：/"</span><span class="token operator">+</span>bank<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>file_name<span class="token punctuation">)</span>            download_PDF<span class="token punctuation">(</span>pdf_url<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># bank_list = [ '中信银行', '兴业银行', '平安银行','民生银行', '华夏银行','交通银行', '中国银行', '招商银行', '浦发银行','建设银行', ]</span>    bank_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"平安银行"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> bank <span class="token keyword">in</span> bank_list<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>bank<span class="token punctuation">)</span>        orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code <span class="token operator">=</span> get_adress<span class="token punctuation">(</span>bank<span class="token punctuation">)</span>        get_PDF<span class="token punctuation">(</span>orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下一家~"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"All done!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑一下试试，哇真的太棒了，果然能下载到财报。理论上我们只需要采用奥卡姆剃刀原则，改一下它的代码，把bank_list换为我们《2021年上市公司基本信息表》里面的股票简称，然后依次下载pdf到我们的指定目录就可以了。</p><p>然而为了学习起见，我们还是研究以下它的代码。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>巨潮资讯网下载财报的方式大致是需要先搜索，然后筛选年报，然后进入下载页面。</p><p><img src="download.jpg" alt="平安银行2020年财报下载页面"></p><p>下载页面有全屏功能，也有下载功能。我们点击右键“检查网页源代码”，搜索一下“公告下载”，在HTML源码中发现这样一行代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noticeDownload<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icongonggaoxiazai<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> 公告下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码告诉我们，用户在点击“公告下载”时，网站会调用“noticeDownload”函数。这个函数在哪里呢？直觉告诉我们在这个网页所引用的JavaScript源码里，我们翻到页面最下方，有这两行：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://static.cninfo.com.cn/new/js/lib/pdfobject.min.js?v=20210820023809<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://static.cninfo.com.cn/new/assets/js/disclosure/notice-detail.js?v=20210820023809<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分别给出了两份JavaScript代码的地址，我们选择右键“在新标签页中打开链接”，然后果然在第二个链接对应的代码中找到了“noticeDownload”函数，它里面是这样定义的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">noticeDownload</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">'/announcement/download?bulletinId='</span> <span class="token operator">+</span> announcementId <span class="token operator">+</span> <span class="token string">'&amp;announceTime='</span> <span class="token operator">+</span> announcementTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>意思就是在windows端打开一个窗口，就是我们的下载窗口，而要下载的pdf财报的地址就是这几个关键字拼接而来的。这几个关键字的内容在我们刚才打开的那个HTML中都可以找到。</p><p>于是我们获得了下载PDF的链接，只要访问这个链接，就可以下载PDF，类似于之前从WinGo下载上市公司2001-20019年财务报告的做法。</p><p>我们点击下载年报的时候，看到的链接也是这种模式的。并且我们可以看到，对于同一企业的不同年份，announcementId和announcementTime都是不同的，而得到这两个变量，就能得到下载链接。</p><h2 id="获取announcementId和announcementTime"><a href="#获取announcementId和announcementTime" class="headerlink" title="获取announcementId和announcementTime"></a>获取announcementId和announcementTime</h2><p>想想我们是从哪里来的，可能就可以知道怎么获取这两个值，上一页有所有年份的财报。</p><p>我们回到<a href="http://www.cninfo.com.cn/new/disclosure/stock?orgId=gssz0000001&amp;stockCode=000001#latestAnnouncement">这个页面</a>，右键“检查”，选择Network，在“分类”中选择年报，此时会记录下一条query，这是浏览器向服务器发送请求的信息，包括请求头、请求内容、回应内容等等，在回应内容Response中我们显然可以看到各种不同年份的announcementId和announcementTime：</p><p><img src="response.jpg" alt="分类query时的服务器Response"></p><p>然后我们点击Headers看看请求内容与请求头，可以看到：</p><p><img src="g.png" alt="General"></p><p><img src="rf.png" alt="Request Headers 与 Form Data"></p><p>其中Form Data是浏览器向Request URL发送的请求内容，Request Headers是请求头。我们前面的爬虫都是基于get方法的，这里要基于post方法来做，因为要涉及到构造请求头。这就是原代码中get_PDF()函数所做的事情。</p><p>请求头都容易做，请求内容是个性的，多看几个就会发现，stock和column是可变的，其他不可变。虽然变化有规律，但是原代码采用了更炫技的方法来实现：构建另一个post来获取。</p><h2 id="获取stock与plate"><a href="#获取stock与plate" class="headerlink" title="获取stock与plate"></a>获取stock与plate</h2><p>二二三四再来一次，我们在<a href="http://www.cninfo.com.cn/new/index">搜索页面</a>打开检查功能的Network项，进行一次搜索，浏览器为我们记录下了很多与服务器的互动过程：</p><p><img src="search.jpg" alt="检索过程中的Network记录"></p><p>原码作者已经贴心地为我们找到了，detailOfQuery这一项得到的Response包含了我们构建stock和column所需要的内容。那么我们只需要先做一次post，得到这个Response就可以了，我们看一下这个post的General与请求头、请求内容：</p><p><img src="g2.jpg" alt="General"></p><p><img src="rf2.jpg" alt="Request Headers 与 Form Data"></p><p>简单易懂，直接构建即可。这就是原码get_adress()函数做的事情。</p><p>至此我们就弄明白了原码的思路和做法。</p><p>还有另一种更为简单粗暴的方法，就是直接查看下载链接：</p><p><img src="download_url.png" alt="平安银行2020年年度报告下载链接"></p><p>同样可以发现，下载链接就是在<a href="http://www.cninfo.com.cn/new">http://www.cninfo.com.cn/new</a>后面拼接了这一小节获得的Response的adjunctUrl字段，代码里就用的这种方式。</p><p>由于原码时间久远，已经有些陈旧，我根据浏览器上记录下的信息更改了原码并做了注释，并把代码改为只获取2020年财报，下载到指定目录，并且优化了一下财报命名格式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> requests  <span class="token keyword">def</span> <span class="token function">get_adress</span><span class="token punctuation">(</span>company_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"http://www.cninfo.com.cn/new/information/topSearch/detailOfQuery"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'keyWord'</span><span class="token punctuation">:</span> company_name<span class="token punctuation">,</span>        <span class="token string">'maxSecNum'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token string">'maxListNum'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    hd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>        <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'70'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Referer': referer, # 用于告诉服务器我们是从哪个页面跳转到这个页面来的，这里可能并不需要</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'</span><span class="token punctuation">,</span>                <span class="token string">'Pragma'</span><span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span> <span class="token comment"># 强制要求缓存服务器在返回缓存的版本之前将请求提交到源头服务器进行验证。</span>        <span class="token comment"># 'X-Requested-With': 'XMLHttpRequest',  # 用于区分同步请求（等待回应之后再发送下一个数据包） 异步请求（不等待回应） 没有这一项表示同步请求</span>        <span class="token comment"># 'Cookie': cookie, # cookie是与用户个人信息有关的内容，这里不需要</span>    <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">,</span> data<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>     m <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token comment"># 获取响应内容转换编码格式，正常显示中文</span>    pk <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 将得到的JSON格式的响应转变为Python中可以使用的对象</span>    orgId <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"orgId"</span><span class="token punctuation">]</span>   <span class="token comment">#获取参数</span>    plate <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"plate"</span><span class="token punctuation">]</span>    code <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code  <span class="token keyword">def</span> <span class="token function">download_PDF</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> company<span class="token punctuation">,</span> orgId<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#下载pdf</span>    url <span class="token operator">=</span> url    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:\\爬取巨潮资讯网\\'</span><span class="token operator">+</span> company <span class="token operator">+</span> file_name <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> orgId <span class="token operator">+</span> <span class="token string">".pdf"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">get_PDF</span><span class="token punctuation">(</span>orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://www.cninfo.com.cn/new/hisAnnouncement/query"</span>    <span class="token keyword">if</span> plate <span class="token operator">==</span> <span class="token string">'sse'</span><span class="token punctuation">:</span>        sh_or_sz <span class="token operator">=</span> <span class="token string">'sh'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sh_or_sz <span class="token operator">=</span> <span class="token string">'sz'</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'stock'</span><span class="token punctuation">:</span> <span class="token string">'{},{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> orgId<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'tabName'</span><span class="token punctuation">:</span> <span class="token string">'fulltext'</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        <span class="token string">'pageNum'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'column'</span><span class="token punctuation">:</span> plate<span class="token punctuation">,</span>        <span class="token string">'category'</span><span class="token punctuation">:</span> <span class="token string">'category_ndbg_szsh;'</span><span class="token punctuation">,</span>        <span class="token string">'plate'</span><span class="token punctuation">:</span> sh_or_sz<span class="token punctuation">,</span>        <span class="token string">'seDate'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'searchkey'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'secid'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'sortName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'sortType'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'isHLtitle'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>     hd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>        <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Content-Length': '216', # 这一项不同企业不一定相同，作者注释掉了</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Pragma'</span><span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Cookie': cookies</span>    <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">,</span> data<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># parse.urlencode()这一步作用是把data进行解析，并不是必要的，但是加上可以方便了服务器了解我们的询问</span>    r <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    reports_list <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token string">'announcements'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> report <span class="token keyword">in</span> reports_list<span class="token punctuation">:</span> <span class="token comment"># 遍历所有财报</span>        <span class="token keyword">if</span> <span class="token string">'摘要'</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token string">"20"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 筛掉摘要和2000年前的财报</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token string">'H'</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 这个其实我没太明白，但是作用是筛掉名称中含有H的财报</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token string">"2020"</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 2020年财报</span>            pdf_url <span class="token operator">=</span> <span class="token string">"http://static.cninfo.com.cn/"</span> <span class="token operator">+</span> report<span class="token punctuation">[</span><span class="token string">'adjunctUrl'</span><span class="token punctuation">]</span>            file_name <span class="token operator">=</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span> <span class="token operator">+</span> company <span class="token operator">+</span> file_name<span class="token punctuation">)</span>            download_PDF<span class="token punctuation">(</span>pdf_url<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> company<span class="token punctuation">,</span> orgId<span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  company_list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'中信银行'</span><span class="token punctuation">,</span> <span class="token string">'兴业银行'</span><span class="token punctuation">,</span> <span class="token string">'平安银行'</span><span class="token punctuation">,</span><span class="token string">'民生银行'</span><span class="token punctuation">,</span> <span class="token string">'华夏银行'</span><span class="token punctuation">,</span><span class="token string">'交通银行'</span><span class="token punctuation">,</span> <span class="token string">'中国银行'</span><span class="token punctuation">,</span> <span class="token string">'招商银行'</span><span class="token punctuation">,</span> <span class="token string">'浦发银行'</span><span class="token punctuation">,</span><span class="token string">'建设银行'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token keyword">for</span> company <span class="token keyword">in</span> company_list<span class="token punctuation">:</span>    orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code <span class="token operator">=</span> get_adress<span class="token punctuation">(</span>company<span class="token punctuation">)</span>    get_PDF<span class="token punctuation">(</span>orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加入上市企业列表"><a href="#加入上市企业列表" class="headerlink" title="加入上市企业列表"></a>加入上市企业列表</h2><p>现在我们要做的就是更新一下company_list啦，我们只需要再次读取《2021年上市公司基本信息表》，重新修改代码。</p><p>另外我还发现，<a href="http://www.cninfo.com.cn/new/information/topSearch/detailOfQuery">http://www.cninfo.com.cn/new/information/topSearch/detailOfQuery</a>的query data中的企业简称中如果包含英文字母，默认都是转换为小写了，星号也需要去掉，原代码里也没有注意到这一点，所以需要改过来。也加入适当的休眠，反爬虫。</p><p><img src="debug1.jpg" alt="字符处理"></p><p>最终代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> os<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> requests<span class="token keyword">import</span> xlrd<span class="token keyword">import</span> time <span class="token builtin">dir</span> <span class="token operator">=</span> <span class="token string">'D:\\爬取巨潮资讯网\\'</span> <span class="token comment"># 这个目录需要自行创建并指定</span><span class="token keyword">def</span> <span class="token function">get_adress</span><span class="token punctuation">(</span>company_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"http://www.cninfo.com.cn/new/information/topSearch/detailOfQuery"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'keyWord'</span><span class="token punctuation">:</span> company_name<span class="token punctuation">,</span>        <span class="token string">'maxSecNum'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token string">'maxListNum'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    hd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>        <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'70'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Referer': referer, # 用于告诉服务器我们是从哪个页面跳转到这个页面来的，这里可能并不需要</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'</span><span class="token punctuation">,</span>                <span class="token string">'Pragma'</span><span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span> <span class="token comment"># 强制要求缓存服务器在返回缓存的版本之前将请求提交到源头服务器进行验证。</span>        <span class="token comment"># 'X-Requested-With': 'XMLHttpRequest',  # 用于区分同步请求（等待回应之后再发送下一个数据包） 异步请求（不等待回应） 没有这一项表示同步请求</span>        <span class="token comment"># 'Cookie': cookie, # cookie是与用户个人信息有关的内容，这里不需要</span>    <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">,</span> data<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>     m <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token comment"># 获取响应内容转换编码格式，正常显示中文</span>    pk <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment"># 将得到的JSON格式的响应转变为Python中可以使用的对象</span>    orgId <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"orgId"</span><span class="token punctuation">]</span>   <span class="token comment">#获取参数</span>    plate <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"plate"</span><span class="token punctuation">]</span>    code <span class="token operator">=</span> pk<span class="token punctuation">[</span><span class="token string">"keyBoardList"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"code"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code  <span class="token keyword">def</span> <span class="token function">download_PDF</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> company<span class="token punctuation">,</span> orgId<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#下载pdf</span>    url <span class="token operator">=</span> url    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">dir</span> <span class="token operator">+</span> file_name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> orgId <span class="token operator">+</span> <span class="token string">".pdf"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">get_PDF</span><span class="token punctuation">(</span>orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code<span class="token punctuation">,</span> company<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://www.cninfo.com.cn/new/hisAnnouncement/query"</span>    <span class="token keyword">if</span> plate <span class="token operator">==</span> <span class="token string">'sse'</span><span class="token punctuation">:</span>        sh_or_sz <span class="token operator">=</span> <span class="token string">'sh'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sh_or_sz <span class="token operator">=</span> <span class="token string">'sz'</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'stock'</span><span class="token punctuation">:</span> <span class="token string">'{},{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> orgId<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'tabName'</span><span class="token punctuation">:</span> <span class="token string">'fulltext'</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        <span class="token string">'pageNum'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'column'</span><span class="token punctuation">:</span> plate<span class="token punctuation">,</span>        <span class="token string">'category'</span><span class="token punctuation">:</span> <span class="token string">'category_ndbg_szsh;'</span><span class="token punctuation">,</span>        <span class="token string">'plate'</span><span class="token punctuation">:</span> sh_or_sz<span class="token punctuation">,</span>        <span class="token string">'seDate'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'searchkey'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'secid'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'sortName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'sortType'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'isHLtitle'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>     hd <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span><span class="token punctuation">,</span>        <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Content-Length': '216', # 这一项不同企业不一定相同，作者注释掉了</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.cninfo.com.cn'</span><span class="token punctuation">,</span>        <span class="token string">'Pragma'</span><span class="token punctuation">:</span> <span class="token string">'no-cache'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>        <span class="token comment"># 'Cookie': cookies</span>    <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hd<span class="token punctuation">,</span> data<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># parse.urlencode()这一步作用是把data进行解析，并不是必要的，但是加上可以方便了服务器了解我们的询问</span>    r <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    reports_list <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token string">'announcements'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> report <span class="token keyword">in</span> reports_list<span class="token punctuation">:</span> <span class="token comment"># 遍历所有财报</span>        <span class="token keyword">if</span> <span class="token string">'摘要'</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token string">"20"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 筛掉摘要和2000年前的财报</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token string">'H'</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 这个其实我没太明白，但是作用是筛掉名称中含有H的财报</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token string">"2020"</span> <span class="token keyword">in</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 2020年财报</span>            pdf_url <span class="token operator">=</span> <span class="token string">"http://static.cninfo.com.cn/"</span> <span class="token operator">+</span> report<span class="token punctuation">[</span><span class="token string">'adjunctUrl'</span><span class="token punctuation">]</span>            file_name <span class="token operator">=</span> report<span class="token punctuation">[</span><span class="token string">'announcementTitle'</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> company <span class="token keyword">not</span> <span class="token keyword">in</span> file_name<span class="token punctuation">:</span>                file_name <span class="token operator">=</span> company <span class="token operator">+</span> file_name            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载："</span> <span class="token operator">+</span> file_name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            download_PDF<span class="token punctuation">(</span>pdf_url<span class="token punctuation">,</span> file_name<span class="token punctuation">,</span> company<span class="token punctuation">,</span> orgId<span class="token punctuation">)</span>            <span class="token keyword">break</span> <span class="token comment"># 下载且只下载一个</span>            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'2021年上市公司基本信息表.xlsx'</span>wb <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token comment"># 打开表格文件</span>errors <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\15617\\Desktop\\'</span><span class="token operator">+</span><span class="token string">'异常信息_巨潮资讯网.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>sheet1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 通过索引获取表格</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sheet1<span class="token punctuation">.</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    company <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>row<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code <span class="token operator">=</span> get_adress<span class="token punctuation">(</span>company<span class="token punctuation">)</span>        get_PDF<span class="token punctuation">(</span>orgId<span class="token punctuation">,</span> plate<span class="token punctuation">,</span> code<span class="token punctuation">,</span> company<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"出现异常！"</span><span class="token operator">+</span>company<span class="token punctuation">)</span>        errors<span class="token punctuation">.</span>write<span class="token punctuation">(</span>company<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意我把下载目录放到了代码最前面。代码可以正常运行。总共爬取了4206个公司2020年的年报，发现261个异常，经查验，都是没有在巨潮发布年报的公司。</p><p>我承认这次有点复杂，不过正好极大地丰富了我们的知识面，不是吗<span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从WinGo下载上市公司2001-20019年财务报告</title>
      <link href="/2021/09/16/%E4%BB%8EWinGo%E4%B8%8B%E8%BD%BD%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B82001-20019%E5%B9%B4%E8%B4%A2%E5%8A%A1%E6%8A%A5%E5%91%8A/"/>
      <url>/2021/09/16/%E4%BB%8EWinGo%E4%B8%8B%E8%BD%BD%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B82001-20019%E5%B9%B4%E8%B4%A2%E5%8A%A1%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="从WinGo下载上市公司2001-20019年财务报告"><a href="#从WinGo下载上市公司2001-20019年财务报告" class="headerlink" title="从WinGo下载上市公司2001-20019年财务报告"></a>从WinGo下载上市公司2001-20019年财务报告</h1><p>上市公司基本信息我们爬了不少了，用谷歌搜索“Python 爬取上市公司年报”：</p><p><img src="google.jpg" alt="谷歌搜索“Python 爬取上市公司年报”"></p><p>第一篇文章号称30行代码就可以完成，我们不妨看一下它是怎么做的。</p><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>这篇文章说，A股上市公司财报分别在上交所、深交所、巨潮资讯网披露，网上有许多爬这三个网站的代码，不同网站url不同，爬取方式也不相同。</p><p>WinGo文构平台为我们提供了快捷可用的数据集，包含了2001年-2019年A股上市公司财报的下载链接。我们看一下，<a href="http://www.wingodata.com/#/dash/public-paper">这里</a>提供了表格和下载链接。</p><p>下载到表格之后，只需要对表格做读取，然后访问指定url，下载pdf就可以了。</p><p>原文代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> osrawdata<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'公司竞争战略指标_2001_2019.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>iloc<span class="token punctuation">)</span><span class="token punctuation">:</span>    rawdata<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> rawdata<span class="token punctuation">[</span><span class="token string">'rep_period'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>year    firm <span class="token operator">=</span> rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'security_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment"># 去掉*ST的*号，文件命名不含特殊符号</span>    code <span class="token operator">=</span> rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'security_code'</span><span class="token punctuation">]</span>    year <span class="token operator">=</span> rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'year'</span><span class="token punctuation">]</span>    pdf_url <span class="token operator">=</span> rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'rep_link'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> firm<span class="token punctuation">,</span>code<span class="token punctuation">,</span>year<span class="token punctuation">,</span>pdf_url<span class="token keyword">def</span> <span class="token function">get_filepath</span><span class="token punctuation">(</span>firm<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> <span class="token string">'F:\\财务报告\\'</span>    file_name <span class="token operator">=</span> <span class="token string">"{}-{}-{}年年度报告.pdf"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>firm<span class="token punctuation">,</span>year<span class="token punctuation">)</span>    file_full_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span>    <span class="token keyword">return</span> file_full_name<span class="token keyword">def</span> <span class="token function">download_pdf</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>file_full_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">''</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">6.1</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">39.0</span><span class="token number">.2171</span><span class="token number">.95</span> Safari<span class="token operator">/</span><span class="token number">537.36</span> OPR<span class="token operator">/</span><span class="token number">26.0</span><span class="token number">.1656</span><span class="token number">.60</span><span class="token string">''</span><span class="token punctuation">}</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_full_name<span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        <span class="token keyword">for</span> chunk <span class="token keyword">in</span> res<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 这种下载方式可以边下载边存硬盘</span>            <span class="token keyword">if</span> chunk<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                <span class="token keyword">for</span> iloc <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rawdata<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    firm<span class="token punctuation">,</span> code<span class="token punctuation">,</span> year<span class="token punctuation">,</span> pdf_url <span class="token operator">=</span> get_data<span class="token punctuation">(</span>iloc<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载{}，股票代码{}的{}年报"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>firm<span class="token punctuation">,</span>code<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span>    file_full_name <span class="token operator">=</span> get_filepath<span class="token punctuation">(</span>firm<span class="token punctuation">,</span>year<span class="token punctuation">)</span>    download_pdf<span class="token punctuation">(</span>pdf_url<span class="token punctuation">,</span>file_full_name<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"===========下载完成=========="</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>直接跑上面这份代码会报一些错误，主要是作者用的是xlsx的表格，而最新的文件已经是csv格式了；而且原码里面获取年份的方式不太正确；原码获取股票编号的方式也不准确。我还把下载所有年份财报，改为下载2019年财报。最终代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> osrawdata<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'公司竞争战略指标_2001_2019.csv'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>iloc<span class="token punctuation">)</span><span class="token punctuation">:</span>    firm <span class="token operator">=</span> rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'security_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment"># 去掉*ST的*号，文件命名不含特殊符号</span>    code <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'security_code'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    year <span class="token operator">=</span> rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'rep_period'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>    pdf_url <span class="token operator">=</span> rawdata<span class="token punctuation">.</span>at<span class="token punctuation">[</span>iloc<span class="token punctuation">,</span><span class="token string">'rep_link'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> firm<span class="token punctuation">,</span>code<span class="token punctuation">,</span>year<span class="token punctuation">,</span>pdf_url<span class="token keyword">def</span> <span class="token function">get_filepath</span><span class="token punctuation">(</span>firm<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>    file_path <span class="token operator">=</span> <span class="token string">'D:\\WinGo财务报告\\'</span>    file_name <span class="token operator">=</span> <span class="token string">"{}-{}-{}年年度报告.pdf"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span>firm<span class="token punctuation">,</span>year<span class="token punctuation">)</span>    file_full_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span>    <span class="token keyword">return</span> file_full_name<span class="token keyword">def</span> <span class="token function">download_pdf</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>file_full_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span><span class="token punctuation">}</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_full_name<span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        <span class="token keyword">for</span> chunk <span class="token keyword">in</span> res<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> chunk<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>                <span class="token keyword">for</span> iloc <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rawdata<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    firm<span class="token punctuation">,</span> code<span class="token punctuation">,</span> year<span class="token punctuation">,</span> pdf_url <span class="token operator">=</span> get_data<span class="token punctuation">(</span>iloc<span class="token punctuation">)</span>    <span class="token keyword">if</span> year <span class="token operator">==</span> <span class="token string">'2019'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载{}，股票代码{}的{}年报"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>firm<span class="token punctuation">,</span>code<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span>    file_full_name <span class="token operator">=</span> get_filepath<span class="token punctuation">(</span>firm<span class="token punctuation">,</span>year<span class="token punctuation">)</span>    download_pdf<span class="token punctuation">(</span>pdf_url<span class="token punctuation">,</span>file_full_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常的简单粗暴，我总共下载到了3680个2019年的上市公司财报。如果需要最新的2020年的财报，就需要找别的办法啦<span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Tushare获取上市公司简介</title>
      <link href="/2021/09/16/%E4%BB%8ETushare%E8%8E%B7%E5%8F%96%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/09/16/%E4%BB%8ETushare%E8%8E%B7%E5%8F%96%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="从Tushare获取上市公司简介"><a href="#从Tushare获取上市公司简介" class="headerlink" title="从Tushare获取上市公司简介"></a>从Tushare获取上市公司简介</h1><p>经过一些简单的百度和谷歌就可以知道，Python常用的金融数据包包括Tushare、BaoStock等等，我们用谷歌搜一下“tushare 上市公司信息”：</p><p><img src="google.jpg" alt="谷歌搜索“tushare 上市公司信息”"></p><p>打开第一个网页，这是Tushare社区的一个文档页面，很欣慰，Tushare提供了一个公司简介参数：</p><p><img src="tushare.jpg" alt="Tusahre上市公司基本信息"></p><p>很好，我们来试一下看看这里的公司简介是什么样的。</p><h2 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h2><p>文档提供了一段样例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pro <span class="token operator">=</span> ts<span class="token punctuation">.</span>pro_api<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#或者</span><span class="token comment">#pro = ts.pro_api('your token')</span>df <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SZSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,chairman,manager,secretary,reg_capital,setup_date,province'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这段代码之前需要安装tushare：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip install tushare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完毕后，直接运行这段代码会提示：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">请设置tushare pro的token凭证码，如果没有请访问https://waditu.com注册申请<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们需要注册一个社区账号，然后进行个人信息设置，得到token和积分，才能调用这个接口。比如我操作之后执行这段代码就成功了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tushare <span class="token keyword">as</span> tspro <span class="token operator">=</span> ts<span class="token punctuation">.</span>pro_api<span class="token punctuation">(</span><span class="token string">'c9c184bef0644923bc05e6e096d71fbf929c731163be9db98d858a69'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SZSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,chairman,manager,secretary,reg_capital,setup_date,province'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>简单易懂，稍微看看文档就明白，SSE上交所，SZSE深交所，fields参数是筛选我们想要的参数。</p><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>我们稍微改一下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tushare <span class="token keyword">as</span> tspro <span class="token operator">=</span> ts<span class="token punctuation">.</span>pro_api<span class="token punctuation">(</span><span class="token string">'c9c184bef0644923bc05e6e096d71fbf929c731163be9db98d858a69'</span><span class="token punctuation">)</span>ssedf <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,introduction'</span><span class="token punctuation">)</span>szsedf <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SZSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,introduction'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ssedf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>szsedf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就得到了我们最在意的introduction参数的内容。</p><p>接下来该怎么办呢？股票代号是唯一的，可以用于跟我们以前的爬取结果整合；为了提取introduction的内容，我们首先需要知道ssedf和szsedf分别是什么类的对象，才好对症下药。谷歌一下“Python 获取数据类型”就可以知道，可以借助type()函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>ssedf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>szsedf<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后我们就知道二者都是padas包里面的Dataframe类型。</p><p>对于这个类型小油油是比较熟悉的，因为比较经典。参见我的这篇早期的博文：<a href="https://blog.csdn.net/qq_30565883/article/details/79443069?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163177968216780274117002%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=163177968216780274117002&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-79443069.pc_v2_rank_blog_default&amp;utm_term=dataframe&amp;spm=1018.2226.3001.4450">pandas.Dataframe增删改查详细操作</a>。这里简单介绍几个使用方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>ssedf<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 行数</span><span class="token keyword">print</span><span class="token punctuation">(</span>ssedf<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'ts_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 第0行的ts_code列的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>ssedf<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'introduction'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 第0行的introduction列的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有这两种用法就可以满足我们的基本需求了。</p><h2 id="保存为文本"><a href="#保存为文本" class="headerlink" title="保存为文本"></a>保存为文本</h2><p>接下来就是我们熟悉的操作了，把introduction保存出来，便于后续操作。比较遗憾的是Tushare没有提供公司名，我们就去掉ts_code点号后面的内容，作为文件名吧：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> tushare <span class="token keyword">as</span> tspro <span class="token operator">=</span> ts<span class="token punctuation">.</span>pro_api<span class="token punctuation">(</span><span class="token string">'c9c184bef0644923bc05e6e096d71fbf929c731163be9db98d858a69'</span><span class="token punctuation">)</span>ssedf <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,introduction'</span><span class="token punctuation">)</span>szsedf <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SZSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,introduction'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>ssedf<span class="token punctuation">,</span> szsedf<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 这是一个Dataframe按列合并的操作，ignore_index=True表示重新排序</span><span class="token builtin">dir</span> <span class="token operator">=</span> <span class="token string">'D:\\Tushare导出\\'</span> <span class="token comment"># 这个目录需要自行创建并指定</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>name <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token string">'ts_code'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>text <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token string">'introduction'</span><span class="token punctuation">]</span>fh <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们把ssedf和szsedf合并，然后对每一行获取ts_code和introduction，ts_code取前6位的股票编号作为我们的文件名，保存到dir目录下。</p><p>然而执行这段代码到第427行会报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">427</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">18</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>    fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> write<span class="token punctuation">(</span><span class="token punctuation">)</span> argument must be <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>意思是说df中有的行的introduction为None，即啥也没有，那么我们就判断一下了，当introduction值为None或者为’’空字符串时，就不保存，并且输出股票代码到一个指定文件中。我认为股票代码是不会为空的，如果能为空就算它狠，我就该换工具包了，我这里就不判断了。</p><p>重新写一下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> tushare <span class="token keyword">as</span> tspro <span class="token operator">=</span> ts<span class="token punctuation">.</span>pro_api<span class="token punctuation">(</span><span class="token string">'c9c184bef0644923bc05e6e096d71fbf929c731163be9db98d858a69'</span><span class="token punctuation">)</span>ssedf <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,introduction'</span><span class="token punctuation">)</span>szsedf <span class="token operator">=</span> pro<span class="token punctuation">.</span>stock_company<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'SZSE'</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">'ts_code,introduction'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>ssedf<span class="token punctuation">,</span> szsedf<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 这是一个Dataframe按列合并的操作，ignore_index=True表示重新排序</span><span class="token builtin">dir</span> <span class="token operator">=</span> <span class="token string">'D:\\Tushare导出\\'</span> <span class="token comment"># 这个目录需要自行创建并指定</span>empty <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\15617\\Desktop\\'</span><span class="token operator">+</span><span class="token string">'空信息_Tushare.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>name <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token string">'ts_code'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>text <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token string">'introduction'</span><span class="token punctuation">]</span><span class="token keyword">if</span> text <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> text<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>empty<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span>fh <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>empty<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行一下即可。跑的速度非常快，比百度百科快很多，我这里跑下来一共获得了4637个有效文件。</p><p>后续如果有必要的话可以根据股票编号，结合我们的《2021年上市公司基本信息表》，用Python查询股票编号对应的公司名称，然后把百度百科爬取的结果和Tushare导出的结果整合起来。</p><p>确实很简单，easy！小仙女要加油喔😆😆😆</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从百度百科爬取上市公司介绍</title>
      <link href="/2021/09/16/%E4%BB%8E%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E7%88%AC%E5%8F%96%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/09/16/%E4%BB%8E%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E7%88%AC%E5%8F%96%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="从百度百科爬取上市公司介绍"><a href="#从百度百科爬取上市公司介绍" class="headerlink" title="从百度百科爬取上市公司介绍"></a>从百度百科爬取上市公司介绍</h1><p>接下来我们实现一个稍微复杂些的爬虫，从百度百科爬取上市公司介绍内容。</p><h2 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h2><p>本着避难就易的原则，我们首先来谷歌以下”爬取百度百科“，看看能不能找到有用的代码：</p><p><img src="google.png" alt="谷歌搜索“爬取百度百科”"></p><p>然后点开第一个链接看一看。这篇文章告诉我们只需要在“<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB">https://baike.baidu.com/item/</a>”后面加上一个名词，就可以得到百度百科下该名词的词条，然后进行爬取，我们可以看一眼百度百科测试一下，确实是这样的。</p><p>这篇文章提供了这样一段代码来进行指定查询词语的爬取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 请求地址</span>    url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com/item/'</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment"># 请求头部</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>     <span class="token punctuation">}</span>    <span class="token comment"># 利用请求地址和请求头部构造请求对象</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span>    <span class="token comment"># 发送请求，获得响应</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token comment"># 读取响应，获得文本</span>    text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 构造 _Element 对象</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment"># 使用 xpath 匹配数据，得到匹配字符串列表</span>    sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary")]//text()'</span><span class="token punctuation">)</span>     <span class="token comment"># 过滤数据，去掉空白</span>    sen_list_after_filter <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> sen_list<span class="token punctuation">]</span>    <span class="token comment"># 将字符串列表连成字符串并返回</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sen_list_after_filter<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'查询词语：'</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> query<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询结果：%s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码里面定义了main函数，其主要作用是在有多个Python文件时保证从这里开始执行，当然这里并用不到。</p><p>我们运行一下这段代码，发现它可以爬取到百度百科的前面几段话，可能不太很符合我们的需求，但是还属于可以抢救一下。我们先读一下代码试试。</p><h2 id="原码重写与解读"><a href="#原码重写与解读" class="headerlink" title="原码重写与解读"></a>原码重写与解读</h2><p>首先重写一下代码，便于调试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreecontent <span class="token operator">=</span> <span class="token string">'仙女'</span><span class="token comment"># 请求地址</span>url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com/item/'</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 请求头部</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span> <span class="token punctuation">}</span><span class="token comment"># 利用请求地址和请求头部构造请求对象</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span><span class="token comment"># 发送请求，获得响应</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token comment"># 读取响应，获得文本</span>text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 构造 _Element 对象</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 使用 xpath 匹配数据，得到匹配字符串列表</span>sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary")]//text()'</span><span class="token punctuation">)</span> <span class="token comment"># 过滤数据，去掉空白</span>sen_list_after_filter <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> sen_list<span class="token punctuation">]</span><span class="token comment"># 将字符串列表连成字符串并返回</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sen_list_after_filter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑一下，是可以跑通的。如果把”仙女“字段换为”平安银行股份有限公司“，是不是也能正确得到结果呢？请小仙女试一下啦。</p><p>这段代码定义了函数query()用于获得爬取结果，核心是发送请求，获得响应的这句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 发送请求，获得响应</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后通过调试和百度、查阅文档、查看网页源码等，我们有以下认识：</p><ol><li>req需要根据请求地址和请求头部来构造。请求地址很好理解，请求头部主要是用来模拟浏览器访问的，有固定写法。这里我们可以看一下文档便知；</li><li>urllib.parse.quote()方法是用于对汉字做特定处理，使其能出现在url链接中；</li><li>得到的text是包含了网页HTML代码在内的很长很长的一段字符串；</li><li>html.xpath()方法实现了内容筛选功能，sen_list是筛选后得到的一个充满文本的list；</li><li>对sen_list做了去空白和拼接然后输出结果。</li></ol><p>其中html.xpath()的筛选功能是采用了一种叫做XPath的语言，我们不用管，这不太重要，即使在网页上我们也能找到爬取其他文字内容的关键字：para</p><p>然后我们把代码里面的筛选规则照猫画虎，替换一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary") or contains(@class,"para")]//text()'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>怎么样，是不是得到了我们想要的全文爬取的功能啦<span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>我们重新复原一下代码，因为一个完整的query()函数是便于我们后面调用的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 请求地址</span>    url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com/item/'</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment"># 请求头部</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>     <span class="token punctuation">}</span>    <span class="token comment"># 利用请求地址和请求头部构造请求对象</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span>    <span class="token comment"># 发送请求，获得响应</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token comment"># 读取响应，获得文本</span>    text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 构造 _Element 对象</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment"># 使用 xpath 匹配数据，得到匹配字符串列表</span>    sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary") or contains(@class,"para")]//text()'</span><span class="token punctuation">)</span>    <span class="token comment"># 过滤数据，去掉空白</span>    sen_list_after_filter <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> sen_list<span class="token punctuation">]</span>    <span class="token comment"># 将字符串列表连成字符串并返回</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sen_list_after_filter<span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token string">'仙女'</span>result <span class="token operator">=</span> query<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询结果：%s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注意一下，如果小仙女认为我们只需要爬取第一段即可，那就不用改那一句啦。</p><h2 id="Python读取表格与文件保存"><a href="#Python读取表格与文件保存" class="headerlink" title="Python读取表格与文件保存"></a>Python读取表格与文件保存</h2><p>那么接下来我们怎么做呢？上一节我们已经获得了上市公司的基本信息，我们只需要按照公司名称作为关键字，去分别爬取就好了。这里首先涉及到一个问题：读取excel并获取一系列字符串类型的公司名。因为我们需要字符串类型的公司名去做拼接和检索。</p><p>因为前面<a href="https://mimiyouyou.com/2021/09/06/python-zong-jie-yu-lian-xi/">Python总结与练习</a>一节已经做过excel读取的练习，所以这里直接给出读取《2021年上市公司基本信息表》中的公司名称的代码，主要参考了<a href="https://zhuanlan.zhihu.com/p/38492442">这篇文章</a>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'2021年上市公司基本信息表.xlsx'</span>wb <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token comment">#打开文件</span>sheet1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#通过索引获取表格</span><span class="token comment"># print(sheet1.name,sheet1.nrows,sheet1.ncols)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sheet1<span class="token punctuation">.</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>content <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>row<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token comment"># print(content)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们已经得到了content，在循环中对content分别进行query()调用即可得到result，将result保存为我们想要的格式即可。</p><p>现在还有一个问题就是保存文本的问题，我们以txt为例子，简要说明一下怎样把字符串result保存为txt文本，主要参考<a href="https://blog.csdn.net/qq_22521211/article/details/80052085">这篇文章</a>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> <span class="token string">'我是平安银行'</span>fh <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'平安银行.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>试一下，是不是可以成功保存为txt啦。</p><p>至此我们已经打通了从我们的《2021年上市公司基本信息表》到爬取百度百科，再到保存到本地的所有环节，把这些环节拼起来就好啦。</p><h2 id="按照公司名爬取百度百科"><a href="#按照公司名爬取百度百科" class="headerlink" title="按照公司名爬取百度百科"></a>按照公司名爬取百度百科</h2><p>我们现在来把所有环节拼起来，总体思路如下：</p><div id="flowchart-0" class="flow-chart"></div><p>当然还有一些细枝末节的问题，比如txt的名称需要字符串拼接，txt的位置需要自己确定然后拼接，异常监测等等，看下面的这段汇总代码即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> xlrd<span class="token keyword">from</span> datetime <span class="token keyword">import</span> date<span class="token punctuation">,</span>datetime<span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 请求地址</span>    url <span class="token operator">=</span> <span class="token string">'https://baike.baidu.com/item/'</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment"># 请求头部</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36'</span>     <span class="token punctuation">}</span>    <span class="token comment"># 利用请求地址和请求头部构造请求对象</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">)</span>    <span class="token comment"># 发送请求，获得响应</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    <span class="token comment"># 读取响应，获得文本</span>    text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 构造 _Element 对象</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment"># 使用 xpath 匹配数据，得到匹配字符串列表</span>    sen_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"lemma-summary") or contains(@class,"lemmaWgt-lemmaSummary") or contains(@class,"para")]//text()'</span><span class="token punctuation">)</span>    <span class="token comment"># 过滤数据，去掉空白</span>    sen_list_after_filter <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> sen_list<span class="token punctuation">]</span>    <span class="token comment"># 将字符串列表连成字符串并返回</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sen_list_after_filter<span class="token punctuation">)</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'2021年上市公司基本信息表.xlsx'</span>wb <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token comment"># 打开表格文件</span><span class="token builtin">dir</span> <span class="token operator">=</span> <span class="token string">'D:\\爬取百度百科\\'</span> <span class="token comment"># 这个目录需要自行创建并指定</span>errors <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\15617\\Desktop\\'</span><span class="token operator">+</span><span class="token string">'异常信息_百度百科.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>empty <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:\\Users\\15617\\Desktop\\'</span><span class="token operator">+</span><span class="token string">'空信息_百度百科.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>sheet1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 通过索引获取表格</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sheet1<span class="token punctuation">.</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>content <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>row<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token keyword">try</span><span class="token punctuation">:</span>result <span class="token operator">=</span> query<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>fh <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token operator">+</span>content<span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>empty<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>errors<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>errors<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>empty<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段汇总代码里面我们还：</p><ul><li>使用了try except作为异常检测，如果发现有未成功爬取的公司，就把公司名输出到异常信息.txt中，方便我们后面回溯；</li><li>还输出i作为进度提示；</li><li>将爬取结果为空的公司输出到空信息.txt中，方便后续回溯，当然我们可以保存为别的格式，完全取决于小仙女的需求和操作便利性；</li><li>使用.replace()替换掉爬取结果中的特殊字段。</li></ul><p>最终我们发现还有100多个公司是百度百科里面没有的，没法去爬啦。我这里跑下来一共得到了4354个有效文件。</p><p>这一节就到这里啦，怎么样，是不是很简单呀<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=&gt;start: 开始op=&gt;operation: 定义query()函数，打开《2021年上市公司基本信息表》opx=&gt;operation: 读取一个公司名contentop2=&gt;operation: 爬取内容result=query(content)op3=&gt;operation: 保存result为txtcond=&gt;condition: 读完所有公司了吗？e=&gt;end: 结束st-&gt;op-&gt;opx-&gt;op2-&gt;op3-&gt;condcond(yes)-&gt;econd(no)-&gt;opx</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从中商产业研究院爬取2021年A股上市企业基本信息表</title>
      <link href="/2021/09/15/%E4%BB%8E%E4%B8%AD%E5%95%86%E4%BA%A7%E4%B8%9A%E7%A0%94%E7%A9%B6%E9%99%A2%E7%88%AC%E5%8F%962021%E5%B9%B4A%E8%82%A1%E4%B8%8A%E5%B8%82%E4%BC%81%E4%B8%9A%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E8%A1%A8/"/>
      <url>/2021/09/15/%E4%BB%8E%E4%B8%AD%E5%95%86%E4%BA%A7%E4%B8%9A%E7%A0%94%E7%A9%B6%E9%99%A2%E7%88%AC%E5%8F%962021%E5%B9%B4A%E8%82%A1%E4%B8%8A%E5%B8%82%E4%BC%81%E4%B8%9A%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="从中商产业研究院爬取2021年A股上市企业基本信息表"><a href="#从中商产业研究院爬取2021年A股上市企业基本信息表" class="headerlink" title="从中商产业研究院爬取2021年A股上市企业基本信息表"></a>从中商产业研究院爬取2021年A股上市企业基本信息表</h1><p>选这个网站来爬不是因为它有多好，而是因为爬它很简单，跟我们也有关系，就先爬着玩一下，当作一个入门吧。</p><h2 id="原代码"><a href="#原代码" class="headerlink" title="原代码"></a>原代码</h2><p>本着先易后难的精神，我在谷歌搜索了“python 获取上市公司信息”：</p><p><img src="google.png" alt="谷歌搜索“python 获取上市公司信息”"></p><p>找到了<a href="https://zhuanlan.zhihu.com/p/137965211">这篇博文</a>，这是一篇从中商产业研究院网站爬取2019年A股上市公司基本信息的博文，它告诉我们<a href="https://s.askci.com/stock/a/0-0?reportTime=2019-12-31&amp;pageNum=1#QueryCondition">在这里</a>可以看到2019年A股上市公司的基本信息，大致如下图：</p><p><img src="fig.jpg" alt="2019年A股上市公司基本信息页面"></p><p>并且提供了以下一段很短的代码来爬取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> timestart_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 获取程序开始运行时间</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span> <span class="token punctuation">)</span>               <span class="token comment"># 定义一个空的DataFrame用于存储数据</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># 爬取全部187页数据，设置为200页，确保都覆盖</span>        url <span class="token operator">=</span> <span class="token string">'http://s.askci.com/stock/a/?reportTime=2019-12-31&amp;pageNum={i}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">=</span>i<span class="token punctuation">)</span> <span class="token comment"># 日期可以改，可获取季度数据</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 第1个表格故填[0],经观察发现所需表格是网页中第4个表格，故为[3]。获得后纵向追加到df中</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>              <span class="token comment"># 每隔0.5秒访问一次，应对反爬措施</span>        endtime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在获取上市公司基本信息表第'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'页'</span><span class="token punctuation">,</span><span class="token string">'已运行%.2f秒'</span> <span class="token operator">%</span> endtime<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>     <span class="token comment"># 将原本的int数据类型转换为文本，补齐股票代码为6位，用的时候必须加上.str前缀</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'序号'</span><span class="token punctuation">,</span><span class="token string">'招股书'</span><span class="token punctuation">,</span><span class="token string">'公司财报'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 删除多余的列，axis=1（按列方向操作）、inplace=True（修改完数据，在原数据上保存）</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'2019年上市公司基本信息表.xlsx'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'*******目标爬取完成*******'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致采用了pandas模块来读取网页信息，按照每页网页的url规律来模拟跳转页面，然后删掉无效信息，保存为表格文件。</p><p>在这段代码中，我们还可以看到“try+except”的异常监测机制，方法链的使用，时间模块的使用，字符串前面加“r”表示无转义字符的字符串，等等。</p><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>然而这份代码已经陈旧了，我们想要最新的信息怎么办呢。打开中商产业研究院首页，点击产业数据→数据库→A股数据，我们果然找到了最新的信息。替换一下原代码中的url就好啦。同样的，把最大页数也要改一下。</p><p>在试着跑了一下之后我发现，sleep时间0.5秒还是太短了，跑不完200多页就被反爬了，于是我改到5秒。顺利爬取完毕，得到表格。</p><p>我们采用的代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> timestart_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 获取程序开始运行时间</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span> <span class="token punctuation">)</span>               <span class="token comment"># 定义一个空的DataFrame用于存储数据</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">226</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># 爬取全部187页数据，设置为200页，确保都覆盖</span>        url <span class="token operator">=</span> <span class="token string">'https://s.askci.com/stock/a/0-0?reportTime=2021-06-30&amp;pageNum={i}#QueryCondition'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token operator">=</span>i<span class="token punctuation">)</span> <span class="token comment"># 日期可以改，可获取季度数据</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 第1个表格故填[0],经观察发现所需表格是网页中第4个表格，故为[3]。获得后纵向追加到df中</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>              <span class="token comment"># 每隔1秒访问一次，应对反爬措施</span>        endtime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在获取上市公司基本信息表第'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'页'</span><span class="token punctuation">,</span><span class="token string">'已运行%.2f秒'</span> <span class="token operator">%</span> endtime<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出错啦'</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'股票代码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>     <span class="token comment"># 将原本的int数据类型转换为文本，补齐股票代码为6位，用的时候必须加上.str前缀</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'序号'</span><span class="token punctuation">,</span><span class="token string">'招股书'</span><span class="token punctuation">,</span><span class="token string">'公司财报'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># 删除多余的列，axis=1（按列方向操作）、inplace=True（修改完数据，在原数据上保存）</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'2021年上市公司基本信息表.xlsx'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'*******目标爬取完成*******'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么样，是不是很简单呀<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h2><p>经过一些初步研究，我发现比较稳定的、成体系的信息来源包括：</p><ul><li>百度百科对上市公司的介绍；</li><li>沪交所、深交所等官方数据库，或东方财富、网易财经等财经网站；</li><li>其他研究人员公布的数据集；</li><li>Tushare、Akshare等Python开源金融库。</li></ul><p>目前我感觉如果要从每个公司的官网去爬简介太困难了，因为极其不成体系，每个公司的简介页面都不尽相同，没有规律可言。</p><p>公司财报确实是一个很好的渠道，解析财报需要至少以下工作：</p><ul><li>足够大的硬盘，因为我们要下载很多很多的文件，处理很多很多的文件；</li><li>Python对PDF文件的处理办法，PDF转其他格式的办法，因为财报大部分都是PDF格式的。</li></ul><p>后面我们看情况把这些都爬一下或者爬一部分。做完这些，我们再：</p><ol><li>标定数据集；</li><li>与NLP相关研究进行对接。</li></ol><p>我们一点点的做起来就好啦，都不难的，最终只取决于我们需要什么样的信息。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>辛丑教师节拟赠导师</title>
      <link href="/2021/09/09/%E8%BE%9B%E4%B8%91%E6%95%99%E5%B8%88%E8%8A%82%E6%8B%9F%E8%B5%A0%E5%AF%BC%E5%B8%88/"/>
      <url>/2021/09/09/%E8%BE%9B%E4%B8%91%E6%95%99%E5%B8%88%E8%8A%82%E6%8B%9F%E8%B5%A0%E5%AF%BC%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="辛丑教师节拟赠导师"><a href="#辛丑教师节拟赠导师" class="headerlink" title="辛丑教师节拟赠导师"></a>辛丑教师节拟赠导师</h1><p>治业精勤真吾师，学贯中西一大家。<br>安中楼前育桃李，紫峰厦下沃新花。<br>人生得幸闻教诲，恩师珍重我奋发！</p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
            <tag> 油先生选集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python总结与练习</title>
      <link href="/2021/09/06/Python%E6%80%BB%E7%BB%93%E4%B8%8E%E7%BB%83%E4%B9%A0/"/>
      <url>/2021/09/06/Python%E6%80%BB%E7%BB%93%E4%B8%8E%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python总结与练习"><a href="#Python总结与练习" class="headerlink" title="Python总结与练习"></a>Python总结与练习</h1><p>至此我们基本把Python中最重要的语法和概念介绍了一遍，包括变量的定义与基本运算，循环与条件语句，函数的定义和使用，面向对象编程等等。基于这些内容我们已经能写很多很多程序，实现很多很多功能了。</p><p>除此之外，Python中还有一些概念，如迭代器与生成器、错误与异常处理、命名空间、多线程等等，由于不是最常用的，所以没介绍，后面我们碰到了再学。</p><h2 id="简单练习"><a href="#简单练习" class="headerlink" title="简单练习"></a>简单练习</h2><p>我们先来做一些只涉及到基本语法的练习题，锻炼一下对基础知识和编程思维。</p><p>请小仙女写一段Python代码，分别实现以下功能：</p><ul><li>输入一个年份，该代码可以判断并输出该年是否为闰年；</li><li>输出一个10行的杨辉三角；</li><li>给定三条边长，判断是否可以构成三角形；</li><li>找到一个全为数字的list中的最大值、最小值、均值、中值；</li><li>给定一个日期的年月日值，输出这个时期是当年的第几天；</li></ul><h2 id="进阶练习"><a href="#进阶练习" class="headerlink" title="进阶练习"></a>进阶练习</h2><p>在我们平时写程序的过程中，大部分时候都是配置一些环境，安装一些包，导入包中的一些模块，查一下这个包的文档，看看某个类和接口怎么用，做一些简单的处理，写一些逻辑，然后就可以了。</p><p>更常见的情况是我们想要实现某个简单的功能，比如图片读取，或者文件读取，然后就去百度或者谷歌搜索“Python 图片读取”，“Python 文件读取”，看看别人都是怎么做的，然后得到一些启发，读懂并且跑通别人的代码，看看别人都用了什么包什么接口，然后有针对性地去安装和使用。</p><p>更前沿的内容比如最新的研究动态，科研成果，最新算法，可能就需要去谷歌学术搜索相关论文，然后找找作者公布的源代码去跑一下试试了。</p><p>对于一些工程性的问题，比如用Python搭建网站，写软件，爬虫，我们需要学的是对应框架，比如Django，Qt之类的，这些东西就不仅要求我们跑通别人的代码，还需要对别人的代码或者工程有比较深入的理解，会套用到我们自己的使用场景中，也要掌握一些其他相关的语言和技术，有分析和探索能力。</p><p>所以其实油油认为，最重要的是<strong>百度的能力，读代码的能力，学习的能力</strong>，再加上一点<strong>创造性思维</strong>。</p><p>从广义角度讲，我们需要明确地知道Python几乎可以做任何你能在电脑和手机上做的事，以及在电脑和手机上用到的东西；</p><p>从狭义角度讲，我们需要熟悉自己最关注的应用和功能，了解自己需要用的那几个包，保证可以用Python实现自己想要的功能，让Python为我所用。</p><p><img src="python.jpg" alt="Python可以做什么？"></p><p>为了简单锻炼这方面的能力，我们来做几个小练习吧。请小仙女分别从网上找Python代码实现以下功能：</p><ul><li>冒泡排序；</li><li>在一个excel表格中写一行数字，然后用Python读入这行数字，并且输出出来；</li><li>将Python读入的这行excel数字使用冒泡排序进行排序，然后输出结果；</li><li>读入一张图片，然后将这张图片转变为灰度图像，并且分辨率调整为原来的一半，再保存到本地。</li></ul><p>在找代码、实现这些功能时候，请小仙女注意思考以下的问题：</p><ul><li>找到的代码能跑通吗？能读懂吗？出bug了怎么办？</li><li>代码用到了哪些包，哪些函数？这些函数的文档或使用说明在哪里可以找到，有哪些参数，分别做什么用？</li></ul><h2 id="奥卡姆剃刀原则与编程哲学"><a href="#奥卡姆剃刀原则与编程哲学" class="headerlink" title="奥卡姆剃刀原则与编程哲学"></a>奥卡姆剃刀原则与编程哲学</h2><p>奥卡姆剃刀是一个哲学命题，最初由14世纪英格兰、圣方济各会修士奥卡姆的威廉（William of Occam，约1285年至1349年）提出。他说：</p><blockquote><p>切勿浪费较多东西去做，用较少的东西，同样可以做好的事情。</p><p><em>Numquam ponenda est pluralitas sine necessitate.（</em>避重趋轻）</p><p><em>Pluralitas non est ponenda sine necessitate.（</em>避繁逐简）</p><p><em>Frustra fit per plura quod potest fieri per pauciora.（</em>以简御繁）</p><p><em>Entia non sunt multiplicanda praeter necessitatem.（</em>避虚就实）</p></blockquote><p>其核心思想是“如无必要，勿增实体”，“简单的就是最好的”。这一思想在哲学、管理学、语言学等领域都有应用。</p><p><img src="ockham.png" alt="奥卡姆剃刀原则"></p><p>在编程方面，结合我的经验，我们的编程哲学主要是：</p><ul><li>众所周知天下文章一大抄，天下代码也是一大抄，关键在于去哪里抄，抄什么，怎么为我所用；</li><li>从最简单的地方开始写和学；</li><li>永远用最简单快捷的方式实现我们想要的功能；</li><li>一边写，一边学，先写后学，在写中学；</li><li>积跬步以至千里，在最简单的核心模型上添枝加叶，最终实现我们想要的功能；</li><li>写代码从来都不是最困难的事情，困难的事情是算法，代码是服务人的，不是难为人的；</li><li>不要重复造轮子，一个功能不要反复去写，即如果业界已经有工人的软件或者库，你又知道自己很难比人家写的更好，那就不要自己再写一遍了，除非你是在学习轮子。</li></ul><p>比如我们想写一台车出来，要想的不是一下写一台车，而是先写一个盒子，再往上面加四个轮子，然后我们就可以说实现了一台玩具车了。</p><p>在玩具车的基础上加上动力模块，它就可以自己跑起来，再加上刹车系统转向系统，就不失为一辆车了。然后我们再考虑设计，内饰，照明等等其他东西，逐渐完善。</p><p>又比如我们想写一个网站，要想的也不是一下写一个网站出来，而是先写一个网页并且在本地浏览，然后在服务器部署成功，然后在这个网页上链接其他页面，这样就不失为一个网站了。然后我们再考虑页面设计。</p><p>当然如果我们从一开始就发现已经存在别人发布的网站模板，框架，那就不要犹豫，直接用别人的，在别人的基础上做改动，节省自己的时间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单的Python入门教学就完成啦，以后有别的内容我们再做补充。</p><p>最后希望小仙女能在学中用，在用中学，多动手，学的开心，用的开心，快乐科研，快乐生活，没有bug，没有烦恼！</p><p><img src="doit.jpg" alt="You can do it!"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象</title>
      <link href="/2021/09/04/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/09/04/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面向对象"><a href="#Python面向对象" class="headerlink" title="Python面向对象"></a>Python面向对象</h1><p>我们前面介绍的数据结构和运算都是<strong>面向过程</strong>的，而Python本身设计之初就是面向对象的编程语言，本节我们学习Python中的面向对象编程。</p><h2 id="面向过程VS面向对象"><a href="#面向过程VS面向对象" class="headerlink" title="面向过程VS面向对象"></a>面向过程VS面向对象</h2><p>面向过程是以事件为中心的编程思想，按照完成这件事需要的所有步骤，强调按部就班，一个函数一个函数、一个语句一个语句的顺序执行。</p><p>以下五子棋为例，一个下五子棋的面向过程程序大约需要以下步骤：</p><ol><li>开始游戏；</li><li>黑子先行，绘制黑子落子后的画面；</li><li>判断输赢情况，如果黑子赢了就跳到最后一步；</li><li>白子再行，绘制白子落子后的画面；</li><li>判断输赢情况，如果白子赢了就跳到最后一步；</li><li>返回第二步；</li><li>输出最后结果。</li></ol><p>而面向对象的五子棋程序会首先设计三种互相独立的对象：</p><ol><li>棋手，包括黑子和白子，负责接收用户的输入，并告知棋盘系统棋子布局的变化；</li><li>棋盘系统，负责接收棋手传递的用户落子情况，然后绘制画面，在屏幕显示；</li><li>游戏规则，负责根据棋盘情况判定输赢。</li></ol><p>看起来没有太大区别，只是对面向过程的内容做了一些封装，然而如果我们要写的代码是运行一个公司呢？每个行为方的行为规则和和属性可能都复杂到面向过程难以描述，描述了别人也难以快速看懂、快速修改和扩展。</p><p>面向对象的编程极大提高了代码的可扩展性和复用性，降低了维护难度，在写一些大型的工程时具有很明显的优势，二者对比如下表。</p><table><thead><tr><th align="center">面向过程</th><th align="center">面向对象</th></tr></thead><tbody><tr><td align="center">高耦合</td><td align="center">低耦合</td></tr><tr><td align="center">高效率，低开销，低可读性</td><td align="center">低效率，高开销，高可读性</td></tr><tr><td align="center">难维护，难扩展</td><td align="center">易维护，易扩展</td></tr></tbody></table><h2 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h2><p>面向对象技术中主要有以下几个概念：</p><ul><li><strong>类（Class）：</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法；</li><li><strong>对象（Object）：</strong>是类的实例；</li><li><strong>方法：</strong>类中定义的函数；</li><li><strong>实例变量：</strong>实例变量指的是在任意类方法内部，以“self.变量名”的方式定义的变量，其特点是只作用于调用方法的对象。另外，实例变量只能通过对象名访问，无法通过类名访问；</li><li><strong>类变量：</strong>类变量指的是在类中，但在各个类方法外定义的变量，所有类的实例化对象都同时共享类变量，可以通过类名或者对象名进行访问；</li><li><strong>保护：</strong>包括保护变量和保护方法。以单下划线开头，表示被保护的变量和方法只允许类及其子类使用，在使用中与普通变量没什么区别；</li><li><strong>私有：</strong>包括私有变量和私有方法。私有变量和私有方法只有类中定义的方法可以访问，子类不可以访问；</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象；</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。</li></ul><p>我们来定义一个简单的类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">:</span>    <span class="token comment"># id 是一个普通的类变量</span>    <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># 单下划线开头的是保护变量，_protected1是受保护的类变量</span>    <span class="token comment"># 保护变量表示只允许类及其子类使用，然而在使用中与普通变量没什么区别</span>    _protected1 <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment"># 双下划线开头的是私有变量，__private1是私有的类变量</span>    <span class="token comment"># 私有变量只有类中定义的方法可以访问，子类不可以访问</span>    __private1 <span class="token operator">=</span> <span class="token number">3</span>    <span class="token comment"># __init__()是类的构造函数，实在一个类进行实例化的时候自动调用的函数，可以传入参数</span>    <span class="token comment"># 以双下划线开头且以双下划线结尾的函数在Python中表示特殊功能的函数，我们在写代码时尽量不要写这种形式的函数名</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> para1<span class="token punctuation">,</span> para2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># name gender 是实例变量</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> para1        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> para2        <span class="token comment"># _protected2是受保护的实例变量</span>        self<span class="token punctuation">.</span>_protected2 <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment"># __private2是私有的类变量</span>        self<span class="token punctuation">.</span>__private2 <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment"># 类中的一个方法，类中定义的方法的参数都必须包含self且以self开头</span>    <span class="token comment"># self表示的是实例化的对象</span>    <span class="token keyword">def</span> <span class="token function">prtname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment"># 类中的一个方法</span>    <span class="token keyword">def</span> <span class="token function">prtgender</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>    <span class="token comment"># 私有变量只有类中定义的方法可以访问1</span>    <span class="token keyword">def</span> <span class="token function">prtprivate</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__private1<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__private2<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_prtgender</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__privatefunc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__private1<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__private2<span class="token punctuation">)</span><span class="token comment"># 实例化People类，得到一个对象x</span>x <span class="token operator">=</span> People<span class="token punctuation">(</span><span class="token string">"gs"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment"># 调用类变量可以通过对象和类</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>_protected1<span class="token punctuation">)</span><span class="token comment"># 下面注释掉的几句是错误的</span><span class="token comment"># print(People.__private1)</span><span class="token comment"># print(People.name)</span><span class="token comment"># print(People.gender)</span><span class="token comment"># print(People._protected2)</span><span class="token comment"># print(People.__private2)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_protected1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_protected2<span class="token punctuation">)</span><span class="token comment"># 下面注释掉的是错误的</span><span class="token comment"># print(x.__private1)</span><span class="token comment"># print(x.__private2)</span><span class="token comment"># Python并没有从语法上严格保证私有属性或方法的私密性</span><span class="token comment"># Python还提供了一种作弊的方法用于访问私有变量，Python寄希望于使用者自觉遵守规则并为自己的行为负责。</span><span class="token comment">#“We are all consenting adults here”</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_People__private1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_People__private2<span class="token punctuation">)</span><span class="token comment"># 调用类中的方法</span>x<span class="token punctuation">.</span>prtname<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>prtgender<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># private变量只有类中定义的方法可以调用</span>x<span class="token punctuation">.</span>prtprivate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的注释中基本写明了各种变量和函数的用法。下面我们学习继承的概念，帮助我们更好地理解类的用法。</p><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>一个类可以继承另一个类，如类Student可以继承类People，此时Student称为子类，People称为父类。子类可以继承父类的普通变量与方法，以及保护变量与方法。</p><p>现在我们基于上一小节的代码继续往下写一个People类的子类Student，看看下面这段代码中，为什么有的调用正确，有的调用错误。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> para1<span class="token punctuation">,</span> para2<span class="token punctuation">,</span> para3<span class="token punctuation">)</span><span class="token punctuation">:</span>        People<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> para1<span class="token punctuation">,</span> para2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>school <span class="token operator">=</span> para3s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"gs"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>_protected1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>_protected2<span class="token punctuation">)</span>s<span class="token punctuation">.</span>prtnames<span class="token punctuation">.</span>_prtgender<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>prtprivate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 下面注释掉的几句是错误的</span><span class="token comment"># print(s.__private1)</span><span class="token comment"># print(s.__private2)</span><span class="token comment"># s.__privatefunc()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，一个类可以有很多个子类，子类还可以有子类，可以无限继承下去。</p><p>一个子类也可以有多个父类，在初始化时需要对各个父类都做初始化。</p><p>另外如果子类中定义了与父类相同名称的函数，在子类的一个实例对象调用该函数时，就会优先调用子类中的该函数，这就是“多态”。即，对于父类的方法，一个子类可以做无限修改，而不影响其他子类，也不影响依赖于该父类和该方法的其他函数。</p><p>以一张图结束本节课程吧，不知道小仙女有没有懂那么一丢丢呀<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="oopxxx.png" alt="面向对象"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的函数</title>
      <link href="/2021/09/02/Python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2021/09/02/Python%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中的函数"><a href="#Python中的函数" class="headerlink" title="Python中的函数"></a>Python中的函数</h1><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复利用率。</p><p>Python提供了许多内建函数，比如print()。我们可以自己创建函数，这就是自定义函数。学习自定义函数可以帮助我们更好地理解Python中的函数。</p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>我们可以这样定义一个函数：</p><ul><li>以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号**()**；</li><li>圆括号里面写上此自定义参数执行所需要的参数，圆括号结束后要跟冒号“**:**”；</li><li><strong>return [表达式]</strong> 结束函数，可以选择性地返回一个值给函数调用方，不带表达式的 return 相当于返回 None。</li></ul><p><img src="%E5%87%BD%E6%95%B0.png" alt="自定义函数"></p><h2 id="举一个栗子"><a href="#举一个栗子" class="headerlink" title="举一个栗子"></a>举一个栗子</h2><p>我们来建立一个自定义函数输出”Beautiful fairy, happy fairy!”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fairy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Beautiful fairy, happy fairy!"</span><span class="token punctuation">)</span>fairy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>怎么样，是不是很简单呀，小仙女<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="再举一个栗子"><a href="#再举一个栗子" class="headerlink" title="再举一个栗子"></a>再举一个栗子</h2><p>我们来自定义一个具有参数的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b a <span class="token operator">=</span> <span class="token number">4</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于我们自定义的一个比较大小的函数啦。</p><h2 id="可变对象与不可变对象"><a href="#可变对象与不可变对象" class="headerlink" title="可变对象与不可变对象"></a>可变对象与不可变对象</h2><p>在Python中，字符串，数字，元组等是不可变对象，而列表，字典等是可变对象：</p><ul><li>不可变对象在重新赋值时，如变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，实际是新生成一个 int 类型的对象 10，再让 a 指向它，而 5 被丢弃，而非改变 a 的值；</li><li>可变对象在重新赋值时，如变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将la的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><p>因此在函数调用中传递参数时：</p><ul><li>如果传递了不可变对象，则函数中对该对象做的修改，不会影响原对象；</li><li>如果传递了可变对象，则函数中对该对象的修改，会影响原对象。</li></ul><p>看下面这个例子就明白啦：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">changenum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">changelist</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>a <span class="token operator">=</span> <span class="token number">1</span>changenum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>changelist<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指定关键字的函数调用"><a href="#指定关键字的函数调用" class="headerlink" title="指定关键字的函数调用"></a>指定关键字的函数调用</h2><p>上文中我们写的函数都没有指定关键字，对参数的调用也是按顺序输入并调用的。现在我们来看这样的一个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> printinfo<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"little fairy"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的输出结果应该为：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">姓名:  little fairy年龄:  18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个例子告诉我们，可以借用函数中的关键字，确定把调用时的参数传递给函数里的哪个变量，制定了关键字就不用严格按照调用顺序。</p><h2 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h2><p>缺省参数指的是函数定义时所设置的默认参数值，如果调用时不传入对应值，就会使用默认参数。来看例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"姓名: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> printinfo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"little fairy"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们定义的printinfo()函数中的age参数就设置了缺省值18，即使调用时不输入age参数，也可以使用缺省值。</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Python中有一种特殊的函数即匿名函数，它的定义形式非常简单：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>冒号前面是函数参数，后面是函数返回值。我们来看一个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mysum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为: "</span><span class="token punctuation">,</span> mysum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为: "</span><span class="token punctuation">,</span> mysum<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是一种匿名函数使用方式，还有另一种更常见的使用方式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关于函数我们就介绍这么多啦，后面我们看情况再学习吧。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱（罗伊·克里夫特）</title>
      <link href="/2021/09/01/%E7%88%B1%EF%BC%88%E7%BD%97%E4%BC%8A%C2%B7%E5%85%8B%E9%87%8C%E5%A4%AB%E7%89%B9%EF%BC%89/"/>
      <url>/2021/09/01/%E7%88%B1%EF%BC%88%E7%BD%97%E4%BC%8A%C2%B7%E5%85%8B%E9%87%8C%E5%A4%AB%E7%89%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="爱（罗伊·克里夫特）"><a href="#爱（罗伊·克里夫特）" class="headerlink" title="爱（罗伊·克里夫特）"></a>爱（罗伊·克里夫特）</h1><p>《爱》是是诗人罗伊·克里夫特的一首诗。罗伊在1979年自费出版了一本28页的诗集，其中最有名的诗就是《爱》。</p><p>2016年5月22日，腾讯视频播出<a href="https://v.qq.com/x/page/w030150d9hg.html">“蝴蝶为你朗读第487期：爱 罗伊克里夫特作品”。</a></p><h2 id="Love"><a href="#Love" class="headerlink" title="Love"></a>Love</h2><p><strong>by Roy Croft</strong></p><p>I love you,<br>Not only for what you are,<br>But for what I am<br>When I am with you.</p><p>I love you,<br>Not only for what<br>You have made of yourself,<br>But for what<br>You are making of me.<br>I love you<br>For the part of me<br>That you bring out;<br>I love you<br>For putting your hand<br>Into my heaped-up heart<br>And passing over<br>All the foolish, weak things<br>That you can’t help<br>Dimly seeing there,<br>And for drawing out<br>Into the light<br>All the beautiful belongings<br>That no one else had looked<br>Quite far enough to find.<br>I love you because you<br>Are helping me to make<br>Of the lumber of my life<br>Not a tavern<br>But a temple;<br>Out of the works<br>Of my every day<br>Not a reproach<br>But a song.</p><p>I love you<br>Because you have done<br>More than any creed<br>Could have done<br>To make me good<br>And more than any fate<br>Could have done<br>To make me happy.<br>You have done it<br>Without a touch,<br>Without a word,<br>Without a sign.<br>You have done it<br>By being yourself.<br>Perhaps that is what<br>Being a friend means,<br>After all.</p><h2 id="爱"><a href="#爱" class="headerlink" title="爱"></a>爱</h2><p><strong>罗伊·克里夫特</strong></p><p>我爱你，<br>不光因为你的样子，<br>还因为，<br>和你在一起时，<br>我的样子。<br>我爱你，<br>不光因为你为我而做的事，<br>还因为，<br>为了你，<br>我能做成的事。</p><p>我爱你，<br>因为你能唤出，<br>我最真的那部分。<br>我爱你，<br>因为你穿越我心灵的旷野，<br>如同阳光穿透水晶般容易。<br>我的傻气，<br>我的弱点，<br>在你的目光里几乎不存在，<br>而我心里最美丽的地方，<br>却被你的光芒照的通亮。<br>别人都不曾费心走那么远，<br>别人都觉得寻找太麻烦，<br>所以没人发现过我的美丽，<br>所以没人到过这里。<br>我爱你，<br>因为你将我的生活化腐朽为神奇。<br>因为有你，<br>我的生命，<br>不再是平凡的旅店，<br>而成为了恢弘的庙宇，<br>我日复一日的工作里，<br>不再充满抱怨，<br>而是美妙的旋律。</p><p>我爱你，<br>因为你比信念更能使我的生活变得无比美好，<br>因为你比命运更能使我的生活变得充满欢乐。<br>而你做出这一切的一切，<br>不费一丝力气，<br>一句言辞，<br>一个暗示，<br>你做出这一切的一切，<br>只是因为你就是你，<br>毕竟，<br>这也许就是爱的含义。</p><p><img src="%E7%88%B1.jpg" alt="爱 罗伊·克里夫特"></p>]]></content>
      
      
      <categories>
          
          <category> 悦读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹧鸪天·别后盼相逢</title>
      <link href="/2021/08/31/%E9%B9%A7%E9%B8%AA%E5%A4%A9%C2%B7%E5%88%AB%E5%90%8E%E7%9B%BC%E7%9B%B8%E9%80%A2/"/>
      <url>/2021/08/31/%E9%B9%A7%E9%B8%AA%E5%A4%A9%C2%B7%E5%88%AB%E5%90%8E%E7%9B%BC%E7%9B%B8%E9%80%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="鹧鸪天·别后盼相逢"><a href="#鹧鸪天·别后盼相逢" class="headerlink" title="鹧鸪天·别后盼相逢"></a>鹧鸪天·别后盼相逢</h1><p>芊芊玉臂白素手，明眸皓齿樱桃口。微微细雨金陵月，斑斑树影夏夜风。<br>从别后，盼相逢，几回魂梦与君同。何当共赏秦淮水，风月皎洁似梦中。</p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词 </tag>
            
            <tag> 油先生选集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咏芙蓉仙子</title>
      <link href="/2021/08/31/%E5%92%8F%E8%8A%99%E8%93%89%E4%BB%99%E5%AD%90/"/>
      <url>/2021/08/31/%E5%92%8F%E8%8A%99%E8%93%89%E4%BB%99%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="咏芙蓉仙子"><a href="#咏芙蓉仙子" class="headerlink" title="咏芙蓉仙子"></a>咏芙蓉仙子</h1><p>皓齿明眸荷花面，飘然出水芙蓉仙。</p><p>天庭今日偶得暇，偏着素衣游人间。</p>]]></content>
      
      
      <categories>
          
          <category> 为你而作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
            <tag> 油先生选集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基本语法</title>
      <link href="/2021/08/27/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/08/27/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基本语法"><a href="#Python基本语法" class="headerlink" title="Python基本语法"></a>Python基本语法</h1><p>这一章我们主要来学习Python语言使用的基本语法，便于以后读写Python代码。当然我们只学习最重要的部分。</p><h2 id="Python基本数据类型和运算符"><a href="#Python基本数据类型和运算符" class="headerlink" title="Python基本数据类型和运算符"></a>Python基本数据类型和运算符</h2><p>Python中的<strong>变量</strong>需要先<strong>声明</strong>后使用。看下面一段代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">counter <span class="token operator">=</span> <span class="token number">100</span>          <span class="token comment"># 整型变量 int</span>miles   <span class="token operator">=</span> <span class="token number">1000.0</span>       <span class="token comment"># 浮点型变量 float</span>name    <span class="token operator">=</span> <span class="token string">"fairy"</span>      <span class="token comment"># 字符串 str，注意字符串既可以用双引号，也可以用单引号，"fairy"和'fairy'在python里是等同的 </span>flag    <span class="token operator">=</span> <span class="token boolean">True</span>   <span class="token comment"># 布尔类型 bool，其值仅可以为True或False</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>miles<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行该代码可以得到：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; 100(base) PS C:\Users\15617&gt; 1000.0(base) PS C:\Users\15617&gt; fairy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码中<strong>声明</strong>并<strong>赋值</strong>了整型变量counter，浮点型变量miles，字符串类型变量name，和布尔（Bool）类型的变量flag，然后调用Python自带的print<strong>函数</strong>输出各变量。函数的概念我们后面会讲，这里只使用不讨论。</p><p>注意布尔类型变量的值仅可为True或False，在运算和判断中等价于1和0，用于标记“是”和“非”。</p><p>整型、浮点型可以用<strong>运算符</strong>进行各种运算，如以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">21</span>c <span class="token operator">=</span> a <span class="token comment"># "="是赋值符号，也是一种运算符</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token comment"># 加法</span>c <span class="token operator">=</span> a <span class="token operator">-</span> b <span class="token comment"># 减法</span>c <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token comment"># 乘法</span>c <span class="token operator">=</span> a <span class="token operator">/</span> b <span class="token comment"># 除法</span>c <span class="token operator">=</span> a <span class="token operator">%</span> b <span class="token comment"># 取模，返回a除以b得到的余数</span>c <span class="token operator">=</span> a <span class="token operator">**</span> b <span class="token comment"># 幂运算，返回a的b次幂</span>c <span class="token operator">=</span> a <span class="token operator">//</span> b <span class="token comment"># 整除运算，将a/b的商向下取整，例如，9/2=4.5,9//2=4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串常见的运算符和运算如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">"mi"</span>b <span class="token operator">=</span> <span class="token string">"Xiao mi"</span>c <span class="token operator">=</span> b <span class="token operator">+</span> a <span class="token comment"># 字符串拼接，得到的c为新字符串"Xiao mimi"</span>c <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 通过索引获取字符，得到的字符c="i"，字符串中的字符从左到右索引分别为0，1，2，...</span>c <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment"># 字符串截取，这里截取了第0~4个字符，得到的字符串c="Xiao "，注意不包括第5个字符，注意空格也是字符</span>c <span class="token operator">=</span> a <span class="token keyword">in</span> b <span class="token comment"># 成员运算，如果字符串a存在于字符串b中，则c为布尔类型的True，否则为False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咪咪可以试着更改一下参数或者a, b的值，运行一下代码，输出c的值，看看是否符合自己的预期。</p><p><strong>总结与延申：</strong></p><ul><li>这一节我们学习了基本变量的声明和计算，包括整数、浮点数、字符串、布尔类型等，加减乘除模，字符串的查询拼接等等；</li><li>Python中的一切运算最终都要落到变量的运算上来，所以如果想对变量做某种处理而不知道该怎么处理，就可以百度或者谷歌啦。</li></ul><p><strong>小练习:</strong></p><p>现在我们来做两个小练习，巩固一下学到的知识：</p><ul><li>已知三角形的三边长a=5, b=6, c=7，怎样在Python中计算三角形的面积？（提示，可以采用海伦公式）</li><li>假设现在变量x=10，y=20，怎样在Python中把x和y的值交换？</li></ul><h2 id="Python逻辑运算"><a href="#Python逻辑运算" class="headerlink" title="Python逻辑运算"></a>Python逻辑运算</h2><p>假设x为10，y为20，Python中常见的逻辑运算符有以下几种：</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td>(x and y) 返回 20</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td>(x or y) 返回 10</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not(x and y) 返回 False</td></tr></tbody></table><p>下面这段代码说明一切啦：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">and</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"1 - 变量 a 和 b 都为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"1 - 变量 a 和 b 有一个不为 true"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">or</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"2 - 变量 a 和 b 都为 true，或其中一个变量为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"2 - 变量 a 和 b 都不为 true"</span><span class="token punctuation">)</span> <span class="token comment"># 修改变量 a 的值</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">and</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"3 - 变量 a 和 b 都为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"3 - 变量 a 和 b 有一个不为 true"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">or</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"4 - 变量 a 和 b 都为 true，或其中一个变量为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"4 - 变量 a 和 b 都不为 true"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span> a <span class="token keyword">and</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"5 - 变量 a 和 b 都为 false，或其中一个变量为 false"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"5 - 变量 a 和 b 都为 true"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-数据类型转换"><a href="#Python-数据类型转换" class="headerlink" title="Python 数据类型转换"></a>Python 数据类型转换</h2><p>Python中的数据可以进行数据类型转换，需要分别采用int float str bool这样的关键字。如以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">520</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">13.14</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">'9.99'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>做数据类型转换只需要使用关键字括号+参数的形式即可。注意由一个浮点数构成的字符串转为整数时，需要先转为浮点数，再转为整数。</p><h2 id="Python基本数据结构"><a href="#Python基本数据结构" class="headerlink" title="Python基本数据结构"></a>Python基本数据结构</h2><p>上一节我们学的是基本变量的赋值和运算规则，然而一个变量一个变量命名太慢了，如果我们有一大批数据需要存储，就很难给一个一个数据都分别设置变量来存储。这时候我们就需要数据结构来进行统一操作和处理。</p><p>Python中有四种基本的数据结构：列表，元组，字典，集合，如下面的代码所定义的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Xmm"</span><span class="token punctuation">,</span> <span class="token number">1994</span><span class="token punctuation">,</span> <span class="token number">4.16</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span> <span class="token comment"># 列表中的元素可以为上一节讲的各种数据类型</span><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Gs"</span><span class="token punctuation">,</span> <span class="token number">1995</span><span class="token punctuation">,</span> <span class="token number">2.28</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 元组和列表一样，区别仅仅在于元组中的值定义好之后无法更改</span>dictionary <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"跟油油学Python"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">8.15</span><span class="token punctuation">,</span> <span class="token string">"site"</span><span class="token punctuation">:</span><span class="token string">"formi_python"</span><span class="token punctuation">}</span> <span class="token comment"># 字典用于建立自定义的对应关系，每组对应关系包含一个key一个value，在冒号前后;key和value的值均可为上一节讲的各种数据类型</span><span class="token builtin">set</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">}</span><span class="token comment"># 集合是一个无序的不重复元素集，每个元素可为上一节讲的各种数据类型。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只介绍最常见的数据结构list的最常见的用法，别的数据结构我们知道有它们的主要特性就好啦，需要用的时候再学习：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">]</span> <span class="token comment"># 一个包含7个字符串的列表</span><span class="token comment"># 列表查询</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出list[0]，即第0个元素'red'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出list[2]，即第2个元素'blue'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第-1个元素，即倒数第一个元素'black'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第-2个元素，即'white'，其他以此类推</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第1~3个元素，即['green', 'blue', 'yellow']，注意得到的结果是一个新的list</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第1~倒数第3个元素，即['green', 'blue', 'yellow']，注意得到的结果是一个新的list</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第3个以及后面的所有元素，即['yellow', 'white', 'black']，注意得到的结果是一个新的list</span><span class="token comment"># 列表修改</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'pink'</span> <span class="token comment"># 将第2个元素赋值为'pink'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token comment"># 猜猜输出结果是什么？</span><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span> <span class="token comment"># 在列表末尾加入元素'orange'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token comment"># 猜猜输出结果是什么？</span><span class="token keyword">del</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">#删除列表第2个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token comment"># 猜猜输出结果是什么？</span><span class="token comment"># 列表脚本操作符</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1 <span class="token operator">+</span> list2<span class="token punctuation">)</span> <span class="token comment"># "+"可以将list1和list2拼接为新的list</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> list1<span class="token punctuation">)</span> <span class="token comment"># "in"可以判断一个元素是否存在于一个list中，返回一个布尔类型的True或False，这里输出True</span><span class="token comment"># 列表常用函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># len()函数可以得到列表中元素的个数，返回值是整型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># max()函数返回list中元素的最大值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># min()函数返回list中元素的最小值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试着运行一下这段代码，看得到的效果和我们预期的一样不一样吧~</p><p>注意这里都是用print()函数将结果直接输出出来了，当然也可以把结果赋给新的变量。</p><p><strong>总结与延申：</strong></p><ul><li>这一节我们学习了基本数据结构及操作，主要是list的操作，数据结构主要是为了方便大规模处理数据而存在的；</li><li>每个数据结构在Python中都有许多已经写好的<strong>函数</strong>可以进行处理，例如len(), max(), min()等，比较共性的功能基本都不需要我们自己去实现，百度或者谷歌一下就会用啦。</li></ul><p><strong>小练习：</strong></p><ul><li>请咪咪同学在Python中声明一个长度为10的list，前两个元素分别为数字0和1。然后通过计算得到其他元素的值，要求从第三个元素开始，每个元素都等于前两个元素之和。即“斐波那契数列”。</li><li>对上述得到的斐波那契数列list进行翻转。</li></ul><h2 id="Python条件语句"><a href="#Python条件语句" class="headerlink" title="Python条件语句"></a>Python条件语句</h2><p>有时候我们只在一定条件下才做运算和处理，这个时候就需要条件语句。</p><p>Python中的条件语句if用法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入你家猪猪的年龄: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你是在逗我吧!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相当于 14 岁的人。"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相当于 22 岁的人。"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    human <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">+</span> <span class="token punctuation">(</span>age <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对应人类年龄: "</span><span class="token punctuation">,</span> human<span class="token punctuation">)</span> <span class="token comment">### 退出提示</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"点击 enter 键退出"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较简单易懂。</p><h2 id="Python-for循环语句"><a href="#Python-for循环语句" class="headerlink" title="Python for循环语句"></a>Python for循环语句</h2><p>循环语句我们之前在学写乘法口诀表的时候有过接触了，这里再细致看一下。</p><p>先来看我们熟悉的for循环，它的一般格式如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>    statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它的执行流程图是这样的：</p><p><img src="for.jpg" alt="for循环执行流程图"></p><p>下面这份代码里的两个例子是for循环最常用的用法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">characters_of_fairy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"beautiful"</span><span class="token punctuation">,</span> <span class="token string">"clever"</span><span class="token punctuation">,</span> <span class="token string">"lovely"</span><span class="token punctuation">,</span> <span class="token string">"ambitious"</span><span class="token punctuation">]</span><span class="token keyword">for</span> character <span class="token keyword">in</span> characters_of_fairy<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>characters_of_fairy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>characters_of_fairy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-while循环"><a href="#Python-while循环" class="headerlink" title="Python while循环"></a>Python while循环</h2><p>while循环与for循环大同小异：</p><p><img src="while.jpg" alt="while循环执行流程图"></p><p>下面这个例子演示了使用while循环从1累加到100：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>counter <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> counter <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> counter    counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是不是很简单呀<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="Python-循环嵌套"><a href="#Python-循环嵌套" class="headerlink" title="Python 循环嵌套"></a>Python 循环嵌套</h2><p>Python的循环嵌套我们前面也已经认识过了，它是把内层循环当作了外层循环的循环体。Python允许任意层数的循环嵌套，例如双层for循环：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>   <span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>      statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>双层while循环：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> expression<span class="token punctuation">:</span>   <span class="token keyword">while</span> expression<span class="token punctuation">:</span>      statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>双层循环的执行流程图如下：</p><p><img src="double.png" alt="双层循环执行流程图"></p><p>当然for循环也可以和while循环互相嵌套。</p><p>作为一个小练习，我们再来复习一下Python正向和反向输出乘法口诀表吧<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="break-continue-与-pass"><a href="#break-continue-与-pass" class="headerlink" title="break, continue 与 pass"></a>break, continue 与 pass</h2><p>在循环语句中还有两个常用的关键字，分别是break和continue。其中break用于立刻结束当前循环转而执行后面的语句，continue用于结束本轮循环，继续下一轮循环。我们通过下面这两个例子来理解：</p><p>break语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>continue语句：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小仙女可以分别执行这两份代码，看看结果有什么不同呢<span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>而pass语句表示空语句，什么也不做，它的作用是占位。因为我们知道Python里面的循环不可以没有循环体，if语句也不可以没有判定成功后的执行内容，自定义函数也不可以为空，所以如果我们需要一个空循环，或者空函数，或者空的if语句，就需要用到pass：</p><p>如以下语句是合法的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">mymax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而以下语句是非法的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">mymax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="大练习"><a href="#大练习" class="headerlink" title="大练习"></a>大练习</h2><p>请咪咪小朋友用Python语言判断并输出2~100以内的所有素数。</p><p>会做这个题目或者读懂下面这段代码，本文的内容就全都理解到位啦。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>      j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境搭建与Python入门</title>
      <link href="/2021/08/27/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8EPython%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/27/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8EPython%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建与Python入门"><a href="#环境搭建与Python入门" class="headerlink" title="环境搭建与Python入门"></a>环境搭建与Python入门</h1><p>本文我们先了解什么是Python，然后在Windows上搭建Python环境，学会如何运行Python代码，再跑几个样例代码做测试，感受一下Python的魅力。</p><h2 id="Python是什么"><a href="#Python是什么" class="headerlink" title="Python是什么"></a>Python是什么</h2><p>计算机上的各种软件都是用编程语言写成的，编程语言可以沟通人与计算机，便于人们更好地使用计算机的算力和资源。</p><p>Python语言正是当前最流行的编程语言，主要特点是简单明了、功能强大、扩展性强，只有你想不到，没有它做不到。</p><p>Python在各种工程和科研领域都有应用，尤其在人工智能领域，几乎占垄断地位。</p><p>Python3目前正在完全取代Python2，二者大同小异，因此我们只学习Python3，也只用Python3，本文中的所有Python均指Python3. </p><p>我们后面要做的爬虫、NLP等内容都是基于Python语言的，所以对Python有基本了解是很有必要的。</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><p>我们通过安装Anaconda来搭建Python环境。</p><p>Anaconda是当前最流行的Python发行版本，其中包含了Python和许多常用工具包及其依赖，还提供了conda、pip等工具用于环境和包管理，十分方便。</p><p>我们可以在<a href="https://www.anaconda.com/products/individual#Downloads">这里</a>下载最新的安装包，建议下载Windows 64 bit版本安装包，如下图所示：</p><p><img src="anaconda.png" alt="Anaconda下载"></p><p>安装完成后来测试一下。按下Windows键，找到Anaconda3 (64-bit) 文件夹，然后打开**Anaconda Powershell Prompt (Anaconda3)**，输入Python：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Anaconda Powershell Prompt (Anaconda3)就是我们后面经常要用到的PowerShell，这是Anaconda提供给我们的。</p><p>然后按下回车，看到类似如下输出即可表明Anaconda安装成功：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; pythonPython 3.8.3 (default, Jul  2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以关闭PowerShell了。</p><h2 id="安装Sublime-Text-3"><a href="#安装Sublime-Text-3" class="headerlink" title="安装Sublime Text 3"></a>安装Sublime Text 3</h2><p>安装完了Python环境，我们现在需要一个编辑器来写Python代码，这里推荐的是Sublime Text 3，也是油油最喜欢的代码和文本编辑器。</p><p>Sublime Text3的特点是简洁轻便美观并且免费。唯一缺点是偶尔会弹出来购买提示框，按Esc忽略即可。</p><p>如下图，可以在<a href="https://www.sublimetext.com/3">这里</a>下载Windows 64 bit版本安装包。</p><p><img src="sublime.png" alt="Sublime Text 3下载"></p><p>安装还是建议安装在D盘，安装完成后在桌面上会出现Sublime Text 3的图标，打开即可使用。</p><h2 id="咪咪的第一个Python代码"><a href="#咪咪的第一个Python代码" class="headerlink" title="咪咪的第一个Python代码"></a>咪咪的第一个Python代码</h2><p>现在我们来写第一个Python代码。 </p><p>打开Sublime Text 3，在键盘上按<strong>Ctrl+N</strong>，这样就新建了一个文件。在文件中输入以下内容，只有一句话，调用print函数输出双引号引起来的字符串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Beautiful fairy, happy fairy!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在键盘上按<strong>Ctrl+S</strong>，在<strong>另存为</strong>框中选择一个目录，这里作为示例选的是E盘100dataset文件夹。</p><p>然后在文件名一栏输入<strong>test.py</strong>，点击保存。注意，目录应尽量避免中文名。</p><p>代码写完了，现在我们来执行这份名为<strong>test.py</strong>的代码。首先需要打开<strong>PowerShell</strong>并切换目录。</p><p>在文件管理器中打开你刚才选择的目录，在地址栏单击鼠标，然后<strong>Ctrl+C</strong>可以复制当前目录位置，如下图，我们复制了E盘100dataset文件夹的位置：</p><p><img src="path.png" alt="执行目录"></p><p>然后依照上部分讲的方式，打开PowerShell，在其中输入”cd “，然后<strong>Ctrl+V</strong>粘贴我们刚才复制的目录位置，再回车，即可将PowerShell的工作目录转移到我们代码的位置下，如这里我们转移到了”E:\100dataset”的位置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; cd E:\100dataset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在我们可以执行代码了。在PowerShell中输入**”python “+待执行的.py文件名**，这里应该是“python test.py”，如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS E:\100dataset&gt; python test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后按下回车键，然后你就可以看到PowerShell窗口在空白行输出的字符串啦：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS E:\100dataset&gt; Beautiful fairy, happy fairy!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>怎么样，是不是很简单。当然，字符串可以是其他任何内容。</p><h2 id="Python输出九九乘法口诀表"><a href="#Python输出九九乘法口诀表" class="headerlink" title="Python输出九九乘法口诀表"></a>Python输出九九乘法口诀表</h2><p>我们再来看一个例子。将test.py中的内容全部删掉，输入以下内容（可以复制粘贴）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}x{}={}\t'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在PowerShell窗口再次输入：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS E:\100dataset&gt; python test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并按下回车，怎么样，是不是得到了一个九九乘法口诀表？试着读一下代码，能读懂它的逻辑吗？</p><h2 id="Python输出心形"><a href="#Python输出心形" class="headerlink" title="Python输出心形"></a>Python输出心形</h2><p>将<strong>test.py</strong>中的内容全部删掉，输入以下内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timewords <span class="token operator">=</span> <span class="token string">"lovemi"</span><span class="token keyword">for</span> item <span class="token keyword">in</span> words<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">3</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以同样的方式运行，是不是得到了一个心形？这段代码比较复杂，不需要掌握，只是想展示一下Python语言的强大和精妙。</p><p>给咪咪比个❤哦~</p><h2 id="Python小游戏：贪吃蛇"><a href="#Python小游戏：贪吃蛇" class="headerlink" title="Python小游戏：贪吃蛇"></a>Python小游戏：贪吃蛇</h2><p>运行这个小游戏的代码需要先安装一个名为<strong>pygame</strong>的包，在PowerShell中输入以下内容并回车就可以使用pip安装新的工具包了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">(base) PS C:\Users\15617&gt; pip install pygame<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们以后还会用pip安装和管理其他工具包。等待安装完成，然后在test.py中输入以下代码并以前述方式运行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> pygame<span class="token keyword">import</span> sys<span class="token keyword">from</span> pygame<span class="token punctuation">.</span><span class="token builtin">locals</span> <span class="token keyword">import</span> <span class="token operator">*</span> Snakespeed <span class="token operator">=</span> <span class="token number">17</span>Window_Width <span class="token operator">=</span> <span class="token number">1600</span>Window_Height <span class="token operator">=</span> <span class="token number">1000</span>Cell_Size <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># Width and height of the cells</span><span class="token comment"># Ensuring that the cells fit perfectly in the window. eg if cell size was</span><span class="token comment"># 10     and window width or windowheight were 15 only 1.5 cells would</span><span class="token comment"># fit.</span><span class="token keyword">assert</span> Window_Width <span class="token operator">%</span> Cell_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Window width must be a multiple of cell size."</span><span class="token comment"># Ensuring that only whole integer number of cells fit perfectly in the window.</span><span class="token keyword">assert</span> Window_Height <span class="token operator">%</span> Cell_Size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Window height must be a multiple of cell size."</span>Cell_W <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> Cell_Size<span class="token punctuation">)</span>  <span class="token comment"># Cell Width</span>Cell_H <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>Window_Height <span class="token operator">/</span> Cell_Size<span class="token punctuation">)</span>  <span class="token comment"># Cellc Height</span>  White <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>Black <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>Red <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># Defining element colors for the program.</span>Green <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>DARKGreen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>DARKGRAY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>YELLOW <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>Red_DARK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>BLUE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>BLUE_DARK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>  BGCOLOR <span class="token operator">=</span> Black  <span class="token comment"># Background color</span>  UP <span class="token operator">=</span> <span class="token string">'up'</span>DOWN <span class="token operator">=</span> <span class="token string">'down'</span>      <span class="token comment"># Defining keyboard keys.</span>LEFT <span class="token operator">=</span> <span class="token string">'left'</span>RIGHT <span class="token operator">=</span> <span class="token string">'right'</span> HEAD <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># Syntactic sugar: index of the snake's head</span>  <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> SnakespeedCLOCK<span class="token punctuation">,</span> DISPLAYSURF<span class="token punctuation">,</span> BASICFONT     pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    SnakespeedCLOCK <span class="token operator">=</span> pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    DISPLAYSURF <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span>Window_Width<span class="token punctuation">,</span> Window_Height<span class="token punctuation">)</span><span class="token punctuation">)</span>    BASICFONT <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token string">'freesansbold.ttf'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'Snake'</span><span class="token punctuation">)</span>     showStartScreen<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        runGame<span class="token punctuation">(</span><span class="token punctuation">)</span>        showGameOverScreen<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">runGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Set a random start point.</span>    startx <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Cell_W <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>    starty <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Cell_H <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span>    wormCoords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> startx<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> starty<span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> startx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> starty<span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> startx <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> starty<span class="token punctuation">}</span><span class="token punctuation">]</span>    direction <span class="token operator">=</span> RIGHT     <span class="token comment"># Start the apple in a random place.</span>    apple <span class="token operator">=</span> getRandomLocation<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># main game loop</span>        <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># event handling loop</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> QUIT<span class="token punctuation">:</span>                terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> KEYDOWN<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_LEFT<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> RIGHT<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> LEFT                <span class="token keyword">elif</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_RIGHT<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> LEFT<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> RIGHT                <span class="token keyword">elif</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_UP<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> DOWN<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> UP                <span class="token keyword">elif</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_DOWN<span class="token punctuation">)</span> <span class="token keyword">and</span> direction <span class="token operator">!=</span> UP<span class="token punctuation">:</span>                    direction <span class="token operator">=</span> DOWN                <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> K_ESCAPE<span class="token punctuation">:</span>                    terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># check if the Snake has hit itself or the edge</span>        <span class="token keyword">if</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> Cell_W <span class="token keyword">or</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> Cell_H<span class="token punctuation">:</span>            <span class="token keyword">return</span>  <span class="token comment"># game over</span>        <span class="token keyword">for</span> wormBody <span class="token keyword">in</span> wormCoords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> wormBody<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> wormBody<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>  <span class="token comment"># game over</span>         <span class="token comment"># check if Snake has eaten an apply</span>        <span class="token keyword">if</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">==</span> apple<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token keyword">and</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">==</span> apple<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># don't remove worm's tail segment</span>            apple <span class="token operator">=</span> getRandomLocation<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># set a new apple somewhere</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">del</span> wormCoords<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># remove worm's tail segment</span>         <span class="token comment"># move the worm by adding a segment in the direction it is moving</span>        <span class="token keyword">if</span> direction <span class="token operator">==</span> UP<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span>        <span class="token keyword">elif</span> direction <span class="token operator">==</span> DOWN<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>        <span class="token keyword">elif</span> direction <span class="token operator">==</span> LEFT<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span>                <span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token keyword">elif</span> direction <span class="token operator">==</span> RIGHT<span class="token punctuation">:</span>            newHead <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span>                <span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> wormCoords<span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        wormCoords<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> newHead<span class="token punctuation">)</span>        DISPLAYSURF<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>BGCOLOR<span class="token punctuation">)</span>        drawGrid<span class="token punctuation">(</span><span class="token punctuation">)</span>        drawWorm<span class="token punctuation">(</span>wormCoords<span class="token punctuation">)</span>        drawApple<span class="token punctuation">(</span>apple<span class="token punctuation">)</span>        drawScore<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>wormCoords<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        SnakespeedCLOCK<span class="token punctuation">.</span>tick<span class="token punctuation">(</span>Snakespeed<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawPressKeyMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pressKeySurf <span class="token operator">=</span> BASICFONT<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Press a key to play.'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    pressKeyRect <span class="token operator">=</span> pressKeySurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    pressKeyRect<span class="token punctuation">.</span>topleft <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">,</span> Window_Height <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span>    DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>pressKeySurf<span class="token punctuation">,</span> pressKeyRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">checkForKeyPress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span>QUIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    keyUpEvents <span class="token operator">=</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span>KEYUP<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>keyUpEvents<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> keyUpEvents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">==</span> K_ESCAPE<span class="token punctuation">:</span>        terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> keyUpEvents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key  <span class="token keyword">def</span> <span class="token function">showStartScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    titleFont <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token string">'freesansbold.ttf'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    titleSurf1 <span class="token operator">=</span> titleFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Snake!'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">,</span> DARKGreen<span class="token punctuation">)</span>    degrees1 <span class="token operator">=</span> <span class="token number">0</span>    degrees2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        DISPLAYSURF<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>BGCOLOR<span class="token punctuation">)</span>        rotatedSurf1 <span class="token operator">=</span> pygame<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>titleSurf1<span class="token punctuation">,</span> degrees1<span class="token punctuation">)</span>        rotatedRect1 <span class="token operator">=</span> rotatedSurf1<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>        rotatedRect1<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Window_Height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>rotatedSurf1<span class="token punctuation">,</span> rotatedRect1<span class="token punctuation">)</span>         drawPressKeyMsg<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> checkForKeyPress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># clear event queue</span>            <span class="token keyword">return</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        SnakespeedCLOCK<span class="token punctuation">.</span>tick<span class="token punctuation">(</span>Snakespeed<span class="token punctuation">)</span>        degrees1 <span class="token operator">+=</span> <span class="token number">3</span>  <span class="token comment"># rotate by 3 degrees each frame</span>        degrees2 <span class="token operator">+=</span> <span class="token number">7</span>  <span class="token comment"># rotate by 7 degrees each frame</span>  <span class="token keyword">def</span> <span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">getRandomLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Cell_W <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Cell_H <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">showGameOverScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gameOverFont <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token string">'freesansbold.ttf'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    gameSurf <span class="token operator">=</span> gameOverFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Game'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    overSurf <span class="token operator">=</span> gameOverFont<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Over'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    gameRect <span class="token operator">=</span> gameSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    overRect <span class="token operator">=</span> overSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    gameRect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    overRect<span class="token punctuation">.</span>midtop <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> gameRect<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">)</span>     DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>gameSurf<span class="token punctuation">,</span> gameRect<span class="token punctuation">)</span>    DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>overSurf<span class="token punctuation">,</span> overRect<span class="token punctuation">)</span>    drawPressKeyMsg<span class="token punctuation">(</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>    checkForKeyPress<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># clear out any key presses in the event queue</span>     <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> checkForKeyPress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># clear event queue</span>            <span class="token keyword">return</span>  <span class="token keyword">def</span> <span class="token function">drawScore</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">:</span>    scoreSurf <span class="token operator">=</span> BASICFONT<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'Score: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> White<span class="token punctuation">)</span>    scoreRect <span class="token operator">=</span> scoreSurf<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    scoreRect<span class="token punctuation">.</span>topleft <span class="token operator">=</span> <span class="token punctuation">(</span>Window_Width <span class="token operator">-</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    DISPLAYSURF<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>scoreSurf<span class="token punctuation">,</span> scoreRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawWorm</span><span class="token punctuation">(</span>wormCoords<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> coord <span class="token keyword">in</span> wormCoords<span class="token punctuation">:</span>        x <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size        y <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size        wormSegmentRect <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> DARKGreen<span class="token punctuation">,</span> wormSegmentRect<span class="token punctuation">)</span>        wormInnerSegmentRect <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span>            x <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> Cell_Size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> Cell_Size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> wormInnerSegmentRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawApple</span><span class="token punctuation">(</span>coord<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size    y <span class="token operator">=</span> coord<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">*</span> Cell_Size    appleRect <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Rect<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> Red<span class="token punctuation">,</span> appleRect<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">drawGrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Window_Width<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># draw vertical lines</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> DARKGRAY<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> Window_Height<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Window_Height<span class="token punctuation">,</span> Cell_Size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># draw horizontal lines</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span>DISPLAYSURF<span class="token punctuation">,</span> DARKGRAY<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Window_Width<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> SystemExit<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，代码中”#”后面的部分为<strong>注释</strong>，是为了方便读者阅读代码而存在的，不具备语法意义。</p><p>在操作界面按下键盘上的方向键上下左右，就可以控制贪吃蛇的移动方向。怎么样，是不是很有趣~</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
